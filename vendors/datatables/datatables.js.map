{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/datatables/build/vendors/datatables/datatables.js"],"names":[],"mappings":"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","file":"datatables.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! DataTables 1.10.13\n * ©2008-2016 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.13\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2016 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n\n(function( factory ) {\n\t\"use strict\";\n\n\tfactory( window.jQuery, window, document );\n}\n(function( $, window, document, undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n\t * flexible tool, based upon the foundations of progressive enhancement,\n\t * which will add advanced interaction controls to any HTML table. For a\n\t * full list of features please refer to\n\t * [DataTables.net](href=\"http://datatables.net).\n\t *\n\t * Note that the `DataTable` object is not a global variable but is aliased\n\t * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n\t * be  accessed.\n\t *\n\t *  @class\n\t *  @param {object} [init={}] Configuration object for DataTables. Options\n\t *    are defined by {@link DataTable.defaults}\n\t *  @requires jQuery 1.7+\n\t *\n\t *  @example\n\t *    // Basic initialisation\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable();\n\t *    } );\n\t *\n\t *  @example\n\t *    // Initialisation with configuration options - in this case, disable\n\t *    // pagination and sorting.\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable( {\n\t *        \"paginate\": false,\n\t *        \"sort\": false\n\t *      } );\n\t *    } );\n\t */\n\tvar DataTable = function ( options )\n\t{\n\t\t/**\n\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n\t\t * return the resulting jQuery object.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {object} jQuery object, filtered by the given selector.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Highlight every second row\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n\t\t *      oTable.fnFilter('');\n\t\t *    } );\n\t\t */\n\t\tthis.$ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).$( sSelector, oOpts );\n\t\t};\n\n\n\t\t/**\n\t\t * Almost identical to $ in operation, but in this case returns the data for the matched\n\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching\n\t\t * rows are found, the data returned is the original data array/object that was used to\n\t\t * create the row (or a generated array if from a DOM source).\n\t\t *\n\t\t * This method is often useful in-combination with $ where both functions are given the\n\t\t * same parameters and the array indexes will match identically.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n\t\t *    criterion (\"applied\") or all elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the\n\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n\t\t *    entry in the array.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the data from the first row in the table\n\t\t *      var data = oTable._('tr:first');\n\t\t *\n\t\t *      // Do something useful with the data\n\t\t *      alert( \"First cell is: \"+data[0] );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to 'Webkit' and get all data for\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\n\t\t *\n\t\t *      // Do something with the data\n\t\t *      alert( data.length+\" rows matched the search\" );\n\t\t *    } );\n\t\t */\n\t\tthis._ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();\n\t\t};\n\n\n\t\t/**\n\t\t * Create a DataTables Api instance, with the currently selected tables for\n\t\t * the Api's context.\n\t\t * @param {boolean} [traditional=false] Set the API instance's context to be\n\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n\t\t *   or if all tables captured in the jQuery object should be used.\n\t\t * @return {DataTables.Api}\n\t\t */\n\t\tthis.api = function ( traditional )\n\t\t{\n\t\t\treturn traditional ?\n\t\t\t\tnew _Api(\n\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )\n\t\t\t\t) :\n\t\t\t\tnew _Api( this );\n\t\t};\n\n\n\t\t/**\n\t\t * Add a single new row or multiple rows of data to the table. Please note\n\t\t * that this is suitable for client-side processing only - if you are using\n\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.\n\t\t *  @param {array|object} data The data to be added to the table. This can be:\n\t\t *    <ul>\n\t\t *      <li>1D array of data - add a single row with the data provided</li>\n\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>\n\t\t *      <li>object - data object when using <i>mData</i></li>\n\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n\t\t *    </ul>\n\t\t *  @param {bool} [redraw=true] redraw the table or not\n\t\t *  @returns {array} An array of integers, representing the list of indexes in\n\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n\t\t *    the table.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Global var for counter\n\t\t *    var giCount = 2;\n\t\t *\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example').dataTable();\n\t\t *    } );\n\t\t *\n\t\t *    function fnClickAddRow() {\n\t\t *      $('#example').dataTable().fnAddData( [\n\t\t *        giCount+\".1\",\n\t\t *        giCount+\".2\",\n\t\t *        giCount+\".3\",\n\t\t *        giCount+\".4\" ]\n\t\t *      );\n\t\t *\n\t\t *      giCount++;\n\t\t *    }\n\t\t */\n\t\tthis.fnAddData = function( data, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\n\t\t\t/* Check if we want to add multiple rows or not */\n\t\t\tvar rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n\t\t\t\tapi.rows.add( data ) :\n\t\t\t\tapi.row.add( data );\n\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\n\t\t\treturn rows.flatten().toArray();\n\t\t};\n\n\n\t\t/**\n\t\t * This function will make DataTables recalculate the column sizes, based on the data\n\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n\t\t * through the sWidth parameter). This can be useful when the width of the table's\n\t\t * parent element changes (for example a window resize).\n\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable( {\n\t\t *        \"sScrollY\": \"200px\",\n\t\t *        \"bPaginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      $(window).on('resize', function () {\n\t\t *        oTable.fnAdjustColumnSizing();\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnAdjustColumnSizing = function ( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).columns.adjust();\n\t\t\tvar settings = api.settings()[0];\n\t\t\tvar scroll = settings.oScroll;\n\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw( false );\n\t\t\t}\n\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n\t\t\t\t_fnScrollDraw( settings );\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * Quickly and simply clear a table\n\t\t *  @param {bool} [bRedraw=true] redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n\t\t *      oTable.fnClearTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClearTable = function( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).clear();\n\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * The exact opposite of 'opening' a row, this function will close any rows which\n\t\t * are currently 'open'.\n\t\t *  @param {node} nTr the table row to 'close'\n\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClose = function( nTr )\n\t\t{\n\t\t\tthis.api( true ).row( nTr ).child.hide();\n\t\t};\n\n\n\t\t/**\n\t\t * Remove a row for the table\n\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or\n\t\t *    the TR element you want to delete\n\t\t *  @param {function|null} [callBack] Callback function\n\t\t *  @param {bool} [redraw=true] Redraw the table or not\n\t\t *  @returns {array} The row that was deleted\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately remove the first row\n\t\t *      oTable.fnDeleteRow( 0 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnDeleteRow = function( target, callback, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar rows = api.rows( target );\n\t\t\tvar settings = rows.settings()[0];\n\t\t\tvar data = settings.aoData[ rows[0][0] ];\n\n\t\t\trows.remove();\n\n\t\t\tif ( callback ) {\n\t\t\t\tcallback.call( this, settings, data );\n\t\t\t}\n\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\n\t\t/**\n\t\t * Restore the table to it's original state in the DOM by removing all of DataTables\n\t\t * enhancements, alterations to the DOM structure of the table and event listeners.\n\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnDestroy();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDestroy = function ( remove )\n\t\t{\n\t\t\tthis.api( true ).destroy( remove );\n\t\t};\n\n\n\t\t/**\n\t\t * Redraw the table\n\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n\t\t *      oTable.fnDraw();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDraw = function( complete )\n\t\t{\n\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes\n\t\t\t// into account the new data, but can hold position.\n\t\t\tthis.api( true ).draw( complete );\n\t\t};\n\n\n\t\t/**\n\t\t * Filter the input based on data\n\t\t *  @param {string} sInput String to filter the table on\n\t\t *  @param {int|null} [iColumn] Column to limit filtering to\n\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not\n\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not\n\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sometime later - filter...\n\t\t *      oTable.fnFilter( 'test string' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n\t\t{\n\t\t\tvar api = this.api( true );\n\n\t\t\tif ( iColumn === null || iColumn === undefined ) {\n\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\n\t\t\tapi.draw();\n\t\t};\n\n\n\t\t/**\n\t\t * Get the data for the whole table, an individual row or an individual cell based on the\n\t\t * provided parameters.\n\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n\t\t *    a TR node then the data source for the whole row will be returned. If given as a\n\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the\n\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal\n\t\t *    data index for the row (see fnGetPosition) and the data for that row used.\n\t\t *  @param {int} [col] Optional column index that you want the data of.\n\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n\t\t *    returned. If mRow is defined, just data for that row, and is iCol is\n\t\t *    defined, only data for the designated cell is returned.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Row data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('tr').click( function () {\n\t\t *        var data = oTable.fnGetData( this );\n\t\t *        // ... do something with the array / object of data for the row\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Individual cell data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('td').click( function () {\n\t\t *        var sData = oTable.fnGetData( this );\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetData = function( src, col )\n\t\t{\n\t\t\tvar api = this.api( true );\n\n\t\t\tif ( src !== undefined ) {\n\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';\n\n\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?\n\t\t\t\t\tapi.cell( src, col ).data() :\n\t\t\t\t\tapi.row( src ).data() || null;\n\t\t\t}\n\n\t\t\treturn api.data().toArray();\n\t\t};\n\n\n\t\t/**\n\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will\n\t\t * typically want to use the '$' API method in preference to this as it is more\n\t\t * flexible.\n\t\t *  @param {int} [iRow] Optional row index for the TR element you want\n\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n\t\t *    in the table's body, or iRow is defined, just the TR element requested.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the nodes from the table\n\t\t *      var nNodes = oTable.fnGetNodes( );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetNodes = function( iRow )\n\t\t{\n\t\t\tvar api = this.api( true );\n\n\t\t\treturn iRow !== undefined ?\n\t\t\t\tapi.row( iRow ).node() :\n\t\t\t\tapi.rows().nodes().flatten().toArray();\n\t\t};\n\n\n\t\t/**\n\t\t * Get the array indexes of a particular cell from it's DOM element\n\t\t * and column index including hidden columns\n\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body\n\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n\t\t *    if given as a cell, an array of [row index, column index (visible),\n\t\t *    column index (all)] is given.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example tbody td').click( function () {\n\t\t *        // Get the position of the current data from the node\n\t\t *        var aPos = oTable.fnGetPosition( this );\n\t\t *\n\t\t *        // Get the data array for this row\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\n\t\t *\n\t\t *        // Update the data array and return the value\n\t\t *        aData[ aPos[1] ] = 'clicked';\n\t\t *        this.innerHTML = 'clicked';\n\t\t *      } );\n\t\t *\n\t\t *      // Init DataTables\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetPosition = function( node )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar nodeName = node.nodeName.toUpperCase();\n\n\t\t\tif ( nodeName == 'TR' ) {\n\t\t\t\treturn api.row( node ).index();\n\t\t\t}\n\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {\n\t\t\t\tvar cell = api.cell( node ).index();\n\n\t\t\t\treturn [\n\t\t\t\t\tcell.row,\n\t\t\t\t\tcell.columnVisible,\n\t\t\t\t\tcell.column\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\n\t\t/**\n\t\t * Check to see if a row is 'open' or not.\n\t\t *  @param {node} nTr the table row to check\n\t\t *  @returns {boolean} true if the row is currently open, false otherwise\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnIsOpen = function( nTr )\n\t\t{\n\t\t\treturn this.api( true ).row( nTr ).child.isShown();\n\t\t};\n\n\n\t\t/**\n\t\t * This function will place a new row directly after a row which is currently\n\t\t * on display on the page, with the HTML contents that is passed into the\n\t\t * function. This can be used, for example, to ask for confirmation that a\n\t\t * particular record should be deleted.\n\t\t *  @param {node} nTr The table row to 'open'\n\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row\n\t\t *  @param {string} sClass Class to give the new TD cell\n\t\t *  @returns {node} The row opened. Note that if the table row passed in as the\n\t\t *    first parameter, is not found in the table, this method will silently\n\t\t *    return.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnOpen = function( nTr, mHtml, sClass )\n\t\t{\n\t\t\treturn this.api( true )\n\t\t\t\t.row( nTr )\n\t\t\t\t.child( mHtml, sClass )\n\t\t\t\t.show()\n\t\t\t\t.child()[0];\n\t\t};\n\n\n\t\t/**\n\t\t * Change the pagination - provides the internal logic for pagination in a simple API\n\t\t * function. With this function you can have a DataTables table go to the next,\n\t\t * previous, first or last pages.\n\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n\t\t *    or page number to jump to (integer), note that page 0 is the first page.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnPageChange( 'next' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnPageChange = function ( mAction, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).page( mAction );\n\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw(false);\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * Show a particular column\n\t\t *  @param {int} iCol The column whose display should be changed\n\t\t *  @param {bool} bShow Show (true) or hide (false) the column\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Hide the second column after initialisation\n\t\t *      oTable.fnSetColumnVis( 1, false );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );\n\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.columns.adjust().draw();\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * Get the settings for a particular table for external manipulation\n\t\t *  @returns {object} DataTables settings object. See\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      var oSettings = oTable.fnSettings();\n\t\t *\n\t\t *      // Show an example parameter from the settings\n\t\t *      alert( oSettings._iDisplayStart );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSettings = function()\n\t\t{\n\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );\n\t\t};\n\n\n\t\t/**\n\t\t * Sort the table by a particular column\n\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the\n\t\t *    'display index' if you have hidden data entries\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort immediately with columns 0 and 1\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSort = function( aaSort )\n\t\t{\n\t\t\tthis.api( true ).order( aaSort ).draw();\n\t\t};\n\n\n\t\t/**\n\t\t * Attach a sort listener to an element for a given column\n\t\t *  @param {node} nNode the element to attach the sort listener to\n\t\t *  @param {int} iColumn the column that a click on this node will sort on\n\t\t *  @param {function} [fnCallback] callback function when sort is run\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )\n\t\t{\n\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );\n\t\t};\n\n\n\t\t/**\n\t\t * Update a table cell or row - this method will accept either a single value to\n\t\t * update the cell with, an array of values with one element for each column or\n\t\t * an object in the same format as the original data source. The function is\n\t\t * self-referencing in order to make the multi column updates easier.\n\t\t *  @param {object|array|string} mData Data to update the cell/row with\n\t\t *  @param {node|int} mRow TR element you want to update or the aoData index\n\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to\n\t\t *    update a whole row.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not\n\t\t *  @returns {int} 0 on success, 1 on error\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n\t\t *    } );\n\t\t */\n\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n\t\t{\n\t\t\tvar api = this.api( true );\n\n\t\t\tif ( iColumn === undefined || iColumn === null ) {\n\t\t\t\tapi.row( mRow ).data( mData );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.cell( mRow, iColumn ).data( mData );\n\t\t\t}\n\n\t\t\tif ( bAction === undefined || bAction ) {\n\t\t\t\tapi.columns.adjust();\n\t\t\t}\n\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\n\t\t/**\n\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order\n\t\t * to ensure compatibility.\n\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n\t\t *    formats \"X\" and \"X.Y\" are also acceptable.\n\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n\t\t *    version, or false if this version of DataTales is not suitable\n\t\t *  @method\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n\t\t *    } );\n\t\t */\n\t\tthis.fnVersionCheck = _ext.fnVersionCheck;\n\n\n\t\tvar _that = this;\n\t\tvar emptyInit = options === undefined;\n\t\tvar len = this.length;\n\n\t\tif ( emptyInit ) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.oApi = this.internal = _ext.internal;\n\n\t\t// Extend with old style plug-in API methods\n\t\tfor ( var fn in DataTable.ext.internal ) {\n\t\t\tif ( fn ) {\n\t\t\t\tthis[fn] = _fnExternApiFunc(fn);\n\t\t\t}\n\t\t}\n\n\t\tthis.each(function() {\n\t\t\t// For each initialisation we want to give it a clean initialisation\n\t\t\t// object that can be bashed around\n\t\t\tvar o = {};\n\t\t\tvar oInit = len > 1 ? // optimisation for single table case\n\t\t\t\t_fnExtend( o, options, true ) :\n\t\t\t\toptions;\n\n\t\t\t/*global oInit,_that,emptyInit*/\n\t\t\tvar i=0, iLen, j, jLen, k, kLen;\n\t\t\tvar sId = this.getAttribute( 'id' );\n\t\t\tvar bInitHandedOff = false;\n\t\t\tvar defaults = DataTable.defaults;\n\t\t\tvar $this = $(this);\n\n\n\t\t\t/* Sanity check */\n\t\t\tif ( this.nodeName.toLowerCase() != 'table' )\n\t\t\t{\n\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Backwards compatibility for the defaults */\n\t\t\t_fnCompatOpts( defaults );\n\t\t\t_fnCompatCols( defaults.column );\n\n\t\t\t/* Convert the camel-case defaults to Hungarian */\n\t\t\t_fnCamelToHungarian( defaults, defaults, true );\n\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );\n\n\t\t\t/* Setting up the initialisation object */\n\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\n\n\n\n\t\t\t/* Check to see if we are re-initialising a table */\n\t\t\tvar allSettings = DataTable.settings;\n\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tvar s = allSettings[i];\n\n\t\t\t\t/* Base check on table node */\n\t\t\t\tif ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\n\t\t\t\t{\n\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n\t\t\t\t\tif ( emptyInit || bRetrieve )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn s.oInstance;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( bDestroy )\n\t\t\t\t\t{\n\t\t\t\t\t\ts.oInstance.fnDestroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t\t */\n\t\t\t\tif ( s.sTableId == this.id )\n\t\t\t\t{\n\t\t\t\t\tallSettings.splice( i, 1 );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Ensure the table has an ID - required for accessibility */\n\t\t\tif ( sId === null || sId === \"\" )\n\t\t\t{\n\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n\t\t\t\tthis.id = sId;\n\t\t\t}\n\n\t\t\t/* Create the settings object for this table and set some of the default parameters */\n\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n\t\t\t\t\"sDestroyWidth\": $this[0].style.width,\n\t\t\t\t\"sInstance\":     sId,\n\t\t\t\t\"sTableId\":      sId\n\t\t\t} );\n\t\t\toSettings.nTable = this;\n\t\t\toSettings.oApi   = _that.internal;\n\t\t\toSettings.oInit  = oInit;\n\n\t\t\tallSettings.push( oSettings );\n\n\t\t\t// Need to add the instance after the instance after the settings object has been added\n\t\t\t// to the settings array, so we can self reference the table instance if more than one\n\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n\n\t\t\t// Backwards compatibility, before we apply all the defaults\n\t\t\t_fnCompatOpts( oInit );\n\n\t\t\tif ( oInit.oLanguage )\n\t\t\t{\n\t\t\t\t_fnLanguageCompat( oInit.oLanguage );\n\t\t\t}\n\n\t\t\t// If the length menu is given, but the init display length is not, use the length menu\n\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n\t\t\t{\n\t\t\t\toInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n\t\t\t}\n\n\t\t\t// Apply the defaults and init options to make a single init object will all\n\t\t\t// options defined from defaults and instance options.\n\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n\n\n\t\t\t// Map the initialisation options onto the settings object\n\t\t\t_fnMap( oSettings.oFeatures, oInit, [\n\t\t\t\t\"bPaginate\",\n\t\t\t\t\"bLengthChange\",\n\t\t\t\t\"bFilter\",\n\t\t\t\t\"bSort\",\n\t\t\t\t\"bSortMulti\",\n\t\t\t\t\"bInfo\",\n\t\t\t\t\"bProcessing\",\n\t\t\t\t\"bAutoWidth\",\n\t\t\t\t\"bSortClasses\",\n\t\t\t\t\"bServerSide\",\n\t\t\t\t\"bDeferRender\"\n\t\t\t] );\n\t\t\t_fnMap( oSettings, oInit, [\n\t\t\t\t\"asStripeClasses\",\n\t\t\t\t\"ajax\",\n\t\t\t\t\"fnServerData\",\n\t\t\t\t\"fnFormatNumber\",\n\t\t\t\t\"sServerMethod\",\n\t\t\t\t\"aaSorting\",\n\t\t\t\t\"aaSortingFixed\",\n\t\t\t\t\"aLengthMenu\",\n\t\t\t\t\"sPaginationType\",\n\t\t\t\t\"sAjaxSource\",\n\t\t\t\t\"sAjaxDataProp\",\n\t\t\t\t\"iStateDuration\",\n\t\t\t\t\"sDom\",\n\t\t\t\t\"bSortCellsTop\",\n\t\t\t\t\"iTabIndex\",\n\t\t\t\t\"fnStateLoadCallback\",\n\t\t\t\t\"fnStateSaveCallback\",\n\t\t\t\t\"renderer\",\n\t\t\t\t\"searchDelay\",\n\t\t\t\t\"rowId\",\n\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],\n\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],\n\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ],\n\t\t\t\t[ \"bJQueryUI\", \"bJUI\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oScroll, oInit, [\n\t\t\t\t[ \"sScrollX\", \"sX\" ],\n\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],\n\t\t\t\t[ \"sScrollY\", \"sY\" ],\n\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n\n\t\t\t/* Callback functions which are array driven */\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n\n\t\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n\n\t\t\t/* Browser support detection */\n\t\t\t_fnBrowserDetect( oSettings );\n\n\t\t\tvar oClasses = oSettings.oClasses;\n\n\t\t\t// @todo Remove in 1.11\n\t\t\tif ( oInit.bJQueryUI )\n\t\t\t{\n\t\t\t\t/* Use the JUI classes object for display. You could clone the oStdClasses object if\n\t\t\t\t * you want to have multiple tables with multiple independent classes\n\t\t\t\t */\n\t\t\t\t$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\n\n\t\t\t\tif ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\n\t\t\t\t{\n\t\t\t\t\t/* Set the DOM to use a layout suitable for jQuery UI's theming */\n\t\t\t\t\toSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\n\t\t\t\t}\n\n\t\t\t\tif ( ! oSettings.renderer ) {\n\t\t\t\t\toSettings.renderer = 'jqueryui';\n\t\t\t\t}\n\t\t\t\telse if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\n\t\t\t\t\toSettings.renderer.header = 'jqueryui';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n\t\t\t}\n\t\t\t$this.addClass( oClasses.sTable );\n\n\n\t\t\tif ( oSettings.iInitDisplayStart === undefined )\n\t\t\t{\n\t\t\t\t/* Display start point, taking into account the save saving */\n\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;\n\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;\n\t\t\t}\n\n\t\t\tif ( oInit.iDeferLoading !== null )\n\t\t\t{\n\t\t\t\toSettings.bDeferLoading = true;\n\t\t\t\tvar tmp = $.isArray( oInit.iDeferLoading );\n\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n\t\t\t}\n\n\t\t\t/* Language definitions */\n\t\t\tvar oLanguage = oSettings.oLanguage;\n\t\t\t$.extend( true, oLanguage, oInit.oLanguage );\n\n\t\t\tif ( oLanguage.sUrl )\n\t\t\t{\n\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n\t\t\t\t */\n\t\t\t\t$.ajax( {\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\turl: oLanguage.sUrl,\n\t\t\t\t\tsuccess: function ( json ) {\n\t\t\t\t\t\t_fnLanguageCompat( json );\n\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );\n\t\t\t\t\t\t$.extend( true, oLanguage, json );\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tbInitHandedOff = true;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Stripes\n\t\t\t */\n\t\t\tif ( oInit.asStripeClasses === null )\n\t\t\t{\n\t\t\t\toSettings.asStripeClasses =[\n\t\t\t\t\toClasses.sStripeOdd,\n\t\t\t\t\toClasses.sStripeEven\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t/* Remove row stripe classes if they are already on the table row */\n\t\t\tvar stripeClasses = oSettings.asStripeClasses;\n\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);\n\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {\n\t\t\t\treturn rowOne.hasClass(el);\n\t\t\t} ) ) !== -1 ) {\n\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );\n\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Columns\n\t\t\t * See if we should load columns automatically or use defined ones\n\t\t\t */\n\t\t\tvar anThs = [];\n\t\t\tvar aoColumnsInit;\n\t\t\tvar nThead = this.getElementsByTagName('thead');\n\t\t\tif ( nThead.length !== 0 )\n\t\t\t{\n\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );\n\t\t\t\tanThs = _fnGetUniqueThs( oSettings );\n\t\t\t}\n\n\t\t\t/* If not given a column array, generate one with nulls */\n\t\t\tif ( oInit.aoColumns === null )\n\t\t\t{\n\t\t\t\taoColumnsInit = [];\n\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\taoColumnsInit.push( null );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\taoColumnsInit = oInit.aoColumns;\n\t\t\t}\n\n\t\t\t/* Add the columns */\n\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );\n\t\t\t}\n\n\t\t\t/* Apply the column definitions */\n\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );\n\t\t\t} );\n\n\t\t\t/* HTML5 attribute detection - build an mData object automatically if the\n\t\t\t * attributes are found\n\t\t\t */\n\t\t\tif ( rowOne.length ) {\n\t\t\t\tvar a = function ( cell, name ) {\n\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;\n\t\t\t\t};\n\n\t\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {\n\t\t\t\t\tvar col = oSettings.aoColumns[i];\n\n\t\t\t\t\tif ( col.mData === i ) {\n\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );\n\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );\n\n\t\t\t\t\t\tif ( sort !== null || filter !== null ) {\n\t\t\t\t\t\t\tcol.mData = {\n\t\t\t\t\t\t\t\t_:      i+'.display',\n\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tvar features = oSettings.oFeatures;\n\t\t\tvar loadedInit = function () {\n\t\t\t\t/*\n\t\t\t\t * Sorting\n\t\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler\n\t\t\t\t */\n\n\t\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting\n\t\t\t\t// in case that has been altered, so the default sort reflects that option\n\t\t\t\tif ( oInit.aaSorting === undefined ) {\n\t\t\t\t\tvar sorting = oSettings.aaSorting;\n\t\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\n\t\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into\n\t\t\t\t * account, and also will apply sorting disabled classes if disabled\n\t\t\t\t */\n\t\t\t\t_fnSortingClasses( oSettings );\n\n\t\t\t\tif ( features.bSort ) {\n\t\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\t\tif ( oSettings.bSorted ) {\n\t\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );\n\t\t\t\t\t\t\tvar sortedColumns = {};\n\n\t\t\t\t\t\t\t$.each( aSort, function (i, val) {\n\t\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n\t\t\t\t\t\t\t_fnSortAria( oSettings );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n\t\t\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\t\t}\n\t\t\t\t}, 'sc' );\n\n\n\t\t\t\t/*\n\t\t\t\t * Final init\n\t\t\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t\t\t */\n\n\t\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\t\t\t\tvar captions = $this.children('caption').each( function () {\n\t\t\t\t\tthis._captionSide = $(this).css('caption-side');\n\t\t\t\t} );\n\n\t\t\t\tvar thead = $this.children('thead');\n\t\t\t\tif ( thead.length === 0 ) {\n\t\t\t\t\tthead = $('<thead/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\toSettings.nTHead = thead[0];\n\n\t\t\t\tvar tbody = $this.children('tbody');\n\t\t\t\tif ( tbody.length === 0 ) {\n\t\t\t\t\ttbody = $('<tbody/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\toSettings.nTBody = tbody[0];\n\n\t\t\t\tvar tfoot = $this.children('tfoot');\n\t\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\n\t\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create\n\t\t\t\t\t// a tfoot element for the caption element to be appended to\n\t\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);\n\t\t\t\t}\n\n\t\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n\t\t\t\t\t$this.addClass( oClasses.sNoFooter );\n\t\t\t\t}\n\t\t\t\telse if ( tfoot.length > 0 ) {\n\t\t\t\t\toSettings.nTFoot = tfoot[0];\n\t\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n\t\t\t\t}\n\n\t\t\t\t/* Check if there is data passing into the constructor */\n\t\t\t\tif ( oInit.aaData ) {\n\t\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\n\t\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax\n\t\t\t\t\t * source since there is no point in reading the DOM data if we are then going\n\t\t\t\t\t * to replace it with Ajax data\n\t\t\t\t\t */\n\t\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n\t\t\t\t}\n\n\t\t\t\t/* Copy the data index array */\n\t\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\n\t\t\t\t/* Initialisation complete - table can be drawn */\n\t\t\t\toSettings.bInitialised = true;\n\n\t\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the\n\t\t\t\t * language processor)\n\t\t\t\t */\n\t\t\t\tif ( bInitHandedOff === false ) {\n\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/* Must be done after everything which can be overridden by the state saving! */\n\t\t\tif ( oInit.bStateSave )\n\t\t\t{\n\t\t\t\tfeatures.bStateSave = true;\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n\t\t\t\t_fnLoadState( oSettings, oInit, loadedInit );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tloadedInit();\n\t\t\t}\n\n\t\t} );\n\t\t_that = null;\n\t\treturn this;\n\t};\n\n\n\t/*\n\t * It is useful to have variables which are scoped locally so only the\n\t * DataTables functions can access them and they don't leak into global space.\n\t * At the same time these functions are often useful over multiple files in the\n\t * core and API, so we list, or at least document, all variables which are used\n\t * by DataTables as private variables here. This also ensures that there is no\n\t * clashing of variable names and that they can easily referenced for reuse.\n\t */\n\n\n\t// Defined else where\n\t//  _selector_run\n\t//  _selector_opts\n\t//  _selector_first\n\t//  _selector_row_indexes\n\n\tvar _ext; // DataTable.ext\n\tvar _Api; // DataTable.Api\n\tvar _api_register; // DataTable.Api.register\n\tvar _api_registerPlural; // DataTable.Api.registerPlural\n\n\tvar _re_dic = {};\n\tvar _re_new_lines = /[\\r\\n]/g;\n\tvar _re_html = /<.*?>/g;\n\n\t// This is not strict ISO8601 - Date.parse() is quite lax, although\n\t// implementations differ between browsers.\n\tvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\n\n\t// Escape regular expression special characters\n\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\n\t// http://en.wikipedia.org/wiki/Foreign_exchange_market\n\t// - \\u20BD - Russian ruble.\n\t// - \\u20a9 - South Korean Won\n\t// - \\u20BA - Turkish Lira\n\t// - \\u20B9 - Indian Rupee\n\t// - R - Brazil (R$) and South Africa\n\t// - fr - Swiss Franc\n\t// - kr - Swedish krona, Norwegian krone and Danish krone\n\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n\t//   standards as thousands separators.\n\tvar _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\n\n\n\tvar _empty = function ( d ) {\n\t\treturn !d || d === true || d === '-' ? true : false;\n\t};\n\n\n\tvar _intVal = function ( s ) {\n\t\tvar integer = parseInt( s, 10 );\n\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;\n\t};\n\n\t// Convert from a formatted number with characters other than `.` as the\n\t// decimal place, to a Javascript number\n\tvar _numToDecimal = function ( num, decimalPoint ) {\n\t\t// Cache created regular expressions for speed as this function is called often\n\t\tif ( ! _re_dic[ decimalPoint ] ) {\n\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n\t\t}\n\t\treturn typeof num === 'string' && decimalPoint !== '.' ?\n\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\n\t\t\tnum;\n\t};\n\n\n\tvar _isNumber = function ( d, decimalPoint, formatted ) {\n\t\tvar strType = typeof d === 'string';\n\n\t\t// If empty return immediately so there must be a number if it is a\n\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected\n\t\t// as a formatted number for currency\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( decimalPoint && strType ) {\n\t\t\td = _numToDecimal( d, decimalPoint );\n\t\t}\n\n\t\tif ( formatted && strType ) {\n\t\t\td = d.replace( _re_formatted_numeric, '' );\n\t\t}\n\n\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );\n\t};\n\n\n\t// A string without HTML in it can be considered to be HTML still\n\tvar _isHtml = function ( d ) {\n\t\treturn _empty( d ) || typeof d === 'string';\n\t};\n\n\n\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar html = _isHtml( d );\n\t\treturn ! html ?\n\t\t\tnull :\n\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n\t\t\t\ttrue :\n\t\t\t\tnull;\n\t};\n\n\n\tvar _pluck = function ( a, prop, prop2 ) {\n\t\tvar out = [];\n\t\tvar i=0, ien=a.length;\n\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] && a[i][ prop ] ) {\n\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] ) {\n\t\t\t\t\tout.push( a[i][ prop ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t};\n\n\n\t// Basically the same as _pluck, but rather than looping over `a` we use `order`\n\t// as the indexes to pick from `a`\n\tvar _pluck_order = function ( a, order, prop, prop2 )\n\t{\n\t\tvar out = [];\n\t\tvar i=0, ien=order.length;\n\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[ order[i] ][ prop ] ) {\n\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tout.push( a[ order[i] ][ prop ] );\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t};\n\n\n\tvar _range = function ( len, start )\n\t{\n\t\tvar out = [];\n\t\tvar end;\n\n\t\tif ( start === undefined ) {\n\t\t\tstart = 0;\n\t\t\tend = len;\n\t\t}\n\t\telse {\n\t\t\tend = start;\n\t\t\tstart = len;\n\t\t}\n\n\t\tfor ( var i=start ; i<end ; i++ ) {\n\t\t\tout.push( i );\n\t\t}\n\n\t\treturn out;\n\t};\n\n\n\tvar _removeEmpty = function ( a )\n\t{\n\t\tvar out = [];\n\n\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {\n\t\t\tif ( a[i] ) { // careful - will remove all falsy values!\n\t\t\t\tout.push( a[i] );\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t};\n\n\n\tvar _stripHtml = function ( d ) {\n\t\treturn d.replace( _re_html, '' );\n\t};\n\n\n\t/**\n\t * Find the unique elements in a source array.\n\t *\n\t * @param  {array} src Source array\n\t * @return {array} Array of unique items\n\t * @ignore\n\t */\n\tvar _unique = function ( src )\n\t{\n\t\t// A faster unique method is to use object keys to identify used values,\n\t\t// but this doesn't work with arrays or objects, which we must also\n\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more\n\t\t// information.\n\t\tvar\n\t\t\tout = [],\n\t\t\tval,\n\t\t\ti, ien=src.length,\n\t\t\tj, k=0;\n\n\t\tagain: for ( i=0 ; i<ien ; i++ ) {\n\t\t\tval = src[i];\n\n\t\t\tfor ( j=0 ; j<k ; j++ ) {\n\t\t\t\tif ( out[j] === val ) {\n\t\t\t\t\tcontinue again;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.push( val );\n\t\t\tk++;\n\t\t}\n\n\t\treturn out;\n\t};\n\n\n\t/**\n\t * DataTables utility methods\n\t *\n\t * This namespace provides helper methods that DataTables uses internally to\n\t * create a DataTable, but which are not exclusively used only for DataTables.\n\t * These methods can be used by extension authors to save the duplication of\n\t * code.\n\t *\n\t *  @namespace\n\t */\n\tDataTable.util = {\n\t\t/**\n\t\t * Throttle the calls to a function. Arguments and context are maintained\n\t\t * for the throttled function.\n\t\t *\n\t\t * @param {function} fn Function to be called\n\t\t * @param {integer} freq Call frequency in mS\n\t\t * @return {function} Wrapped function\n\t\t */\n\t\tthrottle: function ( fn, freq ) {\n\t\t\tvar\n\t\t\t\tfrequency = freq !== undefined ? freq : 200,\n\t\t\t\tlast,\n\t\t\t\ttimer;\n\n\t\t\treturn function () {\n\t\t\t\tvar\n\t\t\t\t\tthat = this,\n\t\t\t\t\tnow  = +new Date(),\n\t\t\t\t\targs = arguments;\n\n\t\t\t\tif ( last && now < last + frequency ) {\n\t\t\t\t\tclearTimeout( timer );\n\n\t\t\t\t\ttimer = setTimeout( function () {\n\t\t\t\t\t\tlast = undefined;\n\t\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t\t}, frequency );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlast = now;\n\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\n\t\t/**\n\t\t * Escape a string such that it can be used in a regular expression\n\t\t *\n\t\t *  @param {string} val string to escape\n\t\t *  @returns {string} escaped string\n\t\t */\n\t\tescapeRegex: function ( val ) {\n\t\t\treturn val.replace( _re_escape_regex, '\\\\$1' );\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Create a mapping object that allows camel case parameters to be looked up\n\t * for their Hungarian counterparts. The mapping is stored in a private\n\t * parameter called `_hungarianMap` which can be accessed on the source object.\n\t *  @param {object} o\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnHungarianMap ( o )\n\t{\n\t\tvar\n\t\t\thungarian = 'a aa ai ao as b fn i m o s ',\n\t\t\tmatch,\n\t\t\tnewKey,\n\t\t\tmap = {};\n\n\t\t$.each( o, function (key, val) {\n\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);\n\n\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n\t\t\t{\n\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );\n\t\t\t\tmap[ newKey ] = key;\n\n\t\t\t\tif ( match[1] === 'o' )\n\t\t\t\t{\n\t\t\t\t\t_fnHungarianMap( o[key] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\to._hungarianMap = map;\n\t}\n\n\n\t/**\n\t * Convert from camel case parameters to Hungarian, based on a Hungarian map\n\t * created by _fnHungarianMap.\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCamelToHungarian ( src, user, force )\n\t{\n\t\tif ( ! src._hungarianMap ) {\n\t\t\t_fnHungarianMap( src );\n\t\t}\n\n\t\tvar hungarianKey;\n\n\t\t$.each( user, function (key, val) {\n\t\t\thungarianKey = src._hungarianMap[ key ];\n\n\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n\t\t\t{\n\t\t\t\t// For objects, we need to buzz down into the object to copy parameters\n\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )\n\t\t\t\t{\n\t\t\t\t\t// Copy the camelCase options over to the hungarian\n\t\t\t\t\tif ( ! user[ hungarianKey ] ) {\n\t\t\t\t\t\tuser[ hungarianKey ] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );\n\n\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tuser[hungarianKey] = user[ key ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\n\t/**\n\t * Language compatibility - when certain options are given, and others aren't, we\n\t * need to duplicate the values over, in order to provide backwards compatibility\n\t * with older language files.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLanguageCompat( lang )\n\t{\n\t\tvar defaults = DataTable.defaults.oLanguage;\n\t\tvar zeroRecords = lang.sZeroRecords;\n\n\t\t/* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n\t\t * sZeroRecords - assuming that is given.\n\t\t */\n\t\tif ( ! lang.sEmptyTable && zeroRecords &&\n\t\t\tdefaults.sEmptyTable === \"No data available in table\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n\t\t}\n\n\t\t/* Likewise with loading records */\n\t\tif ( ! lang.sLoadingRecords && zeroRecords &&\n\t\t\tdefaults.sLoadingRecords === \"Loading...\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n\t\t}\n\n\t\t// Old parameter name of the thousands separator mapped onto the new\n\t\tif ( lang.sInfoThousands ) {\n\t\t\tlang.sThousands = lang.sInfoThousands;\n\t\t}\n\n\t\tvar decimal = lang.sDecimal;\n\t\tif ( decimal ) {\n\t\t\t_addNumericSort( decimal );\n\t\t}\n\t}\n\n\n\t/**\n\t * Map one parameter onto another\n\t *  @param {object} o Object to map\n\t *  @param {*} knew The new parameter name\n\t *  @param {*} old The old parameter name\n\t */\n\tvar _fnCompatMap = function ( o, knew, old ) {\n\t\tif ( o[ knew ] !== undefined ) {\n\t\t\to[ old ] = o[ knew ];\n\t\t}\n\t};\n\n\n\t/**\n\t * Provide backwards compatibility for the main DT options. Note that the new\n\t * options are mapped onto the old parameters, so this is an external interface\n\t * change only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatOpts ( init )\n\t{\n\t\t_fnCompatMap( init, 'ordering',      'bSort' );\n\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n\t\t_fnCompatMap( init, 'order',         'aaSorting' );\n\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n\t\t_fnCompatMap( init, 'paging',        'bPaginate' );\n\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );\n\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n\t\t_fnCompatMap( init, 'searching',     'bFilter' );\n\n\t\t// Boolean initialisation of x-scrolling\n\t\tif ( typeof init.sScrollX === 'boolean' ) {\n\t\t\tinit.sScrollX = init.sScrollX ? '100%' : '';\n\t\t}\n\t\tif ( typeof init.scrollX === 'boolean' ) {\n\t\t\tinit.scrollX = init.scrollX ? '100%' : '';\n\t\t}\n\n\t\t// Column search objects are in an array, so it needs to be converted\n\t\t// element by element\n\t\tvar searchCols = init.aoSearchCols;\n\n\t\tif ( searchCols ) {\n\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n\t\t\t\tif ( searchCols[i] ) {\n\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Provide backwards compatibility for column options. Note that the new options\n\t * are mapped onto the old parameters, so this is an external interface change\n\t * only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatCols ( init )\n\t{\n\t\t_fnCompatMap( init, 'orderable',     'bSortable' );\n\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );\n\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );\n\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );\n\n\t\t// orderData can be given as an integer\n\t\tvar dataSort = init.aDataSort;\n\t\tif ( dataSort && ! $.isArray( dataSort ) ) {\n\t\t\tinit.aDataSort = [ dataSort ];\n\t\t}\n\t}\n\n\n\t/**\n\t * Browser feature detection for capabilities, quirks\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBrowserDetect( settings )\n\t{\n\t\t// We don't need to do this every time DataTables is constructed, the values\n\t\t// calculated are specific to the browser and OS configuration which we\n\t\t// don't expect to change between initialisations\n\t\tif ( ! DataTable.__browser ) {\n\t\t\tvar browser = {};\n\t\t\tDataTable.__browser = browser;\n\n\t\t\t// Scrolling feature / quirks detection\n\t\t\tvar n = $('<div/>')\n\t\t\t\t.css( {\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: $(window).scrollLeft()*-1, // allow for scrolling\n\t\t\t\t\theight: 1,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t} )\n\t\t\t\t.append(\n\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\ttop: 1,\n\t\t\t\t\t\t\tleft: 1,\n\t\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\t\toverflow: 'scroll'\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\t\theight: 10\n\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.appendTo( 'body' );\n\n\t\t\tvar outer = n.children();\n\t\t\tvar inner = outer.children();\n\n\t\t\t// Numbers below, in order, are:\n\t\t\t// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n\t\t\t//\n\t\t\t// IE6 XP:                           100 100 100  83\n\t\t\t// IE7 Vista:                        100 100 100  83\n\t\t\t// IE 8+ Windows:                     83  83 100  83\n\t\t\t// Evergreen Windows:                 83  83 100  83\n\t\t\t// Evergreen Mac with scrollbars:     85  85 100  85\n\t\t\t// Evergreen Mac without scrollbars: 100 100 100 100\n\n\t\t\t// Get scrollbar width\n\t\t\tbrowser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n\n\t\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to\n\t\t\t// include the width of the scrollbar, while other browsers ensure the inner\n\t\t\t// element is contained without forcing scrolling\n\t\t\tbrowser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n\n\t\t\t// In rtl text layout, some browsers (most, but not all) will place the\n\t\t\t// scrollbar on the left, rather than the right.\n\t\t\tbrowser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n\n\t\t\t// IE8- don't provide height and width for getBoundingClientRect\n\t\t\tbrowser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n\n\t\t\tn.remove();\n\t\t}\n\n\t\t$.extend( settings.oBrowser, DataTable.__browser );\n\t\tsettings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n\t}\n\n\n\t/**\n\t * Array.prototype reduce[Right] method, used for browsers which don't support\n\t * JS 1.6. Done this way to reduce code size, since we iterate either way\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReduce ( that, fn, init, start, end, inc )\n\t{\n\t\tvar\n\t\t\ti = start,\n\t\t\tvalue,\n\t\t\tisSet = false;\n\n\t\tif ( init !== undefined ) {\n\t\t\tvalue = init;\n\t\t\tisSet = true;\n\t\t}\n\n\t\twhile ( i !== end ) {\n\t\t\tif ( ! that.hasOwnProperty(i) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvalue = isSet ?\n\t\t\t\tfn( value, that[i], i, that ) :\n\t\t\t\tthat[i];\n\n\t\t\tisSet = true;\n\t\t\ti += inc;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Add a column to the list used for the table with default values\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nTh The th element for this column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddColumn( oSettings, nTh )\n\t{\n\t\t// Add column to aoColumns array\n\t\tvar oDefaults = DataTable.defaults.column;\n\t\tvar iCol = oSettings.aoColumns.length;\n\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),\n\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n\t\t\tidx: iCol\n\t\t} );\n\t\toSettings.aoColumns.push( oCol );\n\n\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`\n\t\t// passed into extend can be undefined. This allows the user to give a default\n\t\t// with only some of the parameters defined, and also not give a default\n\t\tvar searchCols = oSettings.aoPreSearchCols;\n\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\n\n\t\t// Use the default column options function to initialise classes etc\n\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );\n\t}\n\n\n\t/**\n\t * Apply options for a column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iCol column index to consider\n\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnOptions( oSettings, iCol, oOptions )\n\t{\n\t\tvar oCol = oSettings.aoColumns[ iCol ];\n\t\tvar oClasses = oSettings.oClasses;\n\t\tvar th = $(oCol.nTh);\n\n\t\t// Try to get width information from the DOM. We can't get it from CSS\n\t\t// as we'd need to parse the CSS stylesheet. `width` option can override\n\t\tif ( ! oCol.sWidthOrig ) {\n\t\t\t// Width attribute\n\t\t\toCol.sWidthOrig = th.attr('width') || null;\n\n\t\t\t// Style attribute\n\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\t\t\tif ( t ) {\n\t\t\t\toCol.sWidthOrig = t[1];\n\t\t\t}\n\t\t}\n\n\t\t/* User specified column options */\n\t\tif ( oOptions !== undefined && oOptions !== null )\n\t\t{\n\t\t\t// Backwards compatibility\n\t\t\t_fnCompatCols( oOptions );\n\n\t\t\t// Map camel case parameters to their Hungarian counterparts\n\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions );\n\n\t\t\t/* Backwards compatibility for mDataProp */\n\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )\n\t\t\t{\n\t\t\t\toOptions.mData = oOptions.mDataProp;\n\t\t\t}\n\n\t\t\tif ( oOptions.sType )\n\t\t\t{\n\t\t\t\toCol._sManualType = oOptions.sType;\n\t\t\t}\n\n\t\t\t// `class` is a reserved word in Javascript, so we need to provide\n\t\t\t// the ability to use a valid name for the camel case input\n\t\t\tif ( oOptions.className && ! oOptions.sClass )\n\t\t\t{\n\t\t\t\toOptions.sClass = oOptions.className;\n\t\t\t}\n\n\t\t\t$.extend( oCol, oOptions );\n\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n\n\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t\t * priority if defined\n\t\t\t */\n\t\t\tif ( oOptions.iDataSort !== undefined )\n\t\t\t{\n\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];\n\t\t\t}\n\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );\n\t\t}\n\n\t\t/* Cache the data get and set functions for speed */\n\t\tvar mDataSrc = oCol.mData;\n\t\tvar mData = _fnGetObjectDataFn( mDataSrc );\n\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n\n\t\tvar attrTest = function( src ) {\n\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;\n\t\t};\n\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n\t\t);\n\t\toCol._setter = null;\n\n\t\toCol.fnGetData = function (rowData, type, meta) {\n\t\t\tvar innerData = mData( rowData, type, undefined, meta );\n\n\t\t\treturn mRender && type ?\n\t\t\t\tmRender( innerData, type, rowData, meta ) :\n\t\t\t\tinnerData;\n\t\t};\n\t\toCol.fnSetData = function ( rowData, val, meta ) {\n\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n\t\t};\n\n\t\t// Indicate if DataTables should read DOM data as an object or array\n\t\t// Used in _fnGetRowElements\n\t\tif ( typeof mDataSrc !== 'number' ) {\n\t\t\toSettings._rowReadObject = true;\n\t\t}\n\n\t\t/* Feature sorting overrides column specific when off */\n\t\tif ( !oSettings.oFeatures.bSort )\n\t\t{\n\t\t\toCol.bSortable = false;\n\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n\t\t}\n\n\t\t/* Check that the class assignment is correct for sorting */\n\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableNone;\n\t\t\toCol.sSortingClassJUI = \"\";\n\t\t}\n\t\telse if ( bAsc && !bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableAsc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n\t\t}\n\t\telse if ( !bAsc && bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableDesc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortable;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;\n\t\t}\n\t}\n\n\n\t/**\n\t * Adjust the table column widths for new data. Note: you would probably want to\n\t * do a redraw after calling this function!\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAdjustColumnSizing ( settings )\n\t{\n\t\t/* Not interested in doing column width calculation if auto-width is disabled */\n\t\tif ( settings.oFeatures.bAutoWidth !== false )\n\t\t{\n\t\t\tvar columns = settings.aoColumns;\n\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;\n\t\t\t}\n\t\t}\n\n\t\tvar scroll = settings.oScroll;\n\t\tif ( scroll.sY !== '' || scroll.sX !== '')\n\t\t{\n\t\t\t_fnScrollDraw( settings );\n\t\t}\n\n\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );\n\t}\n\n\n\t/**\n\t * Covert the index of a visible column to the index in the data array (take account\n\t * of hidden columns)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iMatch Visible column index to lookup\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\n\t\treturn typeof aiVis[iMatch] === 'number' ?\n\t\t\taiVis[iMatch] :\n\t\t\tnull;\n\t}\n\n\n\t/**\n\t * Covert the index of an index in the data array and convert it to the visible\n\t *   column index (take account of hidden columns)\n\t *  @param {int} iMatch Column index to lookup\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnIndexToVisible( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\tvar iPos = $.inArray( iMatch, aiVis );\n\n\t\treturn iPos !== -1 ? iPos : null;\n\t}\n\n\n\t/**\n\t * Get the number of visible columns\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the number of visible columns\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisbleColumns( oSettings )\n\t{\n\t\tvar vis = 0;\n\n\t\t// No reduce in IE8, use a loop for now\n\t\t$.each( oSettings.aoColumns, function ( i, col ) {\n\t\t\tif ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n\t\t\t\tvis++;\n\t\t\t}\n\t\t} );\n\n\t\treturn vis;\n\t}\n\n\n\t/**\n\t * Get an array of column indexes that match a given property\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sParam Parameter in aoColumns to look for - typically\n\t *    bVisible or bSearchable\n\t *  @returns {array} Array of indexes with matched properties\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetColumns( oSettings, sParam )\n\t{\n\t\tvar a = [];\n\n\t\t$.map( oSettings.aoColumns, function(val, i) {\n\t\t\tif ( val[sParam] ) {\n\t\t\t\ta.push( i );\n\t\t\t}\n\t\t} );\n\n\t\treturn a;\n\t}\n\n\n\t/**\n\t * Calculate the 'type' of a column\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnTypes ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar data = settings.aoData;\n\t\tvar types = DataTable.ext.type.detect;\n\t\tvar i, ien, j, jen, k, ken;\n\t\tvar col, cell, detectedType, cache;\n\n\t\t// For each column, spin over the\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcol = columns[i];\n\t\t\tcache = [];\n\n\t\t\tif ( ! col.sType && col._sManualType ) {\n\t\t\t\tcol.sType = col._sManualType;\n\t\t\t}\n\t\t\telse if ( ! col.sType ) {\n\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {\n\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {\n\t\t\t\t\t\t// Use a cache array so we only need to get the type data\n\t\t\t\t\t\t// from the formatter once (when using multiple detectors)\n\t\t\t\t\t\tif ( cache[k] === undefined ) {\n\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );\n\n\t\t\t\t\t\t// If null, then this type can't apply to this column, so\n\t\t\t\t\t\t// rather than testing all cells, break out. There is an\n\t\t\t\t\t\t// exception for the last type which is `html`. We need to\n\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML\n\t\t\t\t\t\t// types\n\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only a single match is needed for html type since it is\n\t\t\t\t\t\t// bottom of the pile and very similar to string\n\t\t\t\t\t\tif ( detectedType === 'html' ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Type is valid for all data points in the column - use this\n\t\t\t\t\t// type\n\t\t\t\t\tif ( detectedType ) {\n\t\t\t\t\t\tcol.sType = detectedType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fall back - if no type was detected, always use string\n\t\t\t\tif ( ! col.sType ) {\n\t\t\t\t\tcol.sType = 'string';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Take the column definitions and static columns arrays and calculate how\n\t * they relate to column indexes. The callback function will then apply the\n\t * definition found for a column to a suitable configuration object.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n\t *  @param {array} aoCols The aoColumns array that defines columns individually\n\t *  @param {function} fn Callback function - takes two parameters, the calculated\n\t *    column index and the definition for that column.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, def;\n\t\tvar columns = oSettings.aoColumns;\n\n\t\t// Column definitions with aTargets\n\t\tif ( aoColDefs )\n\t\t{\n\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */\n\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n\t\t\t{\n\t\t\t\tdef = aoColDefs[i];\n\n\t\t\t\t/* Each definition can target multiple columns, as it is an array */\n\t\t\t\tvar aTargets = def.targets !== undefined ?\n\t\t\t\t\tdef.targets :\n\t\t\t\t\tdef.aTargets;\n\n\t\t\t\tif ( ! $.isArray( aTargets ) )\n\t\t\t\t{\n\t\t\t\t\taTargets = [ aTargets ];\n\t\t\t\t}\n\n\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n\t\t\t\t{\n\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Add columns that we don't yet know about */\n\t\t\t\t\t\twhile( columns.length <= aTargets[j] )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_fnAddColumn( oSettings );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* Integer, basic index */\n\t\t\t\t\t\tfn( aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Negative integer, right to left column counting */\n\t\t\t\t\t\tfn( columns.length+aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Class name matching on TH element */\n\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||\n\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfn( k, def );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Statically defined columns array\n\t\tif ( aoCols )\n\t\t{\n\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tfn( i, aoCols[i] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add a data array to the table, creating DOM node etc. This is the parallel to\n\t * _fnGatherData, but for adding rows from a Javascript source, rather than a\n\t * DOM source.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aData data array to be added\n\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )\n\t{\n\t\t/* Create the object for storing information about this new row */\n\t\tvar iRow = oSettings.aoData.length;\n\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {\n\t\t\tsrc: nTr ? 'dom' : 'data',\n\t\t\tidx: iRow\n\t\t} );\n\n\t\toData._aData = aDataIn;\n\t\toSettings.aoData.push( oData );\n\n\t\t/* Create the cells */\n\t\tvar nTd, sThisType;\n\t\tvar columns = oSettings.aoColumns;\n\n\t\t// Invalidate the column types as the new data needs to be revalidated\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tcolumns[i].sType = null;\n\t\t}\n\n\t\t/* Add to the display array */\n\t\toSettings.aiDisplayMaster.push( iRow );\n\n\t\tvar id = oSettings.rowIdFn( aDataIn );\n\t\tif ( id !== undefined ) {\n\t\t\toSettings.aIds[ id ] = oData;\n\t\t}\n\n\t\t/* Create the DOM information, or register it if already present */\n\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )\n\t\t{\n\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );\n\t\t}\n\n\t\treturn iRow;\n\t}\n\n\n\t/**\n\t * Add one or more TR elements to the table. Generally we'd expect to\n\t * use this for reading data from a DOM sourced table, but it could be\n\t * used for an TR element. Note that if a TR is given, it is used (i.e.\n\t * it is not cloned).\n\t *  @param {object} settings dataTables settings object\n\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n\t *  @returns {array} Array of indexes for the added rows\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddTr( settings, trs )\n\t{\n\t\tvar row;\n\n\t\t// Allow an individual node to be passed in\n\t\tif ( ! (trs instanceof $) ) {\n\t\t\ttrs = $(trs);\n\t\t}\n\n\t\treturn trs.map( function (i, el) {\n\t\t\trow = _fnGetRowElements( settings, el );\n\t\t\treturn _fnAddData( settings, row.data, el, row.cells );\n\t\t} );\n\t}\n\n\n\t/**\n\t * Take a TR element and convert it to an index in aoData\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} n the TR element to find\n\t *  @returns {int} index if the node is found, null if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToDataIndex( oSettings, n )\n\t{\n\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n\t}\n\n\n\t/**\n\t * Take a TD element and convert it into a column data index (not the visible index)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow The row number the TD/TH can be found in\n\t *  @param {node} n The TD/TH element to find\n\t *  @returns {int} index if the node is found, -1 if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )\n\t{\n\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );\n\t}\n\n\n\t/**\n\t * Get the data for a given cell from the internal cache, taking into account data mapping\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n\t *  @returns {*} Cell data\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )\n\t{\n\t\tvar draw           = settings.iDraw;\n\t\tvar col            = settings.aoColumns[colIdx];\n\t\tvar rowData        = settings.aoData[rowIdx]._aData;\n\t\tvar defaultContent = col.sDefaultContent;\n\t\tvar cellData       = col.fnGetData( rowData, type, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t} );\n\n\t\tif ( cellData === undefined ) {\n\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {\n\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+\n\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n\t\t\t\t\t\" for row \"+rowIdx+\", column \"+colIdx, 4 );\n\t\t\t\tsettings.iDrawError = draw;\n\t\t\t}\n\t\t\treturn defaultContent;\n\t\t}\n\n\t\t// When the data source is null and a specific data type is requested (i.e.\n\t\t// not the original data), we can use default column data\n\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n\t\t\tcellData = defaultContent;\n\t\t}\n\t\telse if ( typeof cellData === 'function' ) {\n\t\t\t// If the data source is a function, then we run it and use the return,\n\t\t\t// executing in the scope of the data object (for instances)\n\t\t\treturn cellData.call( rowData );\n\t\t}\n\n\t\tif ( cellData === null && type == 'display' ) {\n\t\t\treturn '';\n\t\t}\n\t\treturn cellData;\n\t}\n\n\n\t/**\n\t * Set the value for a specific cell, into the internal data cache\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {*} val Value to set\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )\n\t{\n\t\tvar col     = settings.aoColumns[colIdx];\n\t\tvar rowData = settings.aoData[rowIdx]._aData;\n\n\t\tcol.fnSetData( rowData, val, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t}  );\n\t}\n\n\n\t// Private variable that is used to match action syntax in the data property object\n\tvar __reArray = /\\[.*?\\]$/;\n\tvar __reFn = /\\(\\)$/;\n\n\t/**\n\t * Split string on periods, taking into account escaped periods\n\t * @param  {string} str String to split\n\t * @return {array} Split string\n\t */\n\tfunction _fnSplitObjNotation( str )\n\t{\n\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n\t\t\treturn s.replace(/\\\\\\./g, '.');\n\t\t} );\n\t}\n\n\n\t/**\n\t * Return a function that can be used to get data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data get function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Build an object of get functions, and wrap them in a single call */\n\t\t\tvar o = {};\n\t\t\t$.each( mSource, function (key, val) {\n\t\t\t\tif ( val ) {\n\t\t\t\t\to[key] = _fnGetObjectDataFn( val );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\tvar t = o[type] || o._;\n\t\t\t\treturn t !== undefined ?\n\t\t\t\t\tt(data, type, row, meta) :\n\t\t\t\t\tdata;\n\t\t\t};\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Give an empty string for rendering / sorting etc */\n\t\t\treturn function (data) { // type, row and meta also passed, but not used\n\t\t\t\treturn data;\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\treturn mSource( data, type, row, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* If there is a . in the source string then the data source is in a\n\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t * be used if defined, rather than throwing an error\n\t\t\t */\n\t\t\tvar fetchData = function (data, type, src) {\n\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;\n\n\t\t\t\tif ( src !== \"\" )\n\t\t\t\t{\n\t\t\t\t\tvar a = _fnSplitObjNotation( src );\n\n\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Check if we are dealing with special notation\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\n\t\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Array notation\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\n\t\t\t\t\t\t\t// Condition allows simply [] to be passed in\n\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {\n\t\t\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout = [];\n\n\t\t\t\t\t\t\t// Get the remainder of the nested object to get\n\t\t\t\t\t\t\ta.splice( 0, i+1 );\n\t\t\t\t\t\t\tinnerSrc = a.join('.');\n\n\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested\n\t\t\t\t\t\t\tif ( $.isArray( data ) ) {\n\t\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n\t\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that\n\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned\n\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);\n\n\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder\n\t\t\t\t\t\t\t// of the source requested, so we exit from the loop\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Function call\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\t\tdata = data[ a[i] ]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t};\n\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn fetchData( data, type, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn data[mSource];\n\t\t\t};\n\t\t}\n\t}\n\n\n\t/**\n\t * Return a function that can be used to set data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data set function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Unlike get, only the underscore (global) option is used for for\n\t\t\t * setting data since we don't know the type here. This is why an object\n\t\t\t * option is not documented for `mData` (which is read/write), but it is\n\t\t\t * for `mRender` which is read only.\n\t\t\t */\n\t\t\treturn _fnSetObjectDataFn( mSource._ );\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Nothing to do when the data source is null */\n\t\t\treturn function () {};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, val, meta) {\n\t\t\t\tmSource( data, 'set', val, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* Like the get, we need to get data from a nested object */\n\t\t\tvar setData = function (data, val, src) {\n\t\t\t\tvar a = _fnSplitObjNotation( src ), b;\n\t\t\t\tvar aLast = a[a.length-1];\n\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;\n\n\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\t// Check if we are dealing with an array notation request\n\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\n\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\t\t\t\t\tdata[ a[i] ] = [];\n\n\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse\n\t\t\t\t\t\tb = a.slice();\n\t\t\t\t\t\tb.splice( 0, i+1 );\n\t\t\t\t\t\tinnerSrc = b.join('.');\n\n\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested\n\t\t\t\t\t\tif ( $.isArray( val ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\to = {};\n\t\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );\n\t\t\t\t\t\t\t\tdata[ a[i] ].push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// We've been asked to save data to an array, but it\n\t\t\t\t\t\t\t// isn't array data to be saved. Best that can be done\n\t\t\t\t\t\t\t// is to just save the value.\n\t\t\t\t\t\t\tdata[ a[i] ] = val;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder\n\t\t\t\t\t\t// of the source and has set the data, thus we can exit here\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Function call\n\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\tdata = data[ a[i] ]( val );\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the nested object doesn't currently exist - since we are\n\t\t\t\t\t// trying to set the value - create it\n\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined )\n\t\t\t\t\t{\n\t\t\t\t\t\tdata[ a[i] ] = {};\n\t\t\t\t\t}\n\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t}\n\n\t\t\t\t// Last item in the input - i.e, the actual set\n\t\t\t\tif ( aLast.match(__reFn ) )\n\t\t\t\t{\n\t\t\t\t\t// Function call\n\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name\n\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway\n\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\treturn setData( data, val, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\tdata[mSource] = val;\n\t\t\t};\n\t\t}\n\t}\n\n\n\t/**\n\t * Return an array with the full table data\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns array {array} aData Master data array\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetDataMaster ( settings )\n\t{\n\t\treturn _pluck( settings.aoData, '_aData' );\n\t}\n\n\n\t/**\n\t * Nuke the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnClearTable( settings )\n\t{\n\t\tsettings.aoData.length = 0;\n\t\tsettings.aiDisplayMaster.length = 0;\n\t\tsettings.aiDisplay.length = 0;\n\t\tsettings.aIds = {};\n\t}\n\n\n\t /**\n\t * Take an array of integers (index array) and remove a target integer (value - not\n\t * the key!)\n\t *  @param {array} a Index array to target\n\t *  @param {int} iTarget value to find\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDeleteIndex( a, iTarget, splice )\n\t{\n\t\tvar iTargetIndex = -1;\n\n\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( a[i] == iTarget )\n\t\t\t{\n\t\t\t\tiTargetIndex = i;\n\t\t\t}\n\t\t\telse if ( a[i] > iTarget )\n\t\t\t{\n\t\t\t\ta[i]--;\n\t\t\t}\n\t\t}\n\n\t\tif ( iTargetIndex != -1 && splice === undefined )\n\t\t{\n\t\t\ta.splice( iTargetIndex, 1 );\n\t\t}\n\t}\n\n\n\t/**\n\t * Mark cached data as invalid such that a re-read of the data will occur when\n\t * the cached data is next requested. Also update from the data source object.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {int}    rowIdx   Row index to invalidate\n\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n\t *     or 'data'\n\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n\t *     row will be invalidated\n\t * @memberof DataTable#oApi\n\t *\n\t * @todo For the modularisation of v1.11 this will need to become a callback, so\n\t *   the sort and filter methods can subscribe to it. That will required\n\t *   initialisation options for sorting, which is why it is not already baked in\n\t */\n\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )\n\t{\n\t\tvar row = settings.aoData[ rowIdx ];\n\t\tvar i, ien;\n\t\tvar cellWrite = function ( cell, col ) {\n\t\t\t// This is very frustrating, but in IE if you just write directly\n\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,\n\t\t\t// even if there is a reference to them elsewhere\n\t\t\twhile ( cell.childNodes.length ) {\n\t\t\t\tcell.removeChild( cell.firstChild );\n\t\t\t}\n\n\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n\t\t};\n\n\t\t// Are we reading last data from DOM or the data object?\n\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n\t\t\t// Read the data from the DOM\n\t\t\trow._aData = _fnGetRowElements(\n\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData\n\t\t\t\t)\n\t\t\t\t.data;\n\t\t}\n\t\telse {\n\t\t\t// Reading from data object, update the DOM\n\t\t\tvar cells = row.anCells;\n\n\t\t\tif ( cells ) {\n\t\t\t\tif ( colIdx !== undefined ) {\n\t\t\t\t\tcellWrite( cells[colIdx], colIdx );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tcellWrite( cells[i], i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// For both row and cell invalidation, the cached data for sorting and\n\t\t// filtering is nulled out\n\t\trow._aSortData = null;\n\t\trow._aFilterData = null;\n\n\t\t// Invalidate the type for a specific column (if given) or all columns since\n\t\t// the data might have changed\n\t\tvar cols = settings.aoColumns;\n\t\tif ( colIdx !== undefined ) {\n\t\t\tcols[ colIdx ].sType = null;\n\t\t}\n\t\telse {\n\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {\n\t\t\t\tcols[i].sType = null;\n\t\t\t}\n\n\t\t\t// Update DataTables special `DT_*` attributes for the row\n\t\t\t_fnRowAttributes( settings, row );\n\t\t}\n\t}\n\n\n\t/**\n\t * Build a data source object from an HTML row, reading the contents of the\n\t * cells that are in the row.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {node|object} TR element from which to read data or existing row\n\t *   object from which to re-read the data from the cells\n\t * @param {int} [colIdx] Optional column index\n\t * @param {array|object} [d] Data source object. If `colIdx` is given then this\n\t *   parameter should also be given and will be used to write the data into.\n\t *   Only the column in question will be written\n\t * @returns {object} Object with two parameters: `data` the data read, in\n\t *   document order, and `cells` and array of nodes (they can be useful to the\n\t *   caller, so rather than needing a second traversal to get them, just return\n\t *   them from here).\n\t * @memberof DataTable#oApi\n\t */\n\tfunction _fnGetRowElements( settings, row, colIdx, d )\n\t{\n\t\tvar\n\t\t\ttds = [],\n\t\t\ttd = row.firstChild,\n\t\t\tname, col, o, i=0, contents,\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tobjectRead = settings._rowReadObject;\n\n\t\t// Allow the data object to be passed in, or construct\n\t\td = d !== undefined ?\n\t\t\td :\n\t\t\tobjectRead ?\n\t\t\t\t{} :\n\t\t\t\t[];\n\n\t\tvar attr = function ( str, td  ) {\n\t\t\tif ( typeof str === 'string' ) {\n\t\t\t\tvar idx = str.indexOf('@');\n\n\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\tvar attr = str.substring( idx+1 );\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );\n\t\t\t\t\tsetter( d, td.getAttribute( attr ) );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Read data from a cell and store into the data object\n\t\tvar cellProcess = function ( cell ) {\n\t\t\tif ( colIdx === undefined || colIdx === i ) {\n\t\t\t\tcol = columns[i];\n\t\t\t\tcontents = $.trim(cell.innerHTML);\n\n\t\t\t\tif ( col && col._bAttrSrc ) {\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );\n\t\t\t\t\tsetter( d, contents );\n\n\t\t\t\t\tattr( col.mData.sort, cell );\n\t\t\t\t\tattr( col.mData.type, cell );\n\t\t\t\t\tattr( col.mData.filter, cell );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Depending on the `data` option for the columns the data can\n\t\t\t\t\t// be read to either an object or an array.\n\t\t\t\t\tif ( objectRead ) {\n\t\t\t\t\t\tif ( ! col._setter ) {\n\t\t\t\t\t\t\t// Cache the setter function\n\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcol._setter( d, contents );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\td[i] = contents;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti++;\n\t\t};\n\n\t\tif ( td ) {\n\t\t\t// `tr` element was passed in\n\t\t\twhile ( td ) {\n\t\t\t\tname = td.nodeName.toUpperCase();\n\n\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {\n\t\t\t\t\tcellProcess( td );\n\t\t\t\t\ttds.push( td );\n\t\t\t\t}\n\n\t\t\t\ttd = td.nextSibling;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Existing row object passed in\n\t\t\ttds = row.anCells;\n\n\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n\t\t\t\tcellProcess( tds[j] );\n\t\t\t}\n\t\t}\n\n\t\t// Read the ID from the DOM if present\n\t\tvar rowNode = row.firstChild ? row : row.nTr;\n\n\t\tif ( rowNode ) {\n\t\t\tvar id = rowNode.getAttribute( 'id' );\n\n\t\t\tif ( id ) {\n\t\t\t\t_fnSetObjectDataFn( settings.rowId )( d, id );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdata: d,\n\t\t\tcells: tds\n\t\t};\n\t}\n\t/**\n\t * Create a new TR element (and it's TD children) for a row\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow Row to consider\n\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n\t{\n\t\tvar\n\t\t\trow = oSettings.aoData[iRow],\n\t\t\trowData = row._aData,\n\t\t\tcells = [],\n\t\t\tnTr, nTd, oCol,\n\t\t\ti, iLen;\n\n\t\tif ( row.nTr === null )\n\t\t{\n\t\t\tnTr = nTrIn || document.createElement('tr');\n\n\t\t\trow.nTr = nTr;\n\t\t\trow.anCells = cells;\n\n\t\t\t/* Use a private property on the node to allow reserve mapping from the node\n\t\t\t * to the aoData array for fast look up\n\t\t\t */\n\t\t\tnTr._DT_RowIndex = iRow;\n\n\t\t\t/* Special parameters can be given by the data source to be used on the row */\n\t\t\t_fnRowAttributes( oSettings, row );\n\n\t\t\t/* Process each column */\n\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\toCol = oSettings.aoColumns[i];\n\n\t\t\t\tnTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\n\t\t\t\tnTd._DT_CellIndex = {\n\t\t\t\t\trow: iRow,\n\t\t\t\t\tcolumn: i\n\t\t\t\t};\n\n\t\t\t\tcells.push( nTd );\n\n\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined\n\t\t\t\tif ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&\n\t\t\t\t\t (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n\t\t\t\t) {\n\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n\t\t\t\t}\n\n\t\t\t\t/* Add user defined class */\n\t\t\t\tif ( oCol.sClass )\n\t\t\t\t{\n\t\t\t\t\tnTd.className += ' '+oCol.sClass;\n\t\t\t\t}\n\n\t\t\t\t// Visibility - add or remove as required\n\t\t\t\tif ( oCol.bVisible && ! nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTr.appendChild( nTd );\n\t\t\t\t}\n\t\t\t\telse if ( ! oCol.bVisible && nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTd.parentNode.removeChild( nTd );\n\t\t\t\t}\n\n\t\t\t\tif ( oCol.fnCreatedCell )\n\t\t\t\t{\n\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,\n\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\n\t\t}\n\n\t\t// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n\t\t// and deployed\n\t\trow.nTr.setAttribute( 'role', 'row' );\n\t}\n\n\n\t/**\n\t * Add attributes to a row based on the special `DT_*` parameters in a data\n\t * source object.\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} DataTables row object for the row to be modified\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnRowAttributes( settings, row )\n\t{\n\t\tvar tr = row.nTr;\n\t\tvar data = row._aData;\n\n\t\tif ( tr ) {\n\t\t\tvar id = settings.rowIdFn( data );\n\n\t\t\tif ( id ) {\n\t\t\t\ttr.id = id;\n\t\t\t}\n\n\t\t\tif ( data.DT_RowClass ) {\n\t\t\t\t// Remove any classes added by DT_RowClass before\n\t\t\t\tvar a = data.DT_RowClass.split(' ');\n\t\t\t\trow.__rowc = row.__rowc ?\n\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :\n\t\t\t\t\ta;\n\n\t\t\t\t$(tr)\n\t\t\t\t\t.removeClass( row.__rowc.join(' ') )\n\t\t\t\t\t.addClass( data.DT_RowClass );\n\t\t\t}\n\n\t\t\tif ( data.DT_RowAttr ) {\n\t\t\t\t$(tr).attr( data.DT_RowAttr );\n\t\t\t}\n\n\t\t\tif ( data.DT_RowData ) {\n\t\t\t\t$(tr).data( data.DT_RowData );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Create the HTML header for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBuildHead( oSettings )\n\t{\n\t\tvar i, ien, cell, row, column;\n\t\tvar thead = oSettings.nTHead;\n\t\tvar tfoot = oSettings.nTFoot;\n\t\tvar createHeader = $('th, td', thead).length === 0;\n\t\tvar classes = oSettings.oClasses;\n\t\tvar columns = oSettings.aoColumns;\n\n\t\tif ( createHeader ) {\n\t\t\trow = $('<tr/>').appendTo( thead );\n\t\t}\n\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcell = $( column.nTh ).addClass( column.sClass );\n\n\t\t\tif ( createHeader ) {\n\t\t\t\tcell.appendTo( row );\n\t\t\t}\n\n\t\t\t// 1.11 move into sorting\n\t\t\tif ( oSettings.oFeatures.bSort ) {\n\t\t\t\tcell.addClass( column.sSortingClass );\n\n\t\t\t\tif ( column.bSortable !== false ) {\n\t\t\t\t\tcell\n\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )\n\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );\n\n\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( column.sTitle != cell[0].innerHTML ) {\n\t\t\t\tcell.html( column.sTitle );\n\t\t\t}\n\n\t\t\t_fnRenderer( oSettings, 'header' )(\n\t\t\t\toSettings, cell, column, classes\n\t\t\t);\n\t\t}\n\n\t\tif ( createHeader ) {\n\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );\n\t\t}\n\n\t\t/* ARIA role for the rows */\n\t \t$(thead).find('>tr').attr('role', 'row');\n\n\t\t/* Deal with the footer - add classes if required */\n\t\t$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n\t\t$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n\n\t\t// Cache the footer cells. Note that we only take the cells from the first\n\t\t// row in the footer. If there is more than one row the user wants to\n\t\t// interact with, they need to use the table().foot() method. Note also this\n\t\t// allows cells to be used for multiple columns using colspan\n\t\tif ( tfoot !== null ) {\n\t\t\tvar cells = oSettings.aoFooter[0];\n\n\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tcolumn = columns[i];\n\t\t\t\tcolumn.nTf = cells[i].cell;\n\n\t\t\t\tif ( column.sClass ) {\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Draw the header (or footer) element based on the column visibility states. The\n\t * methodology here is to use the layout array from _fnDetectHeader, modified for\n\t * the instantaneous column visibility, to construct the new layout. The grid is\n\t * traversed over cell at a time in a rows x columns grid fashion, although each\n\t * cell insert can cover multiple elements in the grid - which is tracks using the\n\t * aApplied array. Cell inserts in the grid will only occur where there isn't\n\t * already a cell in that position.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param array {objects} aoSource Layout array from _fnDetectHeader\n\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;\n\t\tvar aoLocal = [];\n\t\tvar aApplied = [];\n\t\tvar iColumns = oSettings.aoColumns.length;\n\t\tvar iRowspan, iColspan;\n\n\t\tif ( ! aoSource )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (  bIncludeHidden === undefined )\n\t\t{\n\t\t\tbIncludeHidden = false;\n\t\t}\n\n\t\t/* Make a copy of the master layout array, but without the visible columns in it */\n\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taoLocal[i] = aoSource[i].slice();\n\t\t\taoLocal[i].nTr = aoSource[i].nTr;\n\n\t\t\t/* Remove any columns which are currently hidden */\n\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )\n\t\t\t{\n\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n\t\t\t\t{\n\t\t\t\t\taoLocal[i].splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Prep the applied array - it needs an element for each row */\n\t\t\taApplied.push( [] );\n\t\t}\n\n\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnLocalTr = aoLocal[i].nTr;\n\n\t\t\t/* All cells are going to be replaced, so empty out the row */\n\t\t\tif ( nLocalTr )\n\t\t\t{\n\t\t\t\twhile( (n = nLocalTr.firstChild) )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.removeChild( n );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tiRowspan = 1;\n\t\t\t\tiColspan = 1;\n\n\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target\n\t\t\t\t * insert point. If there is, then there is nothing to do.\n\t\t\t\t */\n\t\t\t\tif ( aApplied[i][j] === undefined )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );\n\t\t\t\t\taApplied[i][j] = 1;\n\n\t\t\t\t\t/* Expand the cell to cover as many rows as needed */\n\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;\n\t\t\t\t\t\tiRowspan++;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Expand the cell to cover as many columns as needed */\n\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tiColspan++;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Do the actual expansion in the DOM */\n\t\t\t\t\t$(aoLocal[i][j].cell)\n\t\t\t\t\t\t.attr('rowspan', iRowspan)\n\t\t\t\t\t\t.attr('colspan', iColspan);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Insert the required TR nodes into the table for display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDraw( oSettings )\n\t{\n\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )\n\t\t{\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\treturn;\n\t\t}\n\n\t\tvar i, iLen, n;\n\t\tvar anRows = [];\n\t\tvar iRowCount = 0;\n\t\tvar asStripeClasses = oSettings.asStripeClasses;\n\t\tvar iStripes = asStripeClasses.length;\n\t\tvar iOpenRows = oSettings.aoOpenRows.length;\n\t\tvar oLang = oSettings.oLanguage;\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\n\t\tvar aiDisplay = oSettings.aiDisplay;\n\n\t\toSettings.bDrawing = true;\n\n\t\t/* Check and see if we have an initial draw position from state saving */\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n\t\t{\n\t\t\toSettings._iDisplayStart = bServerSide ?\n\t\t\t\tiInitDisplayStart :\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n\t\t\t\t\t0 :\n\t\t\t\t\tiInitDisplayStart;\n\n\t\t\toSettings.iInitDisplayStart = -1;\n\t\t}\n\n\t\tvar iDisplayStart = oSettings._iDisplayStart;\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();\n\n\t\t/* Server-side processing draw intercept */\n\t\tif ( oSettings.bDeferLoading )\n\t\t{\n\t\t\toSettings.bDeferLoading = false;\n\t\t\toSettings.iDraw++;\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t}\n\t\telse if ( !bServerSide )\n\t\t{\n\t\t\toSettings.iDraw++;\n\t\t}\n\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif ( aiDisplay.length !== 0 )\n\t\t{\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )\n\t\t\t{\n\t\t\t\tvar iDataIndex = aiDisplay[j];\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\n\t\t\t\tif ( aoData.nTr === null )\n\t\t\t\t{\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\n\t\t\t\t}\n\n\t\t\t\tvar nRow = aoData.nTr;\n\n\t\t\t\t/* Remove the old striping classes and then add the new one */\n\t\t\t\tif ( iStripes !== 0 )\n\t\t\t\t{\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )\n\t\t\t\t\t{\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n\t\t\t\t\t\taoData._sRowStripe = sStripe;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Row callback functions - might want to manipulate the row\n\t\t\t\t// iRowCount and j are not currently documented. Are they at all\n\t\t\t\t// useful?\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j] );\n\n\t\t\t\tanRows.push( nRow );\n\t\t\t\tiRowCount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Table is empty - create a row with an empty message in it */\n\t\t\tvar sZero = oLang.sZeroRecords;\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n\t\t\t{\n\t\t\t\tsZero = oLang.sLoadingRecords;\n\t\t\t}\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n\t\t\t{\n\t\t\t\tsZero = oLang.sEmptyTable;\n\t\t\t}\n\n\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n\t\t\t\t.append( $('<td />', {\n\t\t\t\t\t'valign':  'top',\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\n\t\t\t\t} ).html( sZero ) )[0];\n\t\t}\n\n\t\t/* Header and footer callbacks */\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\n\t\tvar body = $(oSettings.nTBody);\n\n\t\tbody.children().detach();\n\t\tbody.append( $(anRows) );\n\n\t\t/* Call all required callback functions for the end of a draw */\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n\n\t\t/* Draw is complete, sorting and filtering must be as well */\n\t\toSettings.bSorted = false;\n\t\toSettings.bFiltered = false;\n\t\toSettings.bDrawing = false;\n\t}\n\n\n\t/**\n\t * Redraw the table - taking account of the various features which are enabled\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {boolean} [holdPosition] Keep the current paging position. By default\n\t *    the paging is reset to the first page\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReDraw( settings, holdPosition )\n\t{\n\t\tvar\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tsort     = features.bSort,\n\t\t\tfilter   = features.bFilter;\n\n\t\tif ( sort ) {\n\t\t\t_fnSort( settings );\n\t\t}\n\n\t\tif ( filter ) {\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );\n\t\t}\n\t\telse {\n\t\t\t// No filtering, so we want to just use the display master\n\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\t}\n\n\t\tif ( holdPosition !== true ) {\n\t\t\tsettings._iDisplayStart = 0;\n\t\t}\n\n\t\t// Let any modules know about the draw hold position state (used by\n\t\t// scrolling internally)\n\t\tsettings._drawHold = holdPosition;\n\n\t\t_fnDraw( settings );\n\n\t\tsettings._drawHold = false;\n\t}\n\n\n\t/**\n\t * Add the options to the page HTML for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddOptionsHtml ( oSettings )\n\t{\n\t\tvar classes = oSettings.oClasses;\n\t\tvar table = $(oSettings.nTable);\n\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed\n\t\tvar features = oSettings.oFeatures;\n\n\t\t// All DataTables are wrapped in a div\n\t\tvar insert = $('<div/>', {\n\t\t\tid:      oSettings.sTableId+'_wrapper',\n\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n\t\t} );\n\n\t\toSettings.nHolding = holding[0];\n\t\toSettings.nTableWrapper = insert[0];\n\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\n\t\t/* Loop over the user set positioning and place the elements as needed */\n\t\tvar aDom = oSettings.sDom.split('');\n\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;\n\t\tfor ( var i=0 ; i<aDom.length ; i++ )\n\t\t{\n\t\t\tfeatureNode = null;\n\t\t\tcOption = aDom[i];\n\n\t\t\tif ( cOption == '<' )\n\t\t\t{\n\t\t\t\t/* New container div */\n\t\t\t\tnNewNode = $('<div/>')[0];\n\n\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */\n\t\t\t\tcNext = aDom[i+1];\n\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )\n\t\t\t\t{\n\t\t\t\t\tsAttr = \"\";\n\t\t\t\t\tj = 2;\n\t\t\t\t\twhile ( aDom[i+j] != cNext )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr += aDom[i+j];\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */\n\t\t\t\t\tif ( sAttr == \"H\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIHeader;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr == \"F\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIFooter;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t\t */\n\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar aSplit = sAttr.split('.');\n\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n\t\t\t\t\t\tnNewNode.className = aSplit[1];\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.className = sAttr;\n\t\t\t\t\t}\n\n\t\t\t\t\ti += j; /* Move along the position array */\n\t\t\t\t}\n\n\t\t\t\tinsert.append( nNewNode );\n\t\t\t\tinsert = $(nNewNode);\n\t\t\t}\n\t\t\telse if ( cOption == '>' )\n\t\t\t{\n\t\t\t\t/* End container div */\n\t\t\t\tinsert = insert.parent();\n\t\t\t}\n\t\t\t// @todo Move options into their own plugins?\n\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n\t\t\t{\n\t\t\t\t/* Length */\n\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'f' && features.bFilter )\n\t\t\t{\n\t\t\t\t/* Filter */\n\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'r' && features.bProcessing )\n\t\t\t{\n\t\t\t\t/* pRocessing */\n\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 't' )\n\t\t\t{\n\t\t\t\t/* Table */\n\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption ==  'i' && features.bInfo )\n\t\t\t{\n\t\t\t\t/* Info */\n\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'p' && features.bPaginate )\n\t\t\t{\n\t\t\t\t/* Pagination */\n\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );\n\t\t\t}\n\t\t\telse if ( DataTable.ext.feature.length !== 0 )\n\t\t\t{\n\t\t\t\t/* Plug-in features */\n\t\t\t\tvar aoFeatures = DataTable.ext.feature;\n\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n\t\t\t\t{\n\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )\n\t\t\t\t\t{\n\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Add to the 2D features array */\n\t\t\tif ( featureNode )\n\t\t\t{\n\t\t\t\tvar aanFeatures = oSettings.aanFeatures;\n\n\t\t\t\tif ( ! aanFeatures[cOption] )\n\t\t\t\t{\n\t\t\t\t\taanFeatures[cOption] = [];\n\t\t\t\t}\n\n\t\t\t\taanFeatures[cOption].push( featureNode );\n\t\t\t\tinsert.append( featureNode );\n\t\t\t}\n\t\t}\n\n\t\t/* Built our DOM structure - replace the holding div with what we want */\n\t\tholding.replaceWith( insert );\n\t\toSettings.nHolding = null;\n\t}\n\n\n\t/**\n\t * Use the DOM source to create up an array of header cells. The idea here is to\n\t * create a layout grid (array) of rows x columns, which contains a reference\n\t * to the cell that that point in the grid (regardless of col/rowspan), such that\n\t * any column / row could be removed and the new grid constructed\n\t *  @param array {object} aLayout Array to store the calculated layout in\n\t *  @param {node} nThead The header/footer element for the table\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDetectHeader ( aLayout, nThead )\n\t{\n\t\tvar nTrs = $(nThead).children('tr');\n\t\tvar nTr, nCell;\n\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n\t\tvar bUnique;\n\t\tvar fnShiftCol = function ( a, i, j ) {\n\t\t\tvar k = a[i];\n\t                while ( k[j] ) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\treturn j;\n\t\t};\n\n\t\taLayout.splice( 0, aLayout.length );\n\n\t\t/* We know how many rows there are in the layout - so prep it */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taLayout.push( [] );\n\t\t}\n\n\t\t/* Calculate a layout array */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnTr = nTrs[i];\n\t\t\tiColumn = 0;\n\n\t\t\t/* For every cell in the row... */\n\t\t\tnCell = nTr.firstChild;\n\t\t\twhile ( nCell ) {\n\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||\n\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )\n\t\t\t\t{\n\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */\n\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;\n\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;\n\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n\n\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target\n\t\t\t\t\t * accordingly\n\t\t\t\t\t */\n\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );\n\n\t\t\t\t\t/* Cache calculation for unique columns */\n\t\t\t\t\tbUnique = iColspan === 1 ? true : false;\n\n\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */\n\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {\n\t\t\t\t\t\t\t\t\"cell\": nCell,\n\t\t\t\t\t\t\t\t\"unique\": bUnique\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnCell = nCell.nextSibling;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Get an array of unique th elements, one for each column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nHeader automatically detect the layout from this node - optional\n\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n\t *  @returns array {node} aReturn list of unique th's\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n\t{\n\t\tvar aReturn = [];\n\t\tif ( !aLayout )\n\t\t{\n\t\t\taLayout = oSettings.aoHeader;\n\t\t\tif ( nHeader )\n\t\t\t{\n\t\t\t\taLayout = [];\n\t\t\t\t_fnDetectHeader( aLayout, nHeader );\n\t\t\t}\n\t\t}\n\n\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tif ( aLayout[i][j].unique &&\n\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )\n\t\t\t\t{\n\t\t\t\t\taReturn[j] = aLayout[i][j].cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn aReturn;\n\t}\n\n\t/**\n\t * Create an Ajax call based on the table's settings, taking into account that\n\t * parameters can have multiple forms, and backwards compatibility.\n\t *\n\t * @param {object} oSettings dataTables settings object\n\t * @param {array} data Data to send to the server, required by\n\t *     DataTables - may be augmented by developer callbacks\n\t * @param {function} fn Callback function to run when data is obtained\n\t */\n\tfunction _fnBuildAjax( oSettings, data, fn )\n\t{\n\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate\n\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n\n\t\t// Convert to object based for 1.10+ if using the old array scheme which can\n\t\t// come from server-side processing or serverParams\n\t\tif ( data && $.isArray(data) ) {\n\t\t\tvar tmp = {};\n\t\t\tvar rbracket = /(.*?)\\[\\]$/;\n\n\t\t\t$.each( data, function (key, val) {\n\t\t\t\tvar match = val.name.match(rbracket);\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\t// Support for arrays\n\t\t\t\t\tvar name = match[0];\n\n\t\t\t\t\tif ( ! tmp[ name ] ) {\n\t\t\t\t\t\ttmp[ name ] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttmp[ name ].push( val.value );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttmp[val.name] = val.value;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdata = tmp;\n\t\t}\n\n\t\tvar ajaxData;\n\t\tvar ajax = oSettings.ajax;\n\t\tvar instance = oSettings.oInstance;\n\t\tvar callback = function ( json ) {\n\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n\t\t\tfn( json );\n\t\t};\n\n\t\tif ( $.isPlainObject( ajax ) && ajax.data )\n\t\t{\n\t\t\tajaxData = ajax.data;\n\n\t\t\tvar newData = $.isFunction( ajaxData ) ?\n\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return\n\t\t\t\tajaxData;                      // an object object or array to merge\n\n\t\t\t// If the function returned something, use that alone\n\t\t\tdata = $.isFunction( ajaxData ) && newData ?\n\t\t\t\tnewData :\n\t\t\t\t$.extend( true, data, newData );\n\n\t\t\t// Remove the data property as we've resolved it already and don't want\n\t\t\t// jQuery to do it again (it is restored at the end of the function)\n\t\t\tdelete ajax.data;\n\t\t}\n\n\t\tvar baseAjax = {\n\t\t\t\"data\": data,\n\t\t\t\"success\": function (json) {\n\t\t\t\tvar error = json.error || json.sError;\n\t\t\t\tif ( error ) {\n\t\t\t\t\t_fnLog( oSettings, 0, error );\n\t\t\t\t}\n\n\t\t\t\toSettings.json = json;\n\t\t\t\tcallback( json );\n\t\t\t},\n\t\t\t\"dataType\": \"json\",\n\t\t\t\"cache\": false,\n\t\t\t\"type\": oSettings.sServerMethod,\n\t\t\t\"error\": function (xhr, error, thrown) {\n\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n\n\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {\n\t\t\t\t\tif ( error == \"parsererror\" ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( xhr.readyState === 4 ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\t}\n\t\t};\n\n\t\t// Store the data submitted for the API\n\t\toSettings.oAjaxData = data;\n\n\t\t// Allow plug-ins and external processes to modify the data\n\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n\n\t\tif ( oSettings.fnServerData )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.fnServerData.call( instance,\n\t\t\t\toSettings.sAjaxSource,\n\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n\t\t\t\t\treturn { name: key, value: val };\n\t\t\t\t} ),\n\t\t\t\tcallback,\n\t\t\t\toSettings\n\t\t\t);\n\t\t}\n\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n\t\t\t\turl: ajax || oSettings.sAjaxSource\n\t\t\t} ) );\n\t\t}\n\t\telse if ( $.isFunction( ajax ) )\n\t\t{\n\t\t\t// Is a function - let the caller define what needs to be done\n\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Object to extend the base settings\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n\n\t\t\t// Restore for next time around\n\t\t\tajax.data = ajaxData;\n\t\t}\n\t}\n\n\n\t/**\n\t * Update the table using an Ajax call\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {boolean} Block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdate( settings )\n\t{\n\t\tif ( settings.bAjaxDataGet ) {\n\t\t\tsettings.iDraw++;\n\t\t\t_fnProcessingDisplay( settings, true );\n\n\t\t\t_fnBuildAjax(\n\t\t\t\tsettings,\n\t\t\t\t_fnAjaxParameters( settings ),\n\t\t\t\tfunction(json) {\n\t\t\t\t\t_fnAjaxUpdateDraw( settings, json );\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * Build up the parameters in an object needed for a server-side processing\n\t * request. Note that this is basically done twice, is different ways - a modern\n\t * method which is used by default in DataTables 1.10 which uses objects and\n\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n\t * the sAjaxSource option is used in the initialisation, or the legacyAjax\n\t * option is set.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {bool} block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxParameters( settings )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tcolumnCount = columns.length,\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tpreSearch = settings.oPreviousSearch,\n\t\t\tpreColSearch = settings.aoPreSearchCols,\n\t\t\ti, data = [], dataProp, column, columnSearch,\n\t\t\tsort = _fnSortFlatten( settings ),\n\t\t\tdisplayStart = settings._iDisplayStart,\n\t\t\tdisplayLength = features.bPaginate !== false ?\n\t\t\t\tsettings._iDisplayLength :\n\t\t\t\t-1;\n\n\t\tvar param = function ( name, value ) {\n\t\t\tdata.push( { 'name': name, 'value': value } );\n\t\t};\n\n\t\t// DataTables 1.9- compatible method\n\t\tparam( 'sEcho',          settings.iDraw );\n\t\tparam( 'iColumns',       columnCount );\n\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n\t\tparam( 'iDisplayStart',  displayStart );\n\t\tparam( 'iDisplayLength', displayLength );\n\n\t\t// DataTables 1.10+ method\n\t\tvar d = {\n\t\t\tdraw:    settings.iDraw,\n\t\t\tcolumns: [],\n\t\t\torder:   [],\n\t\t\tstart:   displayStart,\n\t\t\tlength:  displayLength,\n\t\t\tsearch:  {\n\t\t\t\tvalue: preSearch.sSearch,\n\t\t\t\tregex: preSearch.bRegex\n\t\t\t}\n\t\t};\n\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcolumnSearch = preColSearch[i];\n\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n\n\t\t\td.columns.push( {\n\t\t\t\tdata:       dataProp,\n\t\t\t\tname:       column.sName,\n\t\t\t\tsearchable: column.bSearchable,\n\t\t\t\torderable:  column.bSortable,\n\t\t\t\tsearch:     {\n\t\t\t\t\tvalue: columnSearch.sSearch,\n\t\t\t\t\tregex: columnSearch.bRegex\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tparam( \"mDataProp_\"+i, dataProp );\n\n\t\t\tif ( features.bFilter ) {\n\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );\n\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );\n\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );\n\t\t\t}\n\n\t\t\tif ( features.bSort ) {\n\t\t\t\tparam( 'bSortable_'+i, column.bSortable );\n\t\t\t}\n\t\t}\n\n\t\tif ( features.bFilter ) {\n\t\t\tparam( 'sSearch', preSearch.sSearch );\n\t\t\tparam( 'bRegex', preSearch.bRegex );\n\t\t}\n\n\t\tif ( features.bSort ) {\n\t\t\t$.each( sort, function ( i, val ) {\n\t\t\t\td.order.push( { column: val.col, dir: val.dir } );\n\n\t\t\t\tparam( 'iSortCol_'+i, val.col );\n\t\t\t\tparam( 'sSortDir_'+i, val.dir );\n\t\t\t} );\n\n\t\t\tparam( 'iSortingCols', sort.length );\n\t\t}\n\n\t\t// If the legacy.ajax parameter is null, then we automatically decide which\n\t\t// form to use, based on sAjaxSource\n\t\tvar legacy = DataTable.ext.legacy.ajax;\n\t\tif ( legacy === null ) {\n\t\t\treturn settings.sAjaxSource ? data : d;\n\t\t}\n\n\t\t// Otherwise, if legacy has been specified then we use that to decide on the\n\t\t// form\n\t\treturn legacy ? data : d;\n\t}\n\n\n\t/**\n\t * Data the data from the server (nuking the old) and redraw the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} json json data return from the server.\n\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n\t *  @param {array} json.aaData The data to display on this page\n\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdateDraw ( settings, json )\n\t{\n\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n\t\t// Support both\n\t\tvar compat = function ( old, modern ) {\n\t\t\treturn json[old] !== undefined ? json[old] : json[modern];\n\t\t};\n\n\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\tvar draw            = compat( 'sEcho',                'draw' );\n\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n\n\t\tif ( draw ) {\n\t\t\t// Protect against out of sequence returns\n\t\t\tif ( draw*1 < settings.iDraw ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings.iDraw = draw * 1;\n\t\t}\n\n\t\t_fnClearTable( settings );\n\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);\n\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t_fnAddData( settings, data[i] );\n\t\t}\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\n\t\tsettings.bAjaxDataGet = false;\n\t\t_fnDraw( settings );\n\n\t\tif ( ! settings._bInitComplete ) {\n\t\t\t_fnInitComplete( settings, json );\n\t\t}\n\n\t\tsettings.bAjaxDataGet = true;\n\t\t_fnProcessingDisplay( settings, false );\n\t}\n\n\n\t/**\n\t * Get the data from the JSON data source to use for drawing a table. Using\n\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n\t * source object, or from a processing function.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param  {object} json Data source object / array from the server\n\t *  @return {array} Array of data to use\n\t */\n\tfunction _fnAjaxDataSrc ( oSettings, json )\n\t{\n\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n\t\t\toSettings.ajax.dataSrc :\n\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\n\t\t// Compatibility with 1.9-. In order to read from aaData, check if the\n\t\t// default has been changed, if not, check for aaData\n\t\tif ( dataSrc === 'data' ) {\n\t\t\treturn json.aaData || json[dataSrc];\n\t\t}\n\n\t\treturn dataSrc !== \"\" ?\n\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :\n\t\t\tjson;\n\t}\n\n\t/**\n\t * Generate the node required for filtering text\n\t *  @returns {node} Filter control element\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlFilter ( settings )\n\t{\n\t\tvar classes = settings.oClasses;\n\t\tvar tableId = settings.sTableId;\n\t\tvar language = settings.oLanguage;\n\t\tvar previousSearch = settings.oPreviousSearch;\n\t\tvar features = settings.aanFeatures;\n\t\tvar input = '<input placeholder=\"Search\" type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n\n\t\tvar str = language.sSearch;\n\t\tstr = str.match(/_INPUT_/) ?\n\t\t\tstr.replace('_INPUT_', input) :\n\t\t\tstr+input;\n\n\t\tvar filter = $('<div/>', {\n\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,\n\t\t\t\t'class': classes.sFilter\n\t\t\t} )\n\t\t\t.append( $('<label/>' ).append( str ) );\n\n\t\tvar searchFn = function() {\n\t\t\t/* Update all other filter input elements for the new display */\n\t\t\tvar n = features.f;\n\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\n\t\t\t/* Now do the filter */\n\t\t\tif ( val != previousSearch.sSearch ) {\n\t\t\t\t_fnFilterComplete( settings, {\n\t\t\t\t\t\"sSearch\": val,\n\t\t\t\t\t\"bRegex\": previousSearch.bRegex,\n\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,\n\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive\n\t\t\t\t} );\n\n\t\t\t\t// Need to redraw, without resorting\n\t\t\t\tsettings._iDisplayStart = 0;\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t};\n\n\t\tvar searchDelay = settings.searchDelay !== null ?\n\t\t\tsettings.searchDelay :\n\t\t\t_fnDataSource( settings ) === 'ssp' ?\n\t\t\t\t400 :\n\t\t\t\t0;\n\n\t\tvar jqFilter = $('input', filter)\n\t\t\t.val( previousSearch.sSearch )\n\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )\n\t\t\t.on(\n\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',\n\t\t\t\tsearchDelay ?\n\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :\n\t\t\t\t\tsearchFn\n\t\t\t)\n\t\t\t.on( 'keypress.DT', function(e) {\n\t\t\t\t/* Prevent form submission */\n\t\t\t\tif ( e.keyCode == 13 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.attr('aria-controls', tableId);\n\n\t\t// Update the input elements whenever the table is filtered\n\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame...\n\t\t\t\ttry {\n\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {\n\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch ( e ) {}\n\t\t\t}\n\t\t} );\n\n\t\treturn filter[0];\n\t}\n\n\n\t/**\n\t * Filter the table using both the global filter and column based filtering\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oSearch search information\n\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterComplete ( oSettings, oInput, iForce )\n\t{\n\t\tvar oPrevSearch = oSettings.oPreviousSearch;\n\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;\n\t\tvar fnSaveFilter = function ( oFilter ) {\n\t\t\t/* Save the filtering values */\n\t\t\toPrevSearch.sSearch = oFilter.sSearch;\n\t\t\toPrevSearch.bRegex = oFilter.bRegex;\n\t\t\toPrevSearch.bSmart = oFilter.bSmart;\n\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n\t\t};\n\t\tvar fnRegex = function ( o ) {\n\t\t\t// Backwards compatibility with the bEscapeRegex option\n\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n\t\t};\n\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo As per sort - can this be moved into an event handler?\n\t\t_fnColumnTypes( oSettings );\n\n\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' )\n\t\t{\n\t\t\t/* Global filter */\n\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n\t\t\tfnSaveFilter( oInput );\n\n\t\t\t/* Now do the individual column filter */\n\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )\n\t\t\t{\n\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n\t\t\t}\n\n\t\t\t/* Custom filtering */\n\t\t\t_fnFilterCustom( oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfnSaveFilter( oInput );\n\t\t}\n\n\t\t/* Tell the draw function we have been filtering */\n\t\toSettings.bFiltered = true;\n\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );\n\t}\n\n\n\t/**\n\t * Apply custom filtering functions\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCustom( settings )\n\t{\n\t\tvar filters = DataTable.ext.search;\n\t\tvar displayRows = settings.aiDisplay;\n\t\tvar row, rowIdx;\n\n\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n\t\t\tvar rows = [];\n\n\t\t\t// Loop over each row and see if it should be included\n\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n\t\t\t\trowIdx = displayRows[ j ];\n\t\t\t\trow = settings.aoData[ rowIdx ];\n\n\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n\t\t\t\t\trows.push( rowIdx );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// So the array reference doesn't break set the results into the\n\t\t\t// existing array\n\t\t\tdisplayRows.length = 0;\n\t\t\t$.merge( displayRows, rows );\n\t\t}\n\t}\n\n\n\t/**\n\t * Filter the table on a per-column basis\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sInput string to filter on\n\t *  @param {int} iColumn column to filter\n\t *  @param {bool} bRegex treat search string as a regular expression or not\n\t *  @param {bool} bSmart use smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n\t{\n\t\tif ( searchStr === '' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar data;\n\t\tvar out = [];\n\t\tvar display = settings.aiDisplay;\n\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n\n\t\tfor ( var i=0 ; i<display.length ; i++ ) {\n\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\n\n\t\t\tif ( rpSearch.test( data ) ) {\n\t\t\t\tout.push( display[i] );\n\t\t\t}\n\t\t}\n\n\t\tsettings.aiDisplay = out;\n\t}\n\n\n\t/**\n\t * Filter the data table based on user input and draw the table\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} input string to filter on\n\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n\t *  @param {bool} regex treat as a regular expression or not\n\t *  @param {bool} smart perform smart filtering or not\n\t *  @param {bool} caseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n\t{\n\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n\t\tvar prevSearch = settings.oPreviousSearch.sSearch;\n\t\tvar displayMaster = settings.aiDisplayMaster;\n\t\tvar display, invalidated, i;\n\t\tvar filtered = [];\n\n\t\t// Need to take account of custom filtering functions - always filter\n\t\tif ( DataTable.ext.search.length !== 0 ) {\n\t\t\tforce = true;\n\t\t}\n\n\t\t// Check if any of the rows were invalidated\n\t\tinvalidated = _fnFilterData( settings );\n\n\t\t// If the input is blank - we just want the full data set\n\t\tif ( input.length <= 0 ) {\n\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t}\n\t\telse {\n\t\t\t// New search - start from the master array\n\t\t\tif ( invalidated ||\n\t\t\t\t force ||\n\t\t\t\t prevSearch.length > input.length ||\n\t\t\t\t input.indexOf(prevSearch) !== 0 ||\n\t\t\t\t settings.bSorted // On resort, the display master needs to be\n\t\t\t\t                  // re-filtered since indexes will have changed\n\t\t\t) {\n\t\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t\t}\n\n\t\t\t// Search the display array\n\t\t\tdisplay = settings.aiDisplay;\n\n\t\t\tfor ( i=0 ; i<display.length ; i++ ) {\n\t\t\t\tif ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\n\t\t\t\t\tfiltered.push( display[i] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsettings.aiDisplay = filtered;\n\t\t}\n\t}\n\n\n\t/**\n\t * Build a regular expression object suitable for searching a table\n\t *  @param {string} sSearch string to search for\n\t *  @param {bool} bRegex treat as a regular expression or not\n\t *  @param {bool} bSmart perform smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n\t *  @returns {RegExp} constructed object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n\t{\n\t\tsearch = regex ?\n\t\t\tsearch :\n\t\t\t_fnEscapeRegex( search );\n\n\t\tif ( smart ) {\n\t\t\t/* For smart filtering we want to allow the search to work regardless of\n\t\t\t * word order. We also want double quoted text to be preserved, so word\n\t\t\t * order is important - a la google. So this is what we want to\n\t\t\t * generate:\n\t\t\t *\n\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n\t\t\t */\n\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n\t\t\t\tif ( word.charAt(0) === '\"' ) {\n\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );\n\t\t\t\t\tword = m ? m[1] : word;\n\t\t\t\t}\n\n\t\t\t\treturn word.replace('\"', '');\n\t\t\t} );\n\n\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n\t\t}\n\n\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );\n\t}\n\n\n\t/**\n\t * Escape a string such that it can be used in a regular expression\n\t *  @param {string} sVal string to escape\n\t *  @returns {string} escaped string\n\t *  @memberof DataTable#oApi\n\t */\n\tvar _fnEscapeRegex = DataTable.util.escapeRegex;\n\n\tvar __filter_div = $('<div>')[0];\n\tvar __filter_div_textContent = __filter_div.textContent !== undefined;\n\n\t// Update the filtering data for each row if needed (by invalidation or first run)\n\tfunction _fnFilterData ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar column;\n\t\tvar i, j, ien, jen, filterData, cellData, row;\n\t\tvar fomatters = DataTable.ext.type.search;\n\t\tvar wasInvalidated = false;\n\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\n\t\t\tif ( ! row._aFilterData ) {\n\t\t\t\tfilterData = [];\n\n\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {\n\t\t\t\t\tcolumn = columns[j];\n\n\t\t\t\t\tif ( column.bSearchable ) {\n\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );\n\n\t\t\t\t\t\tif ( fomatters[ column.sType ] ) {\n\t\t\t\t\t\t\tcellData = fomatters[ column.sType ]( cellData );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this\n\t\t\t\t\t\t// should be altered to also allow strict type checking.\n\t\t\t\t\t\tif ( cellData === null ) {\n\t\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {\n\t\t\t\t\t\t\tcellData = cellData.toString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t}\n\n\t\t\t\t\t// If it looks like there is an HTML entity in the string,\n\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that\n\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM\n\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode\n\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n\t\t\t\t\t\t__filter_div.innerHTML = cellData;\n\t\t\t\t\t\tcellData = __filter_div_textContent ?\n\t\t\t\t\t\t\t__filter_div.textContent :\n\t\t\t\t\t\t\t__filter_div.innerText;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cellData.replace ) {\n\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n]/g, '');\n\t\t\t\t\t}\n\n\t\t\t\t\tfilterData.push( cellData );\n\t\t\t\t}\n\n\t\t\t\trow._aFilterData = filterData;\n\t\t\t\trow._sFilterRow = filterData.join('  ');\n\t\t\t\twasInvalidated = true;\n\t\t\t}\n\t\t}\n\n\t\treturn wasInvalidated;\n\t}\n\n\n\t/**\n\t * Convert from the internal Hungarian notation to camelCase for external\n\t * interaction\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToCamel ( obj )\n\t{\n\t\treturn {\n\t\t\tsearch:          obj.sSearch,\n\t\t\tsmart:           obj.bSmart,\n\t\t\tregex:           obj.bRegex,\n\t\t\tcaseInsensitive: obj.bCaseInsensitive\n\t\t};\n\t}\n\n\n\n\t/**\n\t * Convert from camelCase notation to the internal Hungarian. We could use the\n\t * Hungarian convert function here, but this is cleaner\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToHung ( obj )\n\t{\n\t\treturn {\n\t\t\tsSearch:          obj.search,\n\t\t\tbSmart:           obj.smart,\n\t\t\tbRegex:           obj.regex,\n\t\t\tbCaseInsensitive: obj.caseInsensitive\n\t\t};\n\t}\n\n\t/**\n\t * Generate the node required for the info display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Information element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlInfo ( settings )\n\t{\n\t\tvar\n\t\t\ttid = settings.sTableId,\n\t\t\tnodes = settings.aanFeatures.i,\n\t\t\tn = $('<div/>', {\n\t\t\t\t'class': settings.oClasses.sInfo,\n\t\t\t\t'id': ! nodes ? tid+'_info' : null\n\t\t\t} );\n\n\t\tif ( ! nodes ) {\n\t\t\t// Update display on each draw\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": _fnUpdateInfo,\n\t\t\t\t\"sName\": \"information\"\n\t\t\t} );\n\n\t\t\tn\n\t\t\t\t.attr( 'role', 'status' )\n\t\t\t\t.attr( 'aria-live', 'polite' );\n\n\t\t\t// Table is described by our info div\n\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n\t\t}\n\n\t\treturn n[0];\n\t}\n\n\n\t/**\n\t * Update the information elements in the display\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnUpdateInfo ( settings )\n\t{\n\t\t/* Show information about the table */\n\t\tvar nodes = settings.aanFeatures.i;\n\t\tif ( nodes.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar\n\t\t\tlang  = settings.oLanguage,\n\t\t\tstart = settings._iDisplayStart+1,\n\t\t\tend   = settings.fnDisplayEnd(),\n\t\t\tmax   = settings.fnRecordsTotal(),\n\t\t\ttotal = settings.fnRecordsDisplay(),\n\t\t\tout   = total ?\n\t\t\t\tlang.sInfo :\n\t\t\t\tlang.sInfoEmpty;\n\n\t\tif ( total !== max ) {\n\t\t\t/* Record set after filtering */\n\t\t\tout += ' ' + lang.sInfoFiltered;\n\t\t}\n\n\t\t// Convert the macros\n\t\tout += lang.sInfoPostFix;\n\t\tout = _fnInfoMacros( settings, out );\n\n\t\tvar callback = lang.fnInfoCallback;\n\t\tif ( callback !== null ) {\n\t\t\tout = callback.call( settings.oInstance,\n\t\t\t\tsettings, start, end, max, total, out\n\t\t\t);\n\t\t}\n\n\t\t$(nodes).html( out );\n\t}\n\n\n\tfunction _fnInfoMacros ( settings, str )\n\t{\n\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n\t\t// internally\n\t\tvar\n\t\t\tformatter  = settings.fnFormatNumber,\n\t\t\tstart      = settings._iDisplayStart+1,\n\t\t\tlen        = settings._iDisplayLength,\n\t\t\tvis        = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\n\t\treturn str.\n\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).\n\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n\t}\n\n\n\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitialise ( settings )\n\t{\n\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;\n\t\tvar columns = settings.aoColumns, column;\n\t\tvar features = settings.oFeatures;\n\t\tvar deferLoading = settings.bDeferLoading; // value modified by the draw\n\n\t\t/* Ensure that the table data is fully initialised */\n\t\tif ( ! settings.bInitialised ) {\n\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Show the display HTML options */\n\t\t_fnAddOptionsHtml( settings );\n\n\t\t/* Build and draw the header / footer for the table */\n\t\t_fnBuildHead( settings );\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\n\t\t/* Okay to show that something is going on now */\n\t\t_fnProcessingDisplay( settings, true );\n\n\t\t/* Calculate sizes for columns */\n\t\tif ( features.bAutoWidth ) {\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t}\n\n\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n\t\t\tcolumn = columns[i];\n\n\t\t\tif ( column.sWidth ) {\n\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );\n\t\t\t}\n\t\t}\n\n\t\t_fnCallbackFire( settings, null, 'preInit', [settings] );\n\n\t\t// If there is default sorting required - let's do it. The sort function\n\t\t// will do the drawing for us. Otherwise we draw the table regardless of the\n\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing\n\t\t// data (show 'loading' message possibly)\n\t\t_fnReDraw( settings );\n\n\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw\n\t\tvar dataSrc = _fnDataSource( settings );\n\t\tif ( dataSrc != 'ssp' || deferLoading ) {\n\t\t\t// if there is an ajax source load the data\n\t\t\tif ( dataSrc == 'ajax' ) {\n\t\t\t\t_fnBuildAjax( settings, [], function(json) {\n\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );\n\n\t\t\t\t\t// Got the data - add it to the table\n\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( settings, aData[i] );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reset the init display for cookie saving. We've already done\n\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make\n\t\t\t\t\t// it appear 'fresh'\n\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;\n\n\t\t\t\t\t_fnReDraw( settings );\n\n\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t_fnInitComplete( settings, json );\n\t\t\t\t}, settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t_fnInitComplete( settings );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n\t *    with client-side processing (optional)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitComplete ( settings, json )\n\t{\n\t\tsettings._bInitComplete = true;\n\n\t\t// When data was added after the initialisation (data or Ajax) we need to\n\t\t// calculate the column sizing\n\t\tif ( json || settings.oInit.aaData ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}\n\n\t\t_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\n\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n\t}\n\n\n\tfunction _fnLengthChange ( settings, val )\n\t{\n\t\tvar len = parseInt( val, 10 );\n\t\tsettings._iDisplayLength = len;\n\n\t\t_fnLengthOverflow( settings );\n\n\t\t// Fire length change event\n\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );\n\t}\n\n\n\t/**\n\t * Generate the node required for user display length changing\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Display length feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlLength ( settings )\n\t{\n\t\tvar\n\t\t\tclasses  = settings.oClasses,\n\t\t\ttableId  = settings.sTableId,\n\t\t\tmenu     = settings.aLengthMenu,\n\t\t\td2       = $.isArray( menu[0] ),\n\t\t\tlengths  = d2 ? menu[0] : menu,\n\t\t\tlanguage = d2 ? menu[1] : menu;\n\n\t\tvar select = $('<select/>', {\n\t\t\t'name':          tableId+'_length',\n\t\t\t'aria-controls': tableId,\n\t\t\t'class':         classes.sLengthSelect\n\t\t} );\n\n\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n\t\t\tselect[0][ i ] = new Option( language[i], lengths[i] );\n\t\t}\n\n\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );\n\t\tif ( ! settings.aanFeatures.l ) {\n\t\t\tdiv[0].id = tableId+'_length';\n\t\t}\n\n\t\tdiv.children().append(\n\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n\t\t);\n\n\t\t// Can't use `select` variable as user might provide their own and the\n\t\t// reference is broken by the use of outerHTML\n\t\t$('select', div)\n\t\t\t.val( settings._iDisplayLength )\n\t\t\t.on( 'change.DT', function(e) {\n\t\t\t\t_fnLengthChange( settings, $(this).val() );\n\t\t\t\t_fnDraw( settings );\n\t\t\t} );\n\n\t\t// Update node value whenever anything changes the table's length\n\t\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t$('select', div).val( len );\n\t\t\t}\n\t\t} );\n\n\t\treturn div[0];\n\t}\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Note that most of the paging logic is done in\n\t * DataTable.ext.pager\n\t */\n\n\t/**\n\t * Generate the node required for default pagination\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Pagination feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlPaginate ( settings )\n\t{\n\t\tvar\n\t\t\ttype   = settings.sPaginationType,\n\t\t\tplugin = DataTable.ext.pager[ type ],\n\t\t\tmodern = typeof plugin === 'function',\n\t\t\tredraw = function( settings ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t},\n\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n\t\t\tfeatures = settings.aanFeatures;\n\n\t\tif ( ! modern ) {\n\t\t\tplugin.fnInit( settings, node, redraw );\n\t\t}\n\n\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */\n\t\tif ( ! features.p )\n\t\t{\n\t\t\tnode.id = settings.sTableId+'_paginate';\n\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": function( settings ) {\n\t\t\t\t\tif ( modern ) {\n\t\t\t\t\t\tvar\n\t\t\t\t\t\t\tstart      = settings._iDisplayStart,\n\t\t\t\t\t\t\tlen        = settings._iDisplayLength,\n\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\t\t\t\t\tall        = len === -1,\n\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),\n\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\t\t\t\tbuttons = plugin(page, pages),\n\t\t\t\t\t\t\ti, ien;\n\n\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(\n\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sName\": \"pagination\"\n\t\t\t} );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\n\t/**\n\t * Alter the display settings to change the page\n\t *  @param {object} settings DataTables settings object\n\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n\t *    \"next\" or \"last\" or page number to jump to (integer)\n\t *  @param [bool] redraw Automatically draw the update or not\n\t *  @returns {bool} true page has changed, false - no change\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnPageChange ( settings, action, redraw )\n\t{\n\t\tvar\n\t\t\tstart     = settings._iDisplayStart,\n\t\t\tlen       = settings._iDisplayLength,\n\t\t\trecords   = settings.fnRecordsDisplay();\n\n\t\tif ( records === 0 || len === -1 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( typeof action === \"number\" )\n\t\t{\n\t\t\tstart = action * len;\n\n\t\t\tif ( start > records )\n\t\t\t{\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"first\" )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( action == \"previous\" )\n\t\t{\n\t\t\tstart = len >= 0 ?\n\t\t\t\tstart - len :\n\t\t\t\t0;\n\n\t\t\tif ( start < 0 )\n\t\t\t{\n\t\t\t  start = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"next\" )\n\t\t{\n\t\t\tif ( start + len < records )\n\t\t\t{\n\t\t\t\tstart += len;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"last\" )\n\t\t{\n\t\t\tstart = Math.floor( (records-1) / len) * len;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n\t\t}\n\n\t\tvar changed = settings._iDisplayStart !== start;\n\t\tsettings._iDisplayStart = start;\n\n\t\tif ( changed ) {\n\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );\n\n\t\t\tif ( redraw ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\n\n\t/**\n\t * Generate the node required for the processing node\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Processing element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlProcessing ( settings )\n\t{\n\t\treturn $('<div/>', {\n\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n\t\t\t\t'class': settings.oClasses.sProcessing\n\t\t\t} )\n\t\t\t.html( settings.oLanguage.sProcessing )\n\t\t\t.insertBefore( settings.nTable )[0];\n\t}\n\n\n\t/**\n\t * Display or hide the processing indicator\n\t *  @param {object} settings dataTables settings object\n\t *  @param {bool} show Show the processing indicator (true) or not (false)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnProcessingDisplay ( settings, show )\n\t{\n\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n\t\t}\n\n\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );\n\t}\n\n\t/**\n\t * Add any control elements for the table - specifically scrolling\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Node to add to the DOM\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlTable ( settings )\n\t{\n\t\tvar table = $(settings.nTable);\n\n\t\t// Add the ARIA grid role to the table\n\t\ttable.attr( 'role', 'grid' );\n\n\t\t// Scrolling from here on in\n\t\tvar scroll = settings.oScroll;\n\n\t\tif ( scroll.sX === '' && scroll.sY === '' ) {\n\t\t\treturn settings.nTable;\n\t\t}\n\n\t\tvar scrollX = scroll.sX;\n\t\tvar scrollY = scroll.sY;\n\t\tvar classes = settings.oClasses;\n\t\tvar caption = table.children('caption');\n\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;\n\t\tvar headerClone = $( table[0].cloneNode(false) );\n\t\tvar footerClone = $( table[0].cloneNode(false) );\n\t\tvar footer = table.children('tfoot');\n\t\tvar _div = '<div/>';\n\t\tvar size = function ( s ) {\n\t\t\treturn !s ? null : _fnStringToCss( s );\n\t\t};\n\n\t\tif ( ! footer.length ) {\n\t\t\tfooter = null;\n\t\t}\n\n\t\t/*\n\t\t * The HTML structure that we want to generate in this function is:\n\t\t *  div - scroller\n\t\t *    div - scroll head\n\t\t *      div - scroll head inner\n\t\t *        table - scroll head table\n\t\t *          thead - thead\n\t\t *    div - scroll body\n\t\t *      table - table (master table)\n\t\t *        thead - thead clone for sizing\n\t\t *        tbody - tbody\n\t\t *    div - scroll foot\n\t\t *      div - scroll foot inner\n\t\t *        table - scroll foot table\n\t\t *          tfoot - tfoot\n\t\t */\n\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollHead } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t'box-sizing': 'content-box',\n\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\theaderClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('thead')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollBody } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\twidth: size( scrollX )\n\t\t\t\t\t} )\n\t\t\t\t\t.append( table )\n\t\t\t);\n\n\t\tif ( footer ) {\n\t\t\tscroller.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\tfooterClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tvar children = scroller.children();\n\t\tvar scrollHead = children[0];\n\t\tvar scrollBody = children[1];\n\t\tvar scrollFoot = footer ? children[2] : null;\n\n\t\t// When the body is scrolled, then we also want to scroll the headers\n\t\tif ( scrollX ) {\n\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {\n\t\t\t\tvar scrollLeft = this.scrollLeft;\n\n\t\t\t\tscrollHead.scrollLeft = scrollLeft;\n\n\t\t\t\tif ( footer ) {\n\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t$(scrollBody).css(\n\t\t\tscrollY && scroll.bCollapse ? 'max-height' : 'height',\n\t\t\tscrollY\n\t\t);\n\n\t\tsettings.nScrollHead = scrollHead;\n\t\tsettings.nScrollBody = scrollBody;\n\t\tsettings.nScrollFoot = scrollFoot;\n\n\t\t// On redraw - align columns\n\t\tsettings.aoDrawCallback.push( {\n\t\t\t\"fn\": _fnScrollDraw,\n\t\t\t\"sName\": \"scrolling\"\n\t\t} );\n\n\t\treturn scroller[0];\n\t}\n\n\n\n\t/**\n\t * Update the header, footer and body tables for resizing - i.e. column\n\t * alignment.\n\t *\n\t * Welcome to the most horrible function DataTables. The process that this\n\t * function follows is basically:\n\t *   1. Re-create the table inside the scrolling div\n\t *   2. Take live measurements from the DOM\n\t *   3. Apply the measurements to align the columns\n\t *   4. Clean up\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnScrollDraw ( settings )\n\t{\n\t\t// Given that this is such a monster function, a lot of variables are use\n\t\t// to try and keep the minimised size as small as possible\n\t\tvar\n\t\t\tscroll         = settings.oScroll,\n\t\t\tscrollX        = scroll.sX,\n\t\t\tscrollXInner   = scroll.sXInner,\n\t\t\tscrollY        = scroll.sY,\n\t\t\tbarWidth       = scroll.iBarWidth,\n\t\t\tdivHeader      = $(settings.nScrollHead),\n\t\t\tdivHeaderStyle = divHeader[0].style,\n\t\t\tdivHeaderInner = divHeader.children('div'),\n\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,\n\t\t\tdivHeaderTable = divHeaderInner.children('table'),\n\t\t\tdivBodyEl      = settings.nScrollBody,\n\t\t\tdivBody        = $(divBodyEl),\n\t\t\tdivBodyStyle   = divBodyEl.style,\n\t\t\tdivFooter      = $(settings.nScrollFoot),\n\t\t\tdivFooterInner = divFooter.children('div'),\n\t\t\tdivFooterTable = divFooterInner.children('table'),\n\t\t\theader         = $(settings.nTHead),\n\t\t\ttable          = $(settings.nTable),\n\t\t\ttableEl        = table[0],\n\t\t\ttableStyle     = tableEl.style,\n\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,\n\t\t\tbrowser        = settings.oBrowser,\n\t\t\tie67           = browser.bScrollOversize,\n\t\t\tdtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n\t\t\theaderTrgEls, footerTrgEls,\n\t\t\theaderSrcEls, footerSrcEls,\n\t\t\theaderCopy, footerCopy,\n\t\t\theaderWidths=[], footerWidths=[],\n\t\t\theaderContent=[], footerContent=[],\n\t\t\tidx, correction, sanityWidth,\n\t\t\tzeroOut = function(nSizer) {\n\t\t\t\tvar style = nSizer.style;\n\t\t\t\tstyle.paddingTop = \"0\";\n\t\t\t\tstyle.paddingBottom = \"0\";\n\t\t\t\tstyle.borderTopWidth = \"0\";\n\t\t\t\tstyle.borderBottomWidth = \"0\";\n\t\t\t\tstyle.height = 0;\n\t\t\t};\n\n\t\t// If the scrollbar visibility has changed from the last draw, we need to\n\t\t// adjust the column sizes as the table width will have changed to account\n\t\t// for the scrollbar\n\t\tvar scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n\t\tif ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n\t\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t\treturn; // adjust column sizing will call this function again\n\t\t}\n\t\telse {\n\t\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t}\n\n\t\t/*\n\t\t * 1. Re-create the table inside the scrolling div\n\t\t */\n\n\t\t// Remove the old minimised thead and tfoot elements in the inner table\n\t\ttable.children('thead, tfoot').remove();\n\n\t\tif ( footer ) {\n\t\t\tfooterCopy = footer.clone().prependTo( table );\n\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\t\t\tfooterSrcEls = footerCopy.find('tr');\n\t\t}\n\n\t\t// Clone the current header and footer elements and then place it into the inner table\n\t\theaderCopy = header.clone().prependTo( table );\n\t\theaderTrgEls = header.find('tr'); // original header is in its own table\n\t\theaderSrcEls = headerCopy.find('tr');\n\t\theaderCopy.find('th, td').removeAttr('tabindex');\n\n\n\t\t/*\n\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\n\t\t */\n\n\t\t// Remove old sizing and apply the calculated column widths\n\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the\n\t\t// calculated sizes to this header\n\t\tif ( ! scrollX )\n\t\t{\n\t\t\tdivBodyStyle.width = '100%';\n\t\t\tdivHeader[0].style.width = '100%';\n\t\t}\n\n\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n\t\t\tidx = _fnVisibleToColumnIndex( settings, i );\n\t\t\tel.style.width = settings.aoColumns[idx].sWidth;\n\t\t} );\n\n\t\tif ( footer ) {\n\t\t\t_fnApplyToChildren( function(n) {\n\t\t\t\tn.style.width = \"\";\n\t\t\t}, footerSrcEls );\n\t\t}\n\n\t\t// Size the table as a whole\n\t\tsanityWidth = table.outerWidth();\n\t\tif ( scrollX === \"\" ) {\n\t\t\t// No x scrolling\n\t\t\ttableStyle.width = \"100%\";\n\n\t\t\t// IE7 will make the width of the table when 100% include the scrollbar\n\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this\n\t\t\t// into account.\n\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n\t\t\t}\n\n\t\t\t// Recalculate the sanity width\n\t\t\tsanityWidth = table.outerWidth();\n\t\t}\n\t\telse if ( scrollXInner !== \"\" ) {\n\t\t\t// legacy x scroll inner has been given - use it\n\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);\n\n\t\t\t// Recalculate the sanity width\n\t\t\tsanityWidth = table.outerWidth();\n\t\t}\n\n\t\t// Hidden header should have zero height, so remove padding and borders. Then\n\t\t// set the width based on the real headers\n\n\t\t// Apply all styles in one pass\n\t\t_fnApplyToChildren( zeroOut, headerSrcEls );\n\n\t\t// Read all widths in next pass\n\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\theaderContent.push( nSizer.innerHTML );\n\t\t\theaderWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t}, headerSrcEls );\n\n\t\t// Apply all widths in final pass\n\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t// Only apply widths to the DataTables detected header cells - this\n\t\t\t// prevents complex headers from having contradictory sizes applied\n\t\t\tif ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\n\t\t\t\tnToSize.style.width = headerWidths[i];\n\t\t\t}\n\t\t}, headerTrgEls );\n\n\t\t$(headerSrcEls).height(0);\n\n\t\t/* Same again with the footer if we have one */\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );\n\n\t\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\t\tfooterContent.push( nSizer.innerHTML );\n\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t\t}, footerSrcEls );\n\n\t\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t\tnToSize.style.width = footerWidths[i];\n\t\t\t}, footerTrgEls );\n\n\t\t\t$(footerSrcEls).height(0);\n\t\t}\n\n\n\t\t/*\n\t\t * 3. Apply the measurements\n\t\t */\n\n\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep\n\t\t// the content of the cell so that the width applied to the header and body\n\t\t// both match, but we want to hide it completely. We want to also fix their\n\t\t// width to what they currently are\n\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\n\t\t\tnSizer.style.width = headerWidths[i];\n\t\t}, headerSrcEls );\n\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+footerContent[i]+'</div>';\n\t\t\t\tnSizer.style.width = footerWidths[i];\n\t\t\t}, footerSrcEls );\n\t\t}\n\n\t\t// Sanity check that the table is of a sensible width. If not then we are going to get\n\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width\n\t\tif ( table.outerWidth() < sanityWidth )\n\t\t{\n\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */\n\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?\n\t\t\t\t\tsanityWidth+barWidth :\n\t\t\t\t\tsanityWidth;\n\n\t\t\t// IE6/7 are a law unto themselves...\n\t\t\tif ( ie67 && (divBodyEl.scrollHeight >\n\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );\n\t\t\t}\n\n\t\t\t// And give the user a warning that we've stopped the table getting too small\n\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {\n\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcorrection = '100%';\n\t\t}\n\n\t\t// Apply to the container elements\n\t\tdivBodyStyle.width = _fnStringToCss( correction );\n\t\tdivHeaderStyle.width = _fnStringToCss( correction );\n\n\t\tif ( footer ) {\n\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );\n\t\t}\n\n\n\t\t/*\n\t\t * 4. Clean up\n\t\t */\n\t\tif ( ! scrollY ) {\n\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\n\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\n\t\t\t */\n\t\t\tif ( ie67 ) {\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n\t\t\t}\n\t\t}\n\n\t\t/* Finally set the width's of the header and footer tables */\n\t\tvar iOuterWidth = table.outerWidth();\n\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n\n\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to\n\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\n\n\t\tif ( footer ) {\n\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\t}\n\n\t\t// Correct DOM ordering for colgroup - comes before the thead\n\t\ttable.children('colgroup').insertBefore( table.children('thead') );\n\n\t\t/* Adjust the position of the header in case we loose the y-scrollbar */\n\t\tdivBody.scroll();\n\n\t\t// If sorting or filtering has occurred, jump the scrolling back to the top\n\t\t// only if we aren't holding the position\n\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n\t\t\tdivBodyEl.scrollTop = 0;\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Apply a given function to the display child nodes of an element array (typically\n\t * TD children of TR rows\n\t *  @param {function} fn Method to apply to the objects\n\t *  @param array {nodes} an1 List of elements to look through for display children\n\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyToChildren( fn, an1, an2 )\n\t{\n\t\tvar index=0, i=0, iLen=an1.length;\n\t\tvar nNode1, nNode2;\n\n\t\twhile ( i < iLen ) {\n\t\t\tnNode1 = an1[i].firstChild;\n\t\t\tnNode2 = an2 ? an2[i].firstChild : null;\n\n\t\t\twhile ( nNode1 ) {\n\t\t\t\tif ( nNode1.nodeType === 1 ) {\n\t\t\t\t\tif ( an2 ) {\n\t\t\t\t\t\tfn( nNode1, nNode2, index );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfn( nNode1, index );\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\n\t\t\t\tnNode1 = nNode1.nextSibling;\n\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n\n\n\n\tvar __re_html_remove = /<.*?>/g;\n\n\n\t/**\n\t * Calculate the width of columns for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCalculateColumnWidths ( oSettings )\n\t{\n\t\tvar\n\t\t\ttable = oSettings.nTable,\n\t\t\tcolumns = oSettings.aoColumns,\n\t\t\tscroll = oSettings.oScroll,\n\t\t\tscrollY = scroll.sY,\n\t\t\tscrollX = scroll.sX,\n\t\t\tscrollXInner = scroll.sXInner,\n\t\t\tcolumnCount = columns.length,\n\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n\t\t\theaderCells = $('th', oSettings.nTHead),\n\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element\n\t\t\ttableContainer = table.parentNode,\n\t\t\tuserInputs = false,\n\t\t\ti, column, columnIdx, width, outerWidth,\n\t\t\tbrowser = oSettings.oBrowser,\n\t\t\tie67 = browser.bScrollOversize;\n\n\t\tvar styleWidth = table.style.width;\n\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n\t\t\ttableWidthAttr = styleWidth;\n\t\t}\n\n\t\t/* Convert any user input sizes into pixel sizes */\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\tcolumn = columns[ visibleColumns[i] ];\n\n\t\t\tif ( column.sWidth !== null ) {\n\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n\n\t\t\t\tuserInputs = true;\n\t\t\t}\n\t\t}\n\n\t\t/* If the number of columns in the DOM equals the number that we have to\n\t\t * process in DataTables, then we can use the offsets that are created by\n\t\t * the web- browser. No custom sizes can be set in order for this to happen,\n\t\t * nor scrolling used\n\t\t */\n\t\tif ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n\t\t     columnCount == _fnVisbleColumns( oSettings ) &&\n\t\t     columnCount == headerCells.length\n\t\t) {\n\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\t\tvar colIdx = _fnVisibleToColumnIndex( oSettings, i );\n\n\t\t\t\tif ( colIdx !== null ) {\n\t\t\t\t\tcolumns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise construct a single row, worst case, table with the widest\n\t\t\t// node in the data, assign any user defined widths, then insert it into\n\t\t\t// the DOM and allow the browser to do all the hard work of calculating\n\t\t\t// table widths\n\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n\t\t\t\t.css( 'visibility', 'hidden' )\n\t\t\t\t.removeAttr( 'id' );\n\n\t\t\t// Clean up the table body\n\t\t\ttmpTable.find('tbody tr').remove();\n\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n\n\t\t\t// Clone the table header and footer - we can't use the header / footer\n\t\t\t// from the cloned table, since if scrolling is active, the table's\n\t\t\t// real header and footer are contained in different table tags\n\t\t\ttmpTable.find('thead, tfoot').remove();\n\t\t\ttmpTable\n\t\t\t\t.append( $(oSettings.nTHead).clone() )\n\t\t\t\t.append( $(oSettings.nTFoot).clone() );\n\n\t\t\t// Remove any assigned widths from the footer (from scrolling)\n\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');\n\n\t\t\t// Apply custom sizing to the cloned header\n\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];\n\n\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :\n\t\t\t\t\t'';\n\n\t\t\t\t// For scrollX we need to force the column width otherwise the\n\t\t\t\t// browser will collapse it. If this width is smaller than the\n\t\t\t\t// width the column requires, then it will have no effect\n\t\t\t\tif ( column.sWidthOrig && scrollX ) {\n\t\t\t\t\t$( headerCells[i] ).append( $('<div/>').css( {\n\t\t\t\t\t\twidth: column.sWidthOrig,\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\theight: 1\n\t\t\t\t\t} ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Find the widest cell for each column and put it into the table\n\t\t\tif ( oSettings.aoData.length ) {\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\t\tcolumnIdx = visibleColumns[i];\n\t\t\t\t\tcolumn = columns[ columnIdx ];\n\n\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )\n\t\t\t\t\t\t.clone( false )\n\t\t\t\t\t\t.append( column.sContentPadding )\n\t\t\t\t\t\t.appendTo( tr );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Tidy the temporary table - remove name attributes so there aren't\n\t\t\t// duplicated in the dom (radio elements for example)\n\t\t\t$('[name]', tmpTable).removeAttr('name');\n\n\t\t\t// Table has been built, attach to the document so we can work with it.\n\t\t\t// A holding element is used, positioned at the top of the container\n\t\t\t// with minimal height, so it has no effect on if the container scrolls\n\t\t\t// or not. Otherwise it might trigger scrolling when it actually isn't\n\t\t\t// needed\n\t\t\tvar holder = $('<div/>').css( scrollX || scrollY ?\n\t\t\t\t\t{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\theight: 1,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t\t} :\n\t\t\t\t\t{}\n\t\t\t\t)\n\t\t\t\t.append( tmpTable )\n\t\t\t\t.appendTo( tableContainer );\n\n\t\t\t// When scrolling (X or Y) we want to set the width of the table as\n\t\t\t// appropriate. However, when not scrolling leave the table width as it\n\t\t\t// is. This results in slightly different, but I think correct behaviour\n\t\t\tif ( scrollX && scrollXInner ) {\n\t\t\t\ttmpTable.width( scrollXInner );\n\t\t\t}\n\t\t\telse if ( scrollX ) {\n\t\t\t\ttmpTable.css( 'width', 'auto' );\n\t\t\t\ttmpTable.removeAttr('width');\n\n\t\t\t\t// If there is no width attribute or style, then allow the table to\n\t\t\t\t// collapse\n\t\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n\t\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( scrollY ) {\n\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t}\n\t\t\telse if ( tableWidthAttr ) {\n\t\t\t\ttmpTable.width( tableWidthAttr );\n\t\t\t}\n\n\t\t\t// Get the width of each column in the constructed table - we need to\n\t\t\t// know the inner width (so it can be assigned to the other table's\n\t\t\t// cells) and the outer width so we can calculate the full width of the\n\t\t\t// table. This is safe since DataTables requires a unique cell for each\n\t\t\t// column, but if ever a header can span multiple columns, this will\n\t\t\t// need to be modified.\n\t\t\tvar total = 0;\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tvar cell = $(headerCells[i]);\n\t\t\t\tvar border = cell.outerWidth() - cell.width();\n\n\t\t\t\t// Use getBounding... where possible (not IE8-) because it can give\n\t\t\t\t// sub-pixel accuracy, which we then want to round up!\n\t\t\t\tvar bounding = browser.bBounding ?\n\t\t\t\t\tMath.ceil( headerCells[i].getBoundingClientRect().width ) :\n\t\t\t\t\tcell.outerWidth();\n\n\t\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth\n\t\t\t\t// of the table might not equal the total given here (IE!).\n\t\t\t\ttotal += bounding;\n\n\t\t\t\t// Width for each column to use\n\t\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\n\t\t\t}\n\n\t\t\ttable.style.width = _fnStringToCss( total );\n\n\t\t\t// Finished with the table - ditch it\n\t\t\tholder.remove();\n\t\t}\n\n\t\t// If there is a width attr, we want to attach an event listener which\n\t\t// allows the table sizing to automatically adjust when the window is\n\t\t// resized. Use the width attr rather than CSS, since we can't know if the\n\t\t// CSS is a relative value or absolute - DOM read is always px.\n\t\tif ( tableWidthAttr ) {\n\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );\n\t\t}\n\n\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n\t\t\tvar bindResize = function () {\n\t\t\t\t$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n\t\t\t\t\t_fnAdjustColumnSizing( oSettings );\n\t\t\t\t} ) );\n\t\t\t};\n\n\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.\n\t\t\t// To be removed in 1.11 which drops IE6/7 support\n\t\t\tif ( ie67 ) {\n\t\t\t\tsetTimeout( bindResize, 1000 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbindResize();\n\t\t\t}\n\n\t\t\toSettings._reszEvt = true;\n\t\t}\n\t}\n\n\n\t/**\n\t * Throttle the calls to a function. Arguments and context are maintained for\n\t * the throttled function\n\t *  @param {function} fn Function to be called\n\t *  @param {int} [freq=200] call frequency in mS\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#oApi\n\t */\n\tvar _fnThrottle = DataTable.util.throttle;\n\n\n\t/**\n\t * Convert a CSS unit width to pixels (e.g. 2em)\n\t *  @param {string} width width to be converted\n\t *  @param {node} parent parent to get the with for (required for relative widths) - optional\n\t *  @returns {int} width in pixels\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnConvertToWidth ( width, parent )\n\t{\n\t\tif ( ! width ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar n = $('<div/>')\n\t\t\t.css( 'width', _fnStringToCss( width ) )\n\t\t\t.appendTo( parent || document.body );\n\n\t\tvar val = n[0].offsetWidth;\n\t\tn.remove();\n\n\t\treturn val;\n\t}\n\n\n\t/**\n\t * Get the widest node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {node} widest table node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetWidestNode( settings, colIdx )\n\t{\n\t\tvar idx = _fnGetMaxLenString( settings, colIdx );\n\t\tif ( idx < 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar data = settings.aoData[ idx ];\n\t\treturn ! data.nTr ? // Might not have been created when deferred rendering\n\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n\t\t\tdata.anCells[ colIdx ];\n\t}\n\n\n\t/**\n\t * Get the maximum strlen for each data column\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {string} max string length for each column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetMaxLenString( settings, colIdx )\n\t{\n\t\tvar s, max=-1, maxIdx = -1;\n\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n\t\t\ts = s.replace( __re_html_remove, '' );\n\t\t\ts = s.replace( /&nbsp;/g, ' ' );\n\n\t\t\tif ( s.length > max ) {\n\t\t\t\tmax = s.length;\n\t\t\t\tmaxIdx = i;\n\t\t\t}\n\t\t}\n\n\t\treturn maxIdx;\n\t}\n\n\n\t/**\n\t * Append a CSS unit (only if required) to a string\n\t *  @param {string} value to css-ify\n\t *  @returns {string} value with css unit\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnStringToCss( s )\n\t{\n\t\tif ( s === null ) {\n\t\t\treturn '0px';\n\t\t}\n\n\t\tif ( typeof s == 'number' ) {\n\t\t\treturn s < 0 ?\n\t\t\t\t'0px' :\n\t\t\t\ts+'px';\n\t\t}\n\n\t\t// Check it has a unit character already\n\t\treturn s.match(/\\d$/) ?\n\t\t\ts+'px' :\n\t\t\ts;\n\t}\n\n\n\n\tfunction _fnSortFlatten ( settings )\n\t{\n\t\tvar\n\t\t\ti, iLen, k, kLen,\n\t\t\taSort = [],\n\t\t\taiOrig = [],\n\t\t\taoColumns = settings.aoColumns,\n\t\t\taDataSort, iCol, sType, srcCol,\n\t\t\tfixed = settings.aaSortingFixed,\n\t\t\tfixedObj = $.isPlainObject( fixed ),\n\t\t\tnestedSort = [],\n\t\t\tadd = function ( a ) {\n\t\t\t\tif ( a.length && ! $.isArray( a[0] ) ) {\n\t\t\t\t\t// 1D array\n\t\t\t\t\tnestedSort.push( a );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 2D array\n\t\t\t\t\t$.merge( nestedSort, a );\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Build the sort array, with pre-fix and post-fix options if they have been\n\t\t// specified\n\t\tif ( $.isArray( fixed ) ) {\n\t\t\tadd( fixed );\n\t\t}\n\n\t\tif ( fixedObj && fixed.pre ) {\n\t\t\tadd( fixed.pre );\n\t\t}\n\n\t\tadd( settings.aaSorting );\n\n\t\tif (fixedObj && fixed.post ) {\n\t\t\tadd( fixed.post );\n\t\t}\n\n\t\tfor ( i=0 ; i<nestedSort.length ; i++ )\n\t\t{\n\t\t\tsrcCol = nestedSort[i][0];\n\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;\n\n\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n\t\t\t{\n\t\t\t\tiCol = aDataSort[k];\n\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';\n\n\t\t\t\tif ( nestedSort[i]._idx === undefined ) {\n\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n\t\t\t\t}\n\n\t\t\t\taSort.push( {\n\t\t\t\t\tsrc:       srcCol,\n\t\t\t\t\tcol:       iCol,\n\t\t\t\t\tdir:       nestedSort[i][1],\n\t\t\t\t\tindex:     nestedSort[i]._idx,\n\t\t\t\t\ttype:      sType,\n\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\treturn aSort;\n\t}\n\n\t/**\n\t * Change the order of the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t *  @todo This really needs split up!\n\t */\n\tfunction _fnSort ( oSettings )\n\t{\n\t\tvar\n\t\t\ti, ien, iLen, j, jLen, k, kLen,\n\t\t\tsDataType, nTh,\n\t\t\taiOrig = [],\n\t\t\toExtSort = DataTable.ext.type.order,\n\t\t\taoData = oSettings.aoData,\n\t\t\taoColumns = oSettings.aoColumns,\n\t\t\taDataSort, data, iCol, sType, oSort,\n\t\t\tformatters = 0,\n\t\t\tsortCol,\n\t\t\tdisplayMaster = oSettings.aiDisplayMaster,\n\t\t\taSort;\n\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo Can this be moved into a 'data-ready' handler which is called when\n\t\t//   data is going to be used in the table?\n\t\t_fnColumnTypes( oSettings );\n\n\t\taSort = _fnSortFlatten( oSettings );\n\n\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n\t\t\tsortCol = aSort[i];\n\n\t\t\t// Track if we can use the fast sort algorithm\n\t\t\tif ( sortCol.formatter ) {\n\t\t\t\tformatters++;\n\t\t\t}\n\n\t\t\t// Load the data needed for the sort, for each cell\n\t\t\t_fnSortData( oSettings, sortCol.col );\n\t\t}\n\n\t\t/* No sorting required if server-side or no sorting array */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n\t\t{\n\t\t\t// Create a value - key array of the current row positions such that we can use their\n\t\t\t// current position during the sort, if values match, in order to perform stable sorting\n\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n\t\t\t\taiOrig[ displayMaster[i] ] = i;\n\t\t\t}\n\n\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t\t *  fnLocalSorting = function(a,b){\n\t\t\t *    var iTest;\n\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');\n\t\t\t *      if (iTest !== 0)\n\t\t\t *        return iTest;\n\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\n\t\t\t *    if (iTest !== 0)\n\t\t\t *      return iTest;\n\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t\t *  }\n\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t\t * positions in the original data array to provide a stable sort.\n\t\t\t *\n\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around\n\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting\n\t\t\t * methods which do not have a pre-sort formatting function.\n\t\t\t */\n\t\t\tif ( formatters === aSort.length ) {\n\t\t\t\t// All sort types have formatting functions\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, test, sort,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\n\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)\n\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting\n\t\t\t\t// methods.\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, l, test, sort, fn,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\n\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\n\t\t\t\t\t\ttest = fn( x, y );\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t/* Tell the draw function that we have sorted the data */\n\t\toSettings.bSorted = true;\n\t}\n\n\n\tfunction _fnSortAria ( settings )\n\t{\n\t\tvar label;\n\t\tvar nextSort;\n\t\tvar columns = settings.aoColumns;\n\t\tvar aSort = _fnSortFlatten( settings );\n\t\tvar oAria = settings.oLanguage.oAria;\n\n\t\t// ARIA attributes - need to loop all columns, to update all (removing old\n\t\t// attributes as needed)\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tvar col = columns[i];\n\t\t\tvar asSorting = col.asSorting;\n\t\t\tvar sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n\t\t\tvar th = col.nTh;\n\n\t\t\t// IE7 is throwing an error when setting these properties with jQuery's\n\t\t\t// attr() and removeAttr() methods...\n\t\t\tth.removeAttribute('aria-sort');\n\n\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\t\t\tif ( col.bSortable ) {\n\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {\n\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnextSort = asSorting[0];\n\t\t\t\t}\n\n\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?\n\t\t\t\t\toAria.sSortAscending :\n\t\t\t\t\toAria.sSortDescending\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabel = sTitle;\n\t\t\t}\n\n\t\t\tth.setAttribute('aria-label', label);\n\t\t}\n\t}\n\n\n\t/**\n\t * Function to run on user sort request\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {boolean} [append=false] Append the requested sort to the existing\n\t *    sort if true (i.e. multi-column sort)\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortListener ( settings, colIdx, append, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\tvar sorting = settings.aaSorting;\n\t\tvar asSorting = col.asSorting;\n\t\tvar nextSortIdx;\n\t\tvar next = function ( a, overflow ) {\n\t\t\tvar idx = a._idx;\n\t\t\tif ( idx === undefined ) {\n\t\t\t\tidx = $.inArray( a[1], asSorting );\n\t\t\t}\n\n\t\t\treturn idx+1 < asSorting.length ?\n\t\t\t\tidx+1 :\n\t\t\t\toverflow ?\n\t\t\t\t\tnull :\n\t\t\t\t\t0;\n\t\t};\n\n\t\t// Convert to 2D array if needed\n\t\tif ( typeof sorting[0] === 'number' ) {\n\t\t\tsorting = settings.aaSorting = [ sorting ];\n\t\t}\n\n\t\t// If appending the sort then we are multi-column sorting\n\t\tif ( append && settings.oFeatures.bSortMulti ) {\n\t\t\t// Are we already doing some kind of sort on this column?\n\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n\n\t\t\tif ( sortIdx !== -1 ) {\n\t\t\t\t// Yes, modify the sort\n\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );\n\n\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {\n\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely\n\t\t\t\t}\n\n\t\t\t\tif ( nextSortIdx === null ) {\n\t\t\t\t\tsorting.splice( sortIdx, 1 );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];\n\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No sort on this column yet\n\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );\n\t\t\t\tsorting[sorting.length-1]._idx = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {\n\t\t\t// Single column - already sorting on this column, modify the sort\n\t\t\tnextSortIdx = next( sorting[0] );\n\n\t\t\tsorting.length = 1;\n\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];\n\t\t\tsorting[0]._idx = nextSortIdx;\n\t\t}\n\t\telse {\n\t\t\t// Single column - sort only on this column\n\t\t\tsorting.length = 0;\n\t\t\tsorting.push( [ colIdx, asSorting[0] ] );\n\t\t\tsorting[0]._idx = 0;\n\t\t}\n\n\t\t// Run the sort by calling a full redraw\n\t\t_fnReDraw( settings );\n\n\t\t// callback used for async user interaction\n\t\tif ( typeof callback == 'function' ) {\n\t\t\tcallback( settings );\n\t\t}\n\t}\n\n\n\t/**\n\t * Attach a sort handler (click) to a node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\n\t\t_fnBindAction( attachTo, {}, function (e) {\n\t\t\t/* If the column is not sortable - don't to anything */\n\t\t\tif ( col.bSortable === false ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If processing is enabled use a timeout to allow the processing\n\t\t\t// display to be shown - otherwise to it synchronously\n\t\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t\t_fnProcessingDisplay( settings, true );\n\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\n\t\t\t\t\t// In server-side processing, the draw callback will remove the\n\t\t\t\t\t// processing display\n\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {\n\t\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t}\n\t\t\t\t}, 0 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\t/**\n\t * Set the sorting classes on table's body, Note: it is safe to call this function\n\t * when bSort and bSortClasses are false\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortingClasses( settings )\n\t{\n\t\tvar oldSort = settings.aLastSort;\n\t\tvar sortClass = settings.oClasses.sSortColumn;\n\t\tvar sort = _fnSortFlatten( settings );\n\t\tvar features = settings.oFeatures;\n\t\tvar i, ien, colIdx;\n\n\t\tif ( features.bSort && features.bSortClasses ) {\n\t\t\t// Remove old sorting classes\n\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = oldSort[i].src;\n\n\t\t\t\t// Remove column sorting\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\n\t\t\t// Add new column sorting\n\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = sort[i].src;\n\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\t}\n\n\t\tsettings.aLastSort = sort;\n\t}\n\n\n\t// Get the data to sort a column, be it from cache, fresh (populating the\n\t// cache), or from a sort formatter\n\tfunction _fnSortData( settings, idx )\n\t{\n\t\t// Custom sorting function - provided by the sort data type\n\t\tvar column = settings.aoColumns[ idx ];\n\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];\n\t\tvar customData;\n\n\t\tif ( customSort ) {\n\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,\n\t\t\t\t_fnColumnIndexToVisible( settings, idx )\n\t\t\t);\n\t\t}\n\n\t\t// Use / populate cache\n\t\tvar row, cellData;\n\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\n\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\n\t\t\tif ( ! row._aSortData ) {\n\t\t\t\trow._aSortData = [];\n\t\t\t}\n\n\t\t\tif ( ! row._aSortData[idx] || customSort ) {\n\t\t\t\tcellData = customSort ?\n\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there\n\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );\n\n\t\t\t\trow._aSortData[ idx ] = formatter ?\n\t\t\t\t\tformatter( cellData ) :\n\t\t\t\t\tcellData;\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Save the state of a table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSaveState ( settings )\n\t{\n\t\tif ( !settings.oFeatures.bStateSave || settings.bDestroying )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t/* Store the interesting variables */\n\t\tvar state = {\n\t\t\ttime:    +new Date(),\n\t\t\tstart:   settings._iDisplayStart,\n\t\t\tlength:  settings._iDisplayLength,\n\t\t\torder:   $.extend( true, [], settings.aaSorting ),\n\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),\n\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {\n\t\t\t\treturn {\n\t\t\t\t\tvisible: col.bVisible,\n\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n\t\t\t\t};\n\t\t\t} )\n\t\t};\n\n\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n\n\t\tsettings.oSavedState = state;\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n\t}\n\n\n\t/**\n\t * Attempt to load a saved table state\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oInit DataTables init object so we can override settings\n\t *  @param {function} callback Callback to execute when the state has been loaded\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLoadState ( settings, oInit, callback )\n\t{\n\t\tvar i, ien;\n\t\tvar columns = settings.aoColumns;\n\t\tvar loaded = function ( s ) {\n\t\t\tif ( ! s || ! s.time ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Allow custom and plug-in manipulation functions to alter the saved data set and\n\t\t\t// cancelling of loading by returning false\n\t\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );\n\t\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Reject old data\n\t\t\tvar duration = settings.iStateDuration;\n\t\t\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Number of columns have changed - all bets are off, no restore of settings\n\t\t\tif ( s.columns && columns.length !== s.columns.length ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Store the saved state so it might be accessed at any time\n\t\t\tsettings.oLoadedState = $.extend( true, {}, state );\n\n\t\t\t// Restore key features - todo - for 1.11 this needs to be done by\n\t\t\t// subscribed events\n\t\t\tif ( s.start !== undefined ) {\n\t\t\t\tsettings._iDisplayStart    = s.start;\n\t\t\t\tsettings.iInitDisplayStart = s.start;\n\t\t\t}\n\t\t\tif ( s.length !== undefined ) {\n\t\t\t\tsettings._iDisplayLength   = s.length;\n\t\t\t}\n\n\t\t\t// Order\n\t\t\tif ( s.order !== undefined ) {\n\t\t\t\tsettings.aaSorting = [];\n\t\t\t\t$.each( s.order, function ( i, col ) {\n\t\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?\n\t\t\t\t\t\t[ 0, col[1] ] :\n\t\t\t\t\t\tcol\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Search\n\t\t\tif ( s.search !== undefined ) {\n\t\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\n\t\t\t}\n\n\t\t\t// Columns\n\t\t\t//\n\t\t\tif ( s.columns ) {\n\t\t\t\tfor ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\n\t\t\t\t\tvar col = s.columns[i];\n\n\t\t\t\t\t// Visibility\n\t\t\t\t\tif ( col.visible !== undefined ) {\n\t\t\t\t\t\tcolumns[i].bVisible = col.visible;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Search\n\t\t\t\t\tif ( col.search !== undefined ) {\n\t\t\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );\n\t\t\tcallback();\n\t\t}\n\n\t\tif ( ! settings.oFeatures.bStateSave ) {\n\t\t\tcallback();\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\n\n\t\tif ( state !== undefined ) {\n\t\t\tloaded( state );\n\t\t}\n\t\t// otherwise, wait for the loaded callback to be executed\n\t}\n\n\n\t/**\n\t * Return the settings object for a particular table\n\t *  @param {node} table table we are using as a dataTable\n\t *  @returns {object} Settings object - or null if not found\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSettingsFromNode ( table )\n\t{\n\t\tvar settings = DataTable.settings;\n\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n\n\t\treturn idx !== -1 ?\n\t\t\tsettings[ idx ] :\n\t\t\tnull;\n\t}\n\n\n\t/**\n\t * Log an error message\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} level log error messages, or display them to the user\n\t *  @param {string} msg error message\n\t *  @param {int} tn Technical note id to get more information about the error.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLog( settings, level, msg, tn )\n\t{\n\t\tmsg = 'DataTables warning: '+\n\t\t\t(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n\n\t\tif ( tn ) {\n\t\t\tmsg += '. For more information about this error, please see '+\n\t\t\t'http://datatables.net/tn/'+tn;\n\t\t}\n\n\t\tif ( ! level  ) {\n\t\t\t// Backwards compatibility pre 1.10\n\t\t\tvar ext = DataTable.ext;\n\t\t\tvar type = ext.sErrMode || ext.errMode;\n\n\t\t\tif ( settings ) {\n\t\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n\t\t\t}\n\n\t\t\tif ( type == 'alert' ) {\n\t\t\t\talert( msg );\n\t\t\t}\n\t\t\telse if ( type == 'throw' ) {\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t\telse if ( typeof type == 'function' ) {\n\t\t\t\ttype( settings, tn, msg );\n\t\t\t}\n\t\t}\n\t\telse if ( window.console && console.log ) {\n\t\t\tconsole.log( msg );\n\t\t}\n\t}\n\n\n\t/**\n\t * See if a property is defined on one object, if so assign it to the other object\n\t *  @param {object} ret target object\n\t *  @param {object} src source object\n\t *  @param {string} name property\n\t *  @param {string} [mappedName] name to map too - optional, name used if not given\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnMap( ret, src, name, mappedName )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\t$.each( name, function (i, val) {\n\t\t\t\tif ( $.isArray( val ) ) {\n\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t_fnMap( ret, src, val );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( mappedName === undefined ) {\n\t\t\tmappedName = name;\n\t\t}\n\n\t\tif ( src[name] !== undefined ) {\n\t\t\tret[mappedName] = src[name];\n\t\t}\n\t}\n\n\n\t/**\n\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n\t * shallow copy arrays. The reason we need to do this, is that we don't want to\n\t * deep copy array init values (such as aaSorting) since the dev wouldn't be\n\t * able to override them, but we do want to deep copy arrays.\n\t *  @param {object} out Object to extend\n\t *  @param {object} extender Object from which the properties will be applied to\n\t *      out\n\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n\t *      independent copy with the exception of the `data` or `aaData` parameters\n\t *      if they are present. This is so you can pass in a collection to\n\t *      DataTables and have that used as your data source without breaking the\n\t *      references\n\t *  @returns {object} out Reference, just for convenience - out === the return.\n\t *  @memberof DataTable#oApi\n\t *  @todo This doesn't take account of arrays inside the deep copied objects.\n\t */\n\tfunction _fnExtend( out, extender, breakRefs )\n\t{\n\t\tvar val;\n\n\t\tfor ( var prop in extender ) {\n\t\t\tif ( extender.hasOwnProperty(prop) ) {\n\t\t\t\tval = extender[prop];\n\n\t\t\t\tif ( $.isPlainObject( val ) ) {\n\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {\n\t\t\t\t\t\tout[prop] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, out[prop], val );\n\t\t\t\t}\n\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n\t\t\t\t\tout[prop] = val.slice();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout[prop] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\n\t/**\n\t * Bind an event handers to allow a click or return key to activate the callback.\n\t * This is good for accessibility since a return on the keyboard will have the\n\t * same effect as a click, if the element has focus.\n\t *  @param {element} n Element to bind the action to\n\t *  @param {object} oData Data object to pass to the triggered function\n\t *  @param {function} fn Callback function for when the event is triggered\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBindAction( n, oData, fn )\n\t{\n\t\t$(n)\n\t\t\t.on( 'click.DT', oData, function (e) {\n\t\t\t\t\tn.blur(); // Remove focus outline for mouse users\n\t\t\t\t\tfn(e);\n\t\t\t\t} )\n\t\t\t.on( 'keypress.DT', oData, function (e){\n\t\t\t\t\tif ( e.which === 13 ) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tfn(e);\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t.on( 'selectstart.DT', function () {\n\t\t\t\t\t/* Take the brutal approach to cancelling text selection */\n\t\t\t\t\treturn false;\n\t\t\t\t} );\n\t}\n\n\n\t/**\n\t * Register a callback function. Easily allows a callback function to be added to\n\t * an array store of callback functions that can then all be called together.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n\t *  @param {function} fn Function to be called back\n\t *  @param {string} sName Identifying name for the callback (i.e. a label)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )\n\t{\n\t\tif ( fn )\n\t\t{\n\t\t\toSettings[sStore].push( {\n\t\t\t\t\"fn\": fn,\n\t\t\t\t\"sName\": sName\n\t\t\t} );\n\t\t}\n\t}\n\n\n\t/**\n\t * Fire callback functions and trigger events. Note that the loop over the\n\t * callback array store is done backwards! Further note that you do not want to\n\t * fire off triggers in time sensitive applications (for example cell creation)\n\t * as its slow.\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} callbackArr Name of the array storage for the callbacks in\n\t *      oSettings\n\t *  @param {string} eventName Name of the jQuery custom event to trigger. If\n\t *      null no trigger is fired\n\t *  @param {array} args Array of arguments to pass to the callback function /\n\t *      trigger\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )\n\t{\n\t\tvar ret = [];\n\n\t\tif ( callbackArr ) {\n\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\n\t\t\t\treturn val.fn.apply( settings.oInstance, args );\n\t\t\t} );\n\t\t}\n\n\t\tif ( eventName !== null ) {\n\t\t\tvar e = $.Event( eventName+'.dt' );\n\n\t\t\t$(settings.nTable).trigger( e, args );\n\n\t\t\tret.push( e.result );\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\n\tfunction _fnLengthOverflow ( settings )\n\t{\n\t\tvar\n\t\t\tstart = settings._iDisplayStart,\n\t\t\tend = settings.fnDisplayEnd(),\n\t\t\tlen = settings._iDisplayLength;\n\n\t\t/* If we have space to show extra rows (backing up from the end point - then do so */\n\t\tif ( start >= end )\n\t\t{\n\t\t\tstart = end - len;\n\t\t}\n\n\t\t// Keep the start record on the current page\n\t\tstart -= (start % len);\n\n\t\tif ( len === -1 || start < 0 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\n\t\tsettings._iDisplayStart = start;\n\t}\n\n\n\tfunction _fnRenderer( settings, type )\n\t{\n\t\tvar renderer = settings.renderer;\n\t\tvar host = DataTable.ext.renderer[type];\n\n\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {\n\t\t\t// Specific renderer for this type. If available use it, otherwise use\n\t\t\t// the default.\n\t\t\treturn host[renderer[type]] || host._;\n\t\t}\n\t\telse if ( typeof renderer === 'string' ) {\n\t\t\t// Common renderer - if there is one available for this type use it,\n\t\t\t// otherwise use the default\n\t\t\treturn host[renderer] || host._;\n\t\t}\n\n\t\t// Use the default\n\t\treturn host._;\n\t}\n\n\n\t/**\n\t * Detect the data source being used for the table. Used to simplify the code\n\t * a little (ajax) and to make it compress a little smaller.\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {string} Data source\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDataSource ( settings )\n\t{\n\t\tif ( settings.oFeatures.bServerSide ) {\n\t\t\treturn 'ssp';\n\t\t}\n\t\telse if ( settings.ajax || settings.sAjaxSource ) {\n\t\t\treturn 'ajax';\n\t\t}\n\t\treturn 'dom';\n\t}\n\n\n\n\n\t/**\n\t * Computed structure of the DataTables API, defined by the options passed to\n\t * `DataTable.Api.register()` when building the API.\n\t *\n\t * The structure is built in order to speed creation and extension of the Api\n\t * objects since the extensions are effectively pre-parsed.\n\t *\n\t * The array is an array of objects with the following structure, where this\n\t * base array represents the Api prototype base:\n\t *\n\t *     [\n\t *       {\n\t *         name:      'data'                -- string   - Property name\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t *       },\n\t *       {\n\t *         name:     'row'\n\t *         val:       {},\n\t *         methodExt: [ ... ],\n\t *         propExt:   [\n\t *           {\n\t *             name:      'data'\n\t *             val:       function () {},\n\t *             methodExt: [ ... ],\n\t *             propExt:   [ ... ]\n\t *           },\n\t *           ...\n\t *         ]\n\t *       }\n\t *     ]\n\t *\n\t * @type {Array}\n\t * @ignore\n\t */\n\tvar __apiStruct = [];\n\n\n\t/**\n\t * `Array.prototype` reference.\n\t *\n\t * @type object\n\t * @ignore\n\t */\n\tvar __arrayProto = Array.prototype;\n\n\n\t/**\n\t * Abstraction for `context` parameter of the `Api` constructor to allow it to\n\t * take several different forms for ease of use.\n\t *\n\t * Each of the input parameter types will be converted to a DataTables settings\n\t * object where possible.\n\t *\n\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n\t *   of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t *   * `DataTables.Api` - API instance\n\t * @return {array|null} Matching DataTables settings objects. `null` or\n\t *   `undefined` is returned if no matching DataTable is found.\n\t * @ignore\n\t */\n\tvar _toSettings = function ( mixed )\n\t{\n\t\tvar idx, jq;\n\t\tvar settings = DataTable.settings;\n\t\tvar tables = $.map( settings, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\n\t\tif ( ! mixed ) {\n\t\t\treturn [];\n\t\t}\n\t\telse if ( mixed.nTable && mixed.oApi ) {\n\t\t\t// DataTables settings object\n\t\t\treturn [ mixed ];\n\t\t}\n\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n\t\t\t// Table node\n\t\t\tidx = $.inArray( mixed, tables );\n\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;\n\t\t}\n\t\telse if ( mixed && typeof mixed.settings === 'function' ) {\n\t\t\treturn mixed.settings().toArray();\n\t\t}\n\t\telse if ( typeof mixed === 'string' ) {\n\t\t\t// jQuery selector\n\t\t\tjq = $(mixed);\n\t\t}\n\t\telse if ( mixed instanceof $ ) {\n\t\t\t// jQuery object (also DataTables instance)\n\t\t\tjq = mixed;\n\t\t}\n\n\t\tif ( jq ) {\n\t\t\treturn jq.map( function(i) {\n\t\t\t\tidx = $.inArray( this, tables );\n\t\t\t\treturn idx !== -1 ? settings[idx] : null;\n\t\t\t} ).toArray();\n\t\t}\n\t};\n\n\n\t/**\n\t * DataTables API class - used to control and interface with  one or more\n\t * DataTables enhanced tables.\n\t *\n\t * The API class is heavily based on jQuery, presenting a chainable interface\n\t * that you can use to interact with tables. Each instance of the API class has\n\t * a \"context\" - i.e. the tables that it will operate on. This could be a single\n\t * table, all tables on a page or a sub-set thereof.\n\t *\n\t * Additionally the API is designed to allow you to easily work with the data in\n\t * the tables, retrieving and manipulating it as required. This is done by\n\t * presenting the API class as an array like interface. The contents of the\n\t * array depend upon the actions requested by each method (for example\n\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n\t * return an array of objects or arrays depending upon your table's\n\t * configuration). The API object has a number of array like methods (`push`,\n\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n\t * `unique` etc) to assist your working with the data held in a table.\n\t *\n\t * Most methods (those which return an Api instance) are chainable, which means\n\t * the return from a method call also has all of the methods available that the\n\t * top level object had. For example, these two calls are equivalent:\n\t *\n\t *     // Not chained\n\t *     api.row.add( {...} );\n\t *     api.draw();\n\t *\n\t *     // Chained\n\t *     api.row.add( {...} ).draw();\n\t *\n\t * @class DataTable.Api\n\t * @param {array|object|string|jQuery} context DataTable identifier. This is\n\t *   used to define which DataTables enhanced tables this API will operate on.\n\t *   Can be one of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t * @param {array} [data] Data to initialise the Api instance with.\n\t *\n\t * @example\n\t *   // Direct initialisation during DataTables construction\n\t *   var api = $('#example').DataTable();\n\t *\n\t * @example\n\t *   // Initialisation using a DataTables jQuery object\n\t *   var api = $('#example').dataTable().api();\n\t *\n\t * @example\n\t *   // Initialisation as a constructor\n\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n\t */\n\t_Api = function ( context, data )\n\t{\n\t\tif ( ! (this instanceof _Api) ) {\n\t\t\treturn new _Api( context, data );\n\t\t}\n\n\t\tvar settings = [];\n\t\tvar ctxSettings = function ( o ) {\n\t\t\tvar a = _toSettings( o );\n\t\t\tif ( a ) {\n\t\t\t\tsettings = settings.concat( a );\n\t\t\t}\n\t\t};\n\n\t\tif ( $.isArray( context ) ) {\n\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tctxSettings( context[i] );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tctxSettings( context );\n\t\t}\n\n\t\t// Remove duplicates\n\t\tthis.context = _unique( settings );\n\n\t\t// Initial data\n\t\tif ( data ) {\n\t\t\t$.merge( this, data );\n\t\t}\n\n\t\t// selector\n\t\tthis.selector = {\n\t\t\trows: null,\n\t\t\tcols: null,\n\t\t\topts: null\n\t\t};\n\n\t\t_Api.extend( this, this, __apiStruct );\n\t};\n\n\tDataTable.Api = _Api;\n\n\t// Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n\t// isPlainObject.\n\t$.extend( _Api.prototype, {\n\t\tany: function ()\n\t\t{\n\t\t\treturn this.count() !== 0;\n\t\t},\n\n\n\t\tconcat:  __arrayProto.concat,\n\n\n\t\tcontext: [], // array of table settings objects\n\n\n\t\tcount: function ()\n\t\t{\n\t\t\treturn this.flatten().length;\n\t\t},\n\n\n\t\teach: function ( fn )\n\t\t{\n\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {\n\t\t\t\tfn.call( this, this[i], i, this );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\n\t\teq: function ( idx )\n\t\t{\n\t\t\tvar ctx = this.context;\n\n\t\t\treturn ctx.length > idx ?\n\t\t\t\tnew _Api( ctx[idx], this[idx] ) :\n\t\t\t\tnull;\n\t\t},\n\n\n\t\tfilter: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\n\t\t\tif ( __arrayProto.filter ) {\n\t\t\t\ta = __arrayProto.filter.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {\n\t\t\t\t\t\ta.push( this[i] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\n\n\t\tflatten: function ()\n\t\t{\n\t\t\tvar a = [];\n\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n\t\t},\n\n\n\t\tjoin:    __arrayProto.join,\n\n\n\t\tindexOf: __arrayProto.indexOf || function (obj, start)\n\t\t{\n\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n\t\t\t\tif ( this[i] === obj ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\n\t\titerator: function ( flatten, type, fn, alwaysNew ) {\n\t\t\tvar\n\t\t\t\ta = [], ret,\n\t\t\t\ti, ien, j, jen,\n\t\t\t\tcontext = this.context,\n\t\t\t\trows, items, item,\n\t\t\t\tselector = this.selector;\n\n\t\t\t// Argument shifting\n\t\t\tif ( typeof flatten === 'string' ) {\n\t\t\t\talwaysNew = fn;\n\t\t\t\tfn = type;\n\t\t\t\ttype = flatten;\n\t\t\t\tflatten = false;\n\t\t\t}\n\n\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tvar apiInst = new _Api( context[i] );\n\n\t\t\t\tif ( type === 'table' ) {\n\t\t\t\t\tret = fn.call( apiInst, context[i], i );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {\n\t\t\t\t\t// this has same length as context - one entry for each table\n\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n\t\t\t\t\t// columns and rows share the same structure.\n\t\t\t\t\t// 'this' is an array of column indexes for each context\n\t\t\t\t\titems = this[i];\n\n\t\t\t\t\tif ( type === 'column-rows' ) {\n\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {\n\t\t\t\t\t\titem = items[j];\n\n\t\t\t\t\t\tif ( type === 'cell' ) {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( a.length || alwaysNew ) {\n\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n\t\t\t\tvar apiSelector = api.selector;\n\t\t\t\tapiSelector.rows = selector.rows;\n\t\t\t\tapiSelector.cols = selector.cols;\n\t\t\t\tapiSelector.opts = selector.opts;\n\t\t\t\treturn api;\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\n\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\n\t\t{\n\t\t\t// Bit cheeky...\n\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );\n\t\t},\n\n\n\t\tlength:  0,\n\n\n\t\tmap: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\n\t\t\tif ( __arrayProto.map ) {\n\t\t\t\ta = __arrayProto.map.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\ta.push( fn.call( this, this[i], i ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\n\n\t\tpluck: function ( prop )\n\t\t{\n\t\t\treturn this.map( function ( el ) {\n\t\t\t\treturn el[ prop ];\n\t\t\t} );\n\t\t},\n\n\t\tpop:     __arrayProto.pop,\n\n\n\t\tpush:    __arrayProto.push,\n\n\n\t\t// Does not return an API instance\n\t\treduce: __arrayProto.reduce || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );\n\t\t},\n\n\n\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );\n\t\t},\n\n\n\t\treverse: __arrayProto.reverse,\n\n\n\t\t// Object with rows, columns and opts\n\t\tselector: null,\n\n\n\t\tshift:   __arrayProto.shift,\n\n\n\t\tsort:    __arrayProto.sort, // ? name - order?\n\n\n\t\tsplice:  __arrayProto.splice,\n\n\n\t\ttoArray: function ()\n\t\t{\n\t\t\treturn __arrayProto.slice.call( this );\n\t\t},\n\n\n\t\tto$: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\n\n\t\ttoJQuery: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\n\n\t\tunique: function ()\n\t\t{\n\t\t\treturn new _Api( this.context, _unique(this) );\n\t\t},\n\n\n\t\tunshift: __arrayProto.unshift\n\t} );\n\n\n\t_Api.extend = function ( scope, obj, ext )\n\t{\n\t\t// Only extend API instances and static properties of the API\n\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar\n\t\t\ti, ien,\n\t\t\tj, jen,\n\t\t\tstruct, inner,\n\t\t\tmethodScoping = function ( scope, fn, struc ) {\n\t\t\t\treturn function () {\n\t\t\t\t\tvar ret = fn.apply( scope, arguments );\n\n\t\t\t\t\t// Method extension\n\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );\n\t\t\t\t\treturn ret;\n\t\t\t\t};\n\t\t\t};\n\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\tstruct = ext[i];\n\n\t\t\t// Value\n\t\t\tobj[ struct.name ] = typeof struct.val === 'function' ?\n\t\t\t\tmethodScoping( scope, struct.val, struct ) :\n\t\t\t\t$.isPlainObject( struct.val ) ?\n\t\t\t\t\t{} :\n\t\t\t\t\tstruct.val;\n\n\t\t\tobj[ struct.name ].__dt_wrapper = true;\n\n\t\t\t// Property extension\n\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );\n\t\t}\n\t};\n\n\n\t// @todo - Is there need for an augment function?\n\t// _Api.augment = function ( inst, name )\n\t// {\n\t// \t// Find src object in the structure from the name\n\t// \tvar parts = name.split('.');\n\n\t// \t_Api.extend( inst, obj );\n\t// };\n\n\n\t//     [\n\t//       {\n\t//         name:      'data'                -- string   - Property name\n\t//         val:       function () {},       -- function - Api method (or undefined if just an object\n\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t//       },\n\t//       {\n\t//         name:     'row'\n\t//         val:       {},\n\t//         methodExt: [ ... ],\n\t//         propExt:   [\n\t//           {\n\t//             name:      'data'\n\t//             val:       function () {},\n\t//             methodExt: [ ... ],\n\t//             propExt:   [ ... ]\n\t//           },\n\t//           ...\n\t//         ]\n\t//       }\n\t//     ]\n\n\t_Api.register = _api_register = function ( name, val )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {\n\t\t\t\t_Api.register( name[j], val );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar\n\t\t\ti, ien,\n\t\t\their = name.split('.'),\n\t\t\tstruct = __apiStruct,\n\t\t\tkey, method;\n\n\t\tvar find = function ( src, name ) {\n\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {\n\t\t\t\tif ( src[i].name === name ) {\n\t\t\t\t\treturn src[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {\n\t\t\tmethod = heir[i].indexOf('()') !== -1;\n\t\t\tkey = method ?\n\t\t\t\their[i].replace('()', '') :\n\t\t\t\their[i];\n\n\t\t\tvar src = find( struct, key );\n\t\t\tif ( ! src ) {\n\t\t\t\tsrc = {\n\t\t\t\t\tname:      key,\n\t\t\t\t\tval:       {},\n\t\t\t\t\tmethodExt: [],\n\t\t\t\t\tpropExt:   []\n\t\t\t\t};\n\t\t\t\tstruct.push( src );\n\t\t\t}\n\n\t\t\tif ( i === ien-1 ) {\n\t\t\t\tsrc.val = val;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstruct = method ?\n\t\t\t\t\tsrc.methodExt :\n\t\t\t\t\tsrc.propExt;\n\t\t\t}\n\t\t}\n\t};\n\n\n\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n\t\t_Api.register( pluralName, val );\n\n\t\t_Api.register( singularName, function () {\n\t\t\tvar ret = val.apply( this, arguments );\n\n\t\t\tif ( ret === this ) {\n\t\t\t\t// Returned item is the API instance that was passed in, return it\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if ( ret instanceof _Api ) {\n\t\t\t\t// New API instance returned, want the value from the first item\n\t\t\t\t// in the returned array for the singular result.\n\t\t\t\treturn ret.length ?\n\t\t\t\t\t$.isArray( ret[0] ) ?\n\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n\t\t\t\t\t\tret[0] :\n\t\t\t\t\tundefined;\n\t\t\t}\n\n\t\t\t// Non-API return - just fire it back\n\t\t\treturn ret;\n\t\t} );\n\t};\n\n\n\t/**\n\t * Selector for HTML tables. Apply the given selector to the give array of\n\t * DataTables settings objects.\n\t *\n\t * @param {string|integer} [selector] jQuery selector string or integer\n\t * @param  {array} Array of DataTables settings objects to be filtered\n\t * @return {array}\n\t * @ignore\n\t */\n\tvar __table_selector = function ( selector, a )\n\t{\n\t\t// Integer is used to pick out a table by index\n\t\tif ( typeof selector === 'number' ) {\n\t\t\treturn [ a[ selector ] ];\n\t\t}\n\n\t\t// Perform a jQuery selector on the table nodes\n\t\tvar nodes = $.map( a, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\n\t\treturn $(nodes)\n\t\t\t.filter( selector )\n\t\t\t.map( function (i) {\n\t\t\t\t// Need to translate back from the table node to the settings\n\t\t\t\tvar idx = $.inArray( this, nodes );\n\t\t\t\treturn a[ idx ];\n\t\t\t} )\n\t\t\t.toArray();\n\t};\n\n\n\n\t/**\n\t * Context selector for the API's context (i.e. the tables the API instance\n\t * refers to.\n\t *\n\t * @name    DataTable.Api#tables\n\t * @param {string|integer} [selector] Selector to pick which tables the iterator\n\t *   should operate on. If not given, all tables in the current context are\n\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n\t *   select multiple tables or as an integer to select a single table.\n\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n\t */\n\t_api_register( 'tables()', function ( selector ) {\n\t\t// A new instance is created if there was a selector specified\n\t\treturn selector ?\n\t\t\tnew _Api( __table_selector( selector, this.context ) ) :\n\t\t\tthis;\n\t} );\n\n\n\t_api_register( 'table()', function ( selector ) {\n\t\tvar tables = this.tables( selector );\n\t\tvar ctx = tables.context;\n\n\t\t// Truncate to the first matched table\n\t\treturn ctx.length ?\n\t\t\tnew _Api( ctx[0] ) :\n\t\t\ttables;\n\t} );\n\n\n\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTable;\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTBody;\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTHead;\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTFoot;\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTableWrapper;\n\t\t}, 1 );\n\t} );\n\n\n\n\t/**\n\t * Redraw the tables in the current context.\n\t */\n\t_api_register( 'draw()', function ( paging ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( paging === 'page' ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( typeof paging === 'string' ) {\n\t\t\t\t\tpaging = paging === 'full-hold' ?\n\t\t\t\t\t\tfalse :\n\t\t\t\t\t\ttrue;\n\t\t\t\t}\n\n\t\t\t\t_fnReDraw( settings, paging===false );\n\t\t\t}\n\t\t} );\n\t} );\n\n\n\n\t/**\n\t * Get the current page index.\n\t *\n\t * @return {integer} Current page index (zero based)\n\t *//**\n\t * Set the current page.\n\t *\n\t * Note that if you attempt to show a page which does not exist, DataTables will\n\t * not throw an error, but rather reset the paging.\n\t *\n\t * @param {integer|string} action The paging action to take. This can be one of:\n\t *  * `integer` - The page index to jump to\n\t *  * `string` - An action to take:\n\t *    * `first` - Jump to first page.\n\t *    * `next` - Jump to the next page\n\t *    * `previous` - Jump to previous page\n\t *    * `last` - Jump to the last page.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page()', function ( action ) {\n\t\tif ( action === undefined ) {\n\t\t\treturn this.page.info().page; // not an expensive call\n\t\t}\n\n\t\t// else, have an action to take on all tables\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnPageChange( settings, action );\n\t\t} );\n\t} );\n\n\n\t/**\n\t * Paging information for the first table in the current context.\n\t *\n\t * If you require paging information for another table, use the `table()` method\n\t * with a suitable selector.\n\t *\n\t * @return {object} Object with the following properties set:\n\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n\t *  * `pages` - Total number of pages\n\t *  * `start` - Display index for the first record shown on the current page\n\t *  * `end` - Display index for the last record shown on the current page\n\t *  * `length` - Display length (number of records). Note that generally `start\n\t *    + length = end`, but this is not always true, for example if there are\n\t *    only 2 records to show on the final page, with a length of 10.\n\t *  * `recordsTotal` - Full data set length\n\t *  * `recordsDisplay` - Data set length once the current filtering criterion\n\t *    are applied.\n\t */\n\t_api_register( 'page.info()', function ( action ) {\n\t\tif ( this.context.length === 0 ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar\n\t\t\tsettings   = this.context[0],\n\t\t\tstart      = settings._iDisplayStart,\n\t\t\tlen        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\n\t\treturn {\n\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),\n\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\"start\":          start,\n\t\t\t\"end\":            settings.fnDisplayEnd(),\n\t\t\t\"length\":         len,\n\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),\n\t\t\t\"recordsDisplay\": visRecords,\n\t\t\t\"serverSide\":     _fnDataSource( settings ) === 'ssp'\n\t\t};\n\t} );\n\n\n\t/**\n\t * Get the current page length.\n\t *\n\t * @return {integer} Current page length. Note `-1` indicates that all records\n\t *   are to be shown.\n\t *//**\n\t * Set the current page length.\n\t *\n\t * @param {integer} Page length to set. Use `-1` to show all records.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page.len()', function ( len ) {\n\t\t// Note that we can't call this function 'length()' because `length`\n\t\t// is a Javascript property of functions which defines how many arguments\n\t\t// the function expects.\n\t\tif ( len === undefined ) {\n\t\t\treturn this.context.length !== 0 ?\n\t\t\t\tthis.context[0]._iDisplayLength :\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// else, set the page length\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnLengthChange( settings, len );\n\t\t} );\n\t} );\n\n\n\n\tvar __reload = function ( settings, holdPosition, callback ) {\n\t\t// Use the draw event to trigger a callback\n\t\tif ( callback ) {\n\t\t\tvar api = new _Api( settings );\n\n\t\t\tapi.one( 'draw', function () {\n\t\t\t\tcallback( api.ajax.json() );\n\t\t\t} );\n\t\t}\n\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t_fnReDraw( settings, holdPosition );\n\t\t}\n\t\telse {\n\t\t\t_fnProcessingDisplay( settings, true );\n\n\t\t\t// Cancel an existing request\n\t\t\tvar xhr = settings.jqXHR;\n\t\t\tif ( xhr && xhr.readyState !== 4 ) {\n\t\t\t\txhr.abort();\n\t\t\t}\n\n\t\t\t// Trigger xhr\n\t\t\t_fnBuildAjax( settings, [], function( json ) {\n\t\t\t\t_fnClearTable( settings );\n\n\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\t_fnAddData( settings, data[i] );\n\t\t\t\t}\n\n\t\t\t\t_fnReDraw( settings, holdPosition );\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t} );\n\t\t}\n\t};\n\n\n\t/**\n\t * Get the JSON response from the last Ajax request that DataTables made to the\n\t * server. Note that this returns the JSON from the first table in the current\n\t * context.\n\t *\n\t * @return {object} JSON received from the server.\n\t */\n\t_api_register( 'ajax.json()', function () {\n\t\tvar ctx = this.context;\n\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].json;\n\t\t}\n\n\t\t// else return undefined;\n\t} );\n\n\n\t/**\n\t * Get the data submitted in the last Ajax request\n\t */\n\t_api_register( 'ajax.params()', function () {\n\t\tvar ctx = this.context;\n\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].oAjaxData;\n\t\t}\n\n\t\t// else return undefined;\n\t} );\n\n\n\t/**\n\t * Reload tables from the Ajax data source. Note that this function will\n\t * automatically re-draw the table when the remote data has been loaded.\n\t *\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging\n\t *   position. A full re-sort and re-filter is performed when this method is\n\t *   called, which is why the pagination reset is the default action.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n\t\treturn this.iterator( 'table', function (settings) {\n\t\t\t__reload( settings, resetPaging===false, callback );\n\t\t} );\n\t} );\n\n\n\t/**\n\t * Get the current Ajax URL. Note that this returns the URL from the first\n\t * table in the current context.\n\t *\n\t * @return {string} Current Ajax source URL\n\t *//**\n\t * Set the Ajax URL. Note that this will set the URL for all tables in the\n\t * current context.\n\t *\n\t * @param {string} url URL to set.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url()', function ( url ) {\n\t\tvar ctx = this.context;\n\n\t\tif ( url === undefined ) {\n\t\t\t// get\n\t\t\tif ( ctx.length === 0 ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tctx = ctx[0];\n\n\t\t\treturn ctx.ajax ?\n\t\t\t\t$.isPlainObject( ctx.ajax ) ?\n\t\t\t\t\tctx.ajax.url :\n\t\t\t\t\tctx.ajax :\n\t\t\t\tctx.sAjaxSource;\n\t\t}\n\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( $.isPlainObject( settings.ajax ) ) {\n\t\t\t\tsettings.ajax.url = url;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsettings.ajax = url;\n\t\t\t}\n\t\t\t// No need to consider sAjaxSource here since DataTables gives priority\n\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n\t\t\t// value of `sAjaxSource` redundant.\n\t\t} );\n\t} );\n\n\n\t/**\n\t * Load data from the newly set Ajax URL. Note that this method is only\n\t * available when `ajax.url()` is used to set a URL. Additionally, this method\n\t * has the same effect as calling `ajax.reload()` but is provided for\n\t * convenience when setting a new URL. Like `ajax.reload()` it will\n\t * automatically redraw the table once the remote data has been loaded.\n\t *\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n\t\t// Same as a reload, but makes sense to present it for easy access after a\n\t\t// url change\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\t__reload( ctx, resetPaging===false, callback );\n\t\t} );\n\t} );\n\n\n\n\n\tvar _selector_run = function ( type, selector, selectFn, settings, opts )\n\t{\n\t\tvar\n\t\t\tout = [], res,\n\t\t\ta, i, ien, j, jen,\n\t\t\tselectorType = typeof selector;\n\n\t\t// Can't just check for isArray here, as an API or jQuery instance might be\n\t\t// given with their array like look\n\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n\t\t\tselector = [ selector ];\n\t\t}\n\n\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {\n\t\t\t// Only split on simple strings - complex expressions will be jQuery selectors\n\t\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\n\t\t\t\tselector[i].split(',') :\n\t\t\t\t[ selector[i] ];\n\n\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {\n\t\t\t\tres = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n\n\t\t\t\tif ( res && res.length ) {\n\t\t\t\t\tout = out.concat( res );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// selector extensions\n\t\tvar ext = _ext.selector[ type ];\n\t\tif ( ext.length ) {\n\t\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\t\tout = ext[i]( settings, opts, out );\n\t\t\t}\n\t\t}\n\n\t\treturn _unique( out );\n\t};\n\n\n\tvar _selector_opts = function ( opts )\n\t{\n\t\tif ( ! opts ) {\n\t\t\topts = {};\n\t\t}\n\n\t\t// Backwards compatibility for 1.9- which used the terminology filter rather\n\t\t// than search\n\t\tif ( opts.filter && opts.search === undefined ) {\n\t\t\topts.search = opts.filter;\n\t\t}\n\n\t\treturn $.extend( {\n\t\t\tsearch: 'none',\n\t\t\torder: 'current',\n\t\t\tpage: 'all'\n\t\t}, opts );\n\t};\n\n\n\tvar _selector_first = function ( inst )\n\t{\n\t\t// Reduce the API instance to the first item found\n\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n\t\t\tif ( inst[i].length > 0 ) {\n\t\t\t\t// Assign the first element to the first item in the instance\n\t\t\t\t// and truncate the instance and context\n\t\t\t\tinst[0] = inst[i];\n\t\t\t\tinst[0].length = 1;\n\t\t\t\tinst.length = 1;\n\t\t\t\tinst.context = [ inst.context[i] ];\n\n\t\t\t\treturn inst;\n\t\t\t}\n\t\t}\n\n\t\t// Not found - return an empty instance\n\t\tinst.length = 0;\n\t\treturn inst;\n\t};\n\n\n\tvar _selector_row_indexes = function ( settings, opts )\n\t{\n\t\tvar\n\t\t\ti, ien, tmp, a=[],\n\t\t\tdisplayFiltered = settings.aiDisplay,\n\t\t\tdisplayMaster = settings.aiDisplayMaster;\n\n\t\tvar\n\t\t\tsearch = opts.search,  // none, applied, removed\n\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n\t\t\tpage   = opts.page;    // all, current\n\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t// In server-side processing mode, most options are irrelevant since\n\t\t\t// rows not shown don't exist and the index order is the applied order\n\t\t\t// Removed is a special case - for consistency just return an empty\n\t\t\t// array\n\t\t\treturn search === 'removed' ?\n\t\t\t\t[] :\n\t\t\t\t_range( 0, displayMaster.length );\n\t\t}\n\t\telse if ( page == 'current' ) {\n\t\t\t// Current page implies that order=current and fitler=applied, since it is\n\t\t\t// fairly senseless otherwise, regardless of what order and search actually\n\t\t\t// are\n\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n\t\t\t\ta.push( displayFiltered[i] );\n\t\t\t}\n\t\t}\n\t\telse if ( order == 'current' || order == 'applied' ) {\n\t\t\ta = search == 'none' ?\n\t\t\t\tdisplayMaster.slice() :                      // no search\n\t\t\t\tsearch == 'applied' ?\n\t\t\t\t\tdisplayFiltered.slice() :                // applied search\n\t\t\t\t\t$.map( displayMaster, function (el, i) { // removed search\n\t\t\t\t\t\treturn $.inArray( el, displayFiltered ) === -1 ? el : null;\n\t\t\t\t\t} );\n\t\t}\n\t\telse if ( order == 'index' || order == 'original' ) {\n\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tif ( search == 'none' ) {\n\t\t\t\t\ta.push( i );\n\t\t\t\t}\n\t\t\t\telse { // applied | removed\n\t\t\t\t\ttmp = $.inArray( i, displayFiltered );\n\n\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||\n\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )\n\t\t\t\t\t{\n\t\t\t\t\t\ta.push( i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn a;\n\t};\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Rows\n\t *\n\t * {}          - no selector - use all available rows\n\t * {integer}   - row aoData index\n\t * {node}      - TR node\n\t * {string}    - jQuery selector to apply to the TR elements\n\t * {array}     - jQuery array of nodes, or simply an array of TR nodes\n\t *\n\t */\n\n\n\tvar __row_selector = function ( settings, selector, opts )\n\t{\n\t\tvar rows;\n\t\tvar run = function ( sel ) {\n\t\t\tvar selInt = _intVal( sel );\n\t\t\tvar i, ien;\n\n\t\t\t// Short cut - selector is a number and no options provided (default is\n\t\t\t// all records, so no need to check if the index is in there, since it\n\t\t\t// must be - dev error if the index doesn't exist).\n\t\t\tif ( selInt !== null && ! opts ) {\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\n\t\t\tif ( ! rows ) {\n\t\t\t\trows = _selector_row_indexes( settings, opts );\n\t\t\t}\n\n\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n\t\t\t\t// Selector - integer\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\t\telse if ( sel === null || sel === undefined || sel === '' ) {\n\t\t\t\t// Selector - none\n\t\t\t\treturn rows;\n\t\t\t}\n\n\t\t\t// Selector - function\n\t\t\tif ( typeof sel === 'function' ) {\n\t\t\t\treturn $.map( rows, function (idx) {\n\t\t\t\t\tvar row = settings.aoData[ idx ];\n\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Get nodes in the order from the `rows` array with null values removed\n\t\t\tvar nodes = _removeEmpty(\n\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )\n\t\t\t);\n\n\t\t\t// Selector - node\n\t\t\tif ( sel.nodeName ) {\n\t\t\t\tif ( sel._DT_RowIndex !== undefined ) {\n\t\t\t\t\treturn [ sel._DT_RowIndex ]; // Property added by DT for fast lookup\n\t\t\t\t}\n\t\t\t\telse if ( sel._DT_CellIndex ) {\n\t\t\t\t\treturn [ sel._DT_CellIndex.row ];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar host = $(sel).closest('*[data-dt-row]');\n\t\t\t\t\treturn host.length ?\n\t\t\t\t\t\t[ host.data('dt-row') ] :\n\t\t\t\t\t\t[];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ID selector. Want to always be able to select rows by id, regardless\n\t\t\t// of if the tr element has been created or not, so can't rely upon\n\t\t\t// jQuery here - hence a custom implementation. This does not match\n\t\t\t// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n\t\t\t// but to select it using a CSS selector engine (like Sizzle or\n\t\t\t// querySelect) it would need to need to be escaped for some characters.\n\t\t\t// DataTables simplifies this for row selectors since you can select\n\t\t\t// only a row. A # indicates an id any anything that follows is the id -\n\t\t\t// unescaped.\n\t\t\tif ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n\t\t\t\t// get row index from id\n\t\t\t\tvar rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\n\t\t\t\tif ( rowObj !== undefined ) {\n\t\t\t\t\treturn [ rowObj.idx ];\n\t\t\t\t}\n\n\t\t\t\t// need to fall through to jQuery in case there is DOM id that\n\t\t\t\t// matches\n\t\t\t}\n\n\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/\n\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,\n\t\t\t// it also allows arrays, so this will cope with all three options\n\t\t\treturn $(nodes)\n\t\t\t\t.filter( sel )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn this._DT_RowIndex;\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\t};\n\n\t\treturn _selector_run( 'row', selector, run, settings, opts );\n\t};\n\n\n\t_api_register( 'rows()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\n\t\topts = _selector_opts( opts );\n\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __row_selector( settings, selector, opts );\n\t\t}, 1 );\n\n\t\t// Want argument shifting here and in __row_selector?\n\t\tinst.selector.rows = selector;\n\t\tinst.selector.opts = opts;\n\n\t\treturn inst;\n\t} );\n\n\t_api_register( 'rows().nodes()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn settings.aoData[ row ].nTr || undefined;\n\t\t}, 1 );\n\t} );\n\n\t_api_register( 'rows().data()', function () {\n\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\tvar r = settings.aoData[ row ];\n\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\t_fnInvalidate( settings, row, src );\n\t\t} );\n\t} );\n\n\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn row;\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n\t\tvar a = [];\n\t\tvar context = this.context;\n\n\t\t// `iterator` will drop undefined values, but in this case we want them\n\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\tfor ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n\t\t\t\tvar id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\n\t\t\t\ta.push( (hash === true ? '#' : '' )+ id );\n\t\t\t}\n\t\t}\n\n\t\treturn new _Api( context, a );\n\t} );\n\n\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n\t\tvar that = this;\n\n\t\tthis.iterator( 'row', function ( settings, row, thatIdx ) {\n\t\t\tvar data = settings.aoData;\n\t\t\tvar rowData = data[ row ];\n\t\t\tvar i, ien, j, jen;\n\t\t\tvar loopRow, loopCells;\n\n\t\t\tdata.splice( row, 1 );\n\n\t\t\t// Update the cached indexes\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\tloopRow = data[i];\n\t\t\t\tloopCells = loopRow.anCells;\n\n\t\t\t\t// Rows\n\t\t\t\tif ( loopRow.nTr !== null ) {\n\t\t\t\t\tloopRow.nTr._DT_RowIndex = i;\n\t\t\t\t}\n\n\t\t\t\t// Cells\n\t\t\t\tif ( loopCells !== null ) {\n\t\t\t\t\tfor ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n\t\t\t\t\t\tloopCells[j]._DT_CellIndex.row = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete from the display arrays\n\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );\n\t\t\t_fnDeleteIndex( settings.aiDisplay, row );\n\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\n\n\t\t\t// Check for an 'overflow' they case for displaying the table\n\t\t\t_fnLengthOverflow( settings );\n\n\t\t\t// Remove the row's ID reference if there is one\n\t\t\tvar id = settings.rowIdFn( rowData._aData );\n\t\t\tif ( id !== undefined ) {\n\t\t\t\tdelete settings.aIds[ id ];\n\t\t\t}\n\t\t} );\n\n\t\tthis.iterator( 'table', function ( settings ) {\n\t\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tsettings.aoData[i].idx = i;\n\t\t\t}\n\t\t} );\n\n\t\treturn this;\n\t} );\n\n\n\t_api_register( 'rows.add()', function ( rows ) {\n\t\tvar newRows = this.iterator( 'table', function ( settings ) {\n\t\t\t\tvar row, i, ien;\n\t\t\t\tvar out = [];\n\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\n\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn out;\n\t\t\t}, 1 );\n\n\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\t\tvar modRows = this.rows( -1 );\n\t\tmodRows.pop();\n\t\t$.merge( modRows, newRows );\n\n\t\treturn modRows;\n\t} );\n\n\n\n\n\n\t/**\n\t *\n\t */\n\t_api_register( 'row()', function ( selector, opts ) {\n\t\treturn _selector_first( this.rows( selector, opts ) );\n\t} );\n\n\n\t_api_register( 'row().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._aData :\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// Set\n\t\tctx[0].aoData[ this[0] ]._aData = data;\n\n\t\t// Automatically invalidate\n\t\t_fnInvalidate( ctx[0], this[0], 'data' );\n\n\t\treturn this;\n\t} );\n\n\n\t_api_register( 'row().node()', function () {\n\t\tvar ctx = this.context;\n\n\t\treturn ctx.length && this.length ?\n\t\t\tctx[0].aoData[ this[0] ].nTr || null :\n\t\t\tnull;\n\t} );\n\n\n\t_api_register( 'row.add()', function ( row ) {\n\t\t// Allow a jQuery object to be passed in - only a single row is added from\n\t\t// it though - the first element in the set\n\t\tif ( row instanceof $ && row.length ) {\n\t\t\trow = row[0];\n\t\t}\n\n\t\tvar rows = this.iterator( 'table', function ( settings ) {\n\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\treturn _fnAddTr( settings, row )[0];\n\t\t\t}\n\t\t\treturn _fnAddData( settings, row );\n\t\t} );\n\n\t\t// Return an Api.rows() extended instance, with the newly added row selected\n\t\treturn this.row( rows[0] );\n\t} );\n\n\n\n\tvar __details_add = function ( ctx, row, data, klass )\n\t{\n\t\t// Convert to array of TR elements\n\t\tvar rows = [];\n\t\tvar addRow = function ( r, k ) {\n\t\t\t// Recursion to allow for arrays of jQuery objects\n\t\t\tif ( $.isArray( r ) || r instanceof $ ) {\n\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {\n\t\t\t\t\taddRow( r[i], k );\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If we get a TR element, then just add it directly - up to the dev\n\t\t\t// to add the correct number of columns etc\n\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n\t\t\t\trows.push( r );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Otherwise create a row with a wrapper\n\t\t\t\tvar created = $('<tr><td/></tr>').addClass( k );\n\t\t\t\t$('td', created)\n\t\t\t\t\t.addClass( k )\n\t\t\t\t\t.html( r )\n\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );\n\n\t\t\t\trows.push( created[0] );\n\t\t\t}\n\t\t};\n\n\t\taddRow( data, klass );\n\n\t\tif ( row._details ) {\n\t\t\trow._details.detach();\n\t\t}\n\n\t\trow._details = $(rows);\n\n\t\t// If the children were already shown, that state should be retained\n\t\tif ( row._detailsShow ) {\n\t\t\trow._details.insertAfter( row.nTr );\n\t\t}\n\t};\n\n\n\tvar __details_remove = function ( api, idx )\n\t{\n\t\tvar ctx = api.context;\n\n\t\tif ( ctx.length ) {\n\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\n\n\t\t\tif ( row && row._details ) {\n\t\t\t\trow._details.remove();\n\n\t\t\t\trow._detailsShow = undefined;\n\t\t\t\trow._details = undefined;\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar __details_display = function ( api, show ) {\n\t\tvar ctx = api.context;\n\n\t\tif ( ctx.length && api.length ) {\n\t\t\tvar row = ctx[0].aoData[ api[0] ];\n\n\t\t\tif ( row._details ) {\n\t\t\t\trow._detailsShow = show;\n\n\t\t\t\tif ( show ) {\n\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trow._details.detach();\n\t\t\t\t}\n\n\t\t\t\t__details_events( ctx[0] );\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar __details_events = function ( settings )\n\t{\n\t\tvar api = new _Api( settings );\n\t\tvar namespace = '.dt.DT_details';\n\t\tvar drawEvent = 'draw'+namespace;\n\t\tvar colvisEvent = 'column-visibility'+namespace;\n\t\tvar destroyEvent = 'destroy'+namespace;\n\t\tvar data = settings.aoData;\n\n\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n\n\t\tif ( _pluck( data, '_details' ).length > 0 ) {\n\t\t\t// On each draw, insert the required elements into the document\n\t\t\tapi.on( drawEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {\n\t\t\t\t\t// Internal data grab\n\t\t\t\t\tvar row = data[ idx ];\n\n\t\t\t\t\tif ( row._detailsShow ) {\n\t\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// Column visibility change - update the colspan\n\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Update the colspan for the details rows (note, only if it already has\n\t\t\t\t// a colspan)\n\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );\n\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = data[i];\n\n\t\t\t\t\tif ( row._details ) {\n\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Table destroyed - nuke any child rows\n\t\t\tapi.on( destroyEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( data[i]._details ) {\n\t\t\t\t\t\t__details_remove( api, i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t};\n\n\t// Strings for the method names to help minification\n\tvar _emp = '';\n\tvar _child_obj = _emp+'row().child';\n\tvar _child_mth = _child_obj+'()';\n\n\t// data can be:\n\t//  tr\n\t//  string\n\t//  jQuery or array of any of the above\n\t_api_register( _child_mth, function ( data, klass ) {\n\t\tvar ctx = this.context;\n\n\t\tif ( data === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._details :\n\t\t\t\tundefined;\n\t\t}\n\t\telse if ( data === true ) {\n\t\t\t// show\n\t\t\tthis.child.show();\n\t\t}\n\t\telse if ( data === false ) {\n\t\t\t// remove\n\t\t\t__details_remove( this );\n\t\t}\n\t\telse if ( ctx.length && this.length ) {\n\t\t\t// set\n\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\n\t\t}\n\n\t\treturn this;\n\t} );\n\n\n\t_api_register( [\n\t\t_child_obj+'.show()',\n\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without\n\t], function ( show ) {   // it returns an object and this method is not executed)\n\t\t__details_display( this, true );\n\t\treturn this;\n\t} );\n\n\n\t_api_register( [\n\t\t_child_obj+'.hide()',\n\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without\n\t], function () {         // it returns an object and this method is not executed)\n\t\t__details_display( this, false );\n\t\treturn this;\n\t} );\n\n\n\t_api_register( [\n\t\t_child_obj+'.remove()',\n\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without\n\t], function () {           // it returns an object and this method is not executed)\n\t\t__details_remove( this );\n\t\treturn this;\n\t} );\n\n\n\t_api_register( _child_obj+'.isShown()', function () {\n\t\tvar ctx = this.context;\n\n\t\tif ( ctx.length && this.length ) {\n\t\t\t// _detailsShown as false or undefined will fall through to return false\n\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;\n\t\t}\n\t\treturn false;\n\t} );\n\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Columns\n\t *\n\t * {integer}           - column index (>=0 count from left, <0 count from right)\n\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n\t * \"{string}:name\"     - column name\n\t * \"{string}\"          - jQuery selector on column header nodes\n\t *\n\t */\n\n\t// can be an array of these items, comma separated list, or an array of comma\n\t// separated lists\n\n\tvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\n\n\n\t// r1 and r2 are redundant - but it means that the parameters match for the\n\t// iterator callback in columns().data()\n\tvar __columnData = function ( settings, column, r1, r2, rows ) {\n\t\tvar a = [];\n\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );\n\t\t}\n\t\treturn a;\n\t};\n\n\n\tvar __column_selector = function ( settings, selector, opts )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tnames = _pluck( columns, 'sName' ),\n\t\t\tnodes = _pluck( columns, 'nTh' );\n\n\t\tvar run = function ( s ) {\n\t\t\tvar selInt = _intVal( s );\n\n\t\t\t// Selector - all\n\t\t\tif ( s === '' ) {\n\t\t\t\treturn _range( columns.length );\n\t\t\t}\n\n\t\t\t// Selector - index\n\t\t\tif ( selInt !== null ) {\n\t\t\t\treturn [ selInt >= 0 ?\n\t\t\t\t\tselInt : // Count from left\n\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t// Selector = function\n\t\t\tif ( typeof s === 'function' ) {\n\t\t\t\tvar rows = _selector_row_indexes( settings, opts );\n\n\t\t\t\treturn $.map( columns, function (col, idx) {\n\t\t\t\t\treturn s(\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),\n\t\t\t\t\t\t\tnodes[ idx ]\n\t\t\t\t\t\t) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// jQuery or string selector\n\t\t\tvar match = typeof s === 'string' ?\n\t\t\t\ts.match( __re_column_selector ) :\n\t\t\t\t'';\n\n\t\t\tif ( match ) {\n\t\t\t\tswitch( match[2] ) {\n\t\t\t\t\tcase 'visIdx':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );\n\t\t\t\t\t\t// Visible index given, convert to column index\n\t\t\t\t\t\tif ( idx < 0 ) {\n\t\t\t\t\t\t\t// Counting from the right\n\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {\n\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Counting from the left\n\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];\n\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t// match by name. `names` is column index complete and in order\n\t\t\t\t\t\treturn $.map( names, function (name, i) {\n\t\t\t\t\t\t\treturn name === match[1] ? i : null;\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cell in the table body\n\t\t\tif ( s.nodeName && s._DT_CellIndex ) {\n\t\t\t\treturn [ s._DT_CellIndex.column ];\n\t\t\t}\n\n\t\t\t// jQuery selector on the TH elements for the columns\n\t\t\tvar jqResult = $( nodes )\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\t\treturn jqResult;\n\t\t\t}\n\n\t\t\t// Otherwise a node which might have a `dt-column` data attribute, or be\n\t\t\t// a child or such an element\n\t\t\tvar host = $(s).closest('*[data-dt-column]');\n\t\t\treturn host.length ?\n\t\t\t\t[ host.data('dt-column') ] :\n\t\t\t\t[];\n\t\t};\n\n\t\treturn _selector_run( 'column', selector, run, settings, opts );\n\t};\n\n\n\tvar __setColumnVis = function ( settings, column, vis ) {\n\t\tvar\n\t\t\tcols = settings.aoColumns,\n\t\t\tcol  = cols[ column ],\n\t\t\tdata = settings.aoData,\n\t\t\trow, cells, i, ien, tr;\n\n\t\t// Get\n\t\tif ( vis === undefined ) {\n\t\t\treturn col.bVisible;\n\t\t}\n\n\t\t// Set\n\t\t// No change\n\t\tif ( col.bVisible === vis ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( vis ) {\n\t\t\t// Insert column\n\t\t\t// Need to decide if we should use appendChild or insertBefore\n\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\ttr = data[i].nTr;\n\t\t\t\tcells = data[i].anCells;\n\n\t\t\t\tif ( tr ) {\n\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null\n\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Remove column\n\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();\n\t\t}\n\n\t\t// Common actions\n\t\tcol.bVisible = vis;\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\n\t\t_fnSaveState( settings );\n\t};\n\n\n\t_api_register( 'columns()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\n\t\topts = _selector_opts( opts );\n\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __column_selector( settings, selector, opts );\n\t\t}, 1 );\n\n\t\t// Want argument shifting here and in _row_selector?\n\t\tinst.selector.cols = selector;\n\t\tinst.selector.opts = opts;\n\n\t\treturn inst;\n\t} );\n\n\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTh;\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTf;\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'columns().data()', 'column().data()', function () {\n\t\treturn this.iterator( 'column-rows', __columnData, 1 );\n\t} );\n\n\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].mData;\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows,\n\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column\n\t\t\t);\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n\t\t}, 1 );\n\t} );\n\n\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n\t\tvar ret = this.iterator( 'column', function ( settings, column ) {\n\t\t\tif ( vis === undefined ) {\n\t\t\t\treturn settings.aoColumns[ column ].bVisible;\n\t\t\t} // else\n\t\t\t__setColumnVis( settings, column, vis );\n\t\t} );\n\n\t\t// Group the column visibility changes\n\t\tif ( vis !== undefined ) {\n\t\t\t// Second loop once the first is done for events\n\t\t\tthis.iterator( 'column', function ( settings, column ) {\n\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n\t\t\t} );\n\n\t\t\tif ( calc === undefined || calc ) {\n\t\t\t\tthis.columns.adjust();\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t} );\n\n\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn type === 'visible' ?\n\t\t\t\t_fnColumnIndexToVisible( settings, column ) :\n\t\t\t\tcolumn;\n\t\t}, 1 );\n\t} );\n\n\t_api_register( 'columns.adjust()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}, 1 );\n\t} );\n\n\t_api_register( 'column.index()', function ( type, idx ) {\n\t\tif ( this.context.length !== 0 ) {\n\t\t\tvar ctx = this.context[0];\n\n\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {\n\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );\n\t\t\t}\n\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {\n\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );\n\t\t\t}\n\t\t}\n\t} );\n\n\t_api_register( 'column()', function ( selector, opts ) {\n\t\treturn _selector_first( this.columns( selector, opts ) );\n\t} );\n\n\n\n\tvar __cell_selector = function ( settings, selector, opts )\n\t{\n\t\tvar data = settings.aoData;\n\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n\t\tvar allCells = $( [].concat.apply([], cells) );\n\t\tvar row;\n\t\tvar columns = settings.aoColumns.length;\n\t\tvar a, i, ien, j, o, host;\n\n\t\tvar run = function ( s ) {\n\t\t\tvar fnSelector = typeof s === 'function';\n\n\t\t\tif ( s === null || s === undefined || fnSelector ) {\n\t\t\t\t// All cells and function selectors\n\t\t\t\ta = [];\n\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\n\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {\n\t\t\t\t\t\to = {\n\t\t\t\t\t\t\trow: row,\n\t\t\t\t\t\t\tcolumn: j\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif ( fnSelector ) {\n\t\t\t\t\t\t\t// Selector - function\n\t\t\t\t\t\t\thost = data[ row ];\n\n\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n\t\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// Selector - all\n\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\t// Selector - index\n\t\t\tif ( $.isPlainObject( s ) ) {\n\t\t\t\treturn [s];\n\t\t\t}\n\n\t\t\t// Selector - jQuery filtered cells\n\t\t\tvar jqResult = allCells\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function (i, el) {\n\t\t\t\t\treturn { // use a new object, in case someone changes the values\n\t\t\t\t\t\trow:    el._DT_CellIndex.row,\n\t\t\t\t\t\tcolumn: el._DT_CellIndex.column\n\t \t\t\t\t};\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\t\treturn jqResult;\n\t\t\t}\n\n\t\t\t// Otherwise the selector is a node, and there is one last option - the\n\t\t\t// element might be a child of an element which has dt-row and dt-column\n\t\t\t// data attributes\n\t\t\thost = $(s).closest('*[data-dt-row]');\n\t\t\treturn host.length ?\n\t\t\t\t[ {\n\t\t\t\t\trow: host.data('dt-row'),\n\t\t\t\t\tcolumn: host.data('dt-column')\n\t\t\t\t} ] :\n\t\t\t\t[];\n\t\t};\n\n\t\treturn _selector_run( 'cell', selector, run, settings, opts );\n\t};\n\n\n\n\n\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n\t\t// Argument shifting\n\t\tif ( $.isPlainObject( rowSelector ) ) {\n\t\t\t// Indexes\n\t\t\tif ( rowSelector.row === undefined ) {\n\t\t\t\t// Selector options in first parameter\n\t\t\t\topts = rowSelector;\n\t\t\t\trowSelector = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Cell index objects in first parameter\n\t\t\t\topts = columnSelector;\n\t\t\t\tcolumnSelector = null;\n\t\t\t}\n\t\t}\n\t\tif ( $.isPlainObject( columnSelector ) ) {\n\t\t\topts = columnSelector;\n\t\t\tcolumnSelector = null;\n\t\t}\n\n\t\t// Cell selector\n\t\tif ( columnSelector === null || columnSelector === undefined ) {\n\t\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n\t\t\t} );\n\t\t}\n\n\t\t// Row + column selector\n\t\tvar columns = this.columns( columnSelector, opts );\n\t\tvar rows = this.rows( rowSelector, opts );\n\t\tvar a, i, ien, j, jen;\n\n\t\tvar cells = this.iterator( 'table', function ( settings, idx ) {\n\t\t\ta = [];\n\n\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n\t\t\t\t\ta.push( {\n\t\t\t\t\t\trow:    rows[idx][i],\n\t\t\t\t\t\tcolumn: columns[idx][j]\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a;\n\t\t}, 1 );\n\n\t\t$.extend( cells.selector, {\n\t\t\tcols: columnSelector,\n\t\t\trows: rowSelector,\n\t\t\topts: opts\n\t\t} );\n\n\t\treturn cells;\n\t} );\n\n\n\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\tvar data = settings.aoData[ row ];\n\n\t\t\treturn data && data.anCells ?\n\t\t\t\tdata.anCells[ column ] :\n\t\t\t\tundefined;\n\t\t}, 1 );\n\t} );\n\n\n\t_api_register( 'cells().data()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column );\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';\n\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn settings.aoData[ row ][ type ][ column ];\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column, type );\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn {\n\t\t\t\trow: row,\n\t\t\t\tcolumn: column,\n\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )\n\t\t\t};\n\t\t}, 1 );\n\t} );\n\n\n\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\t_fnInvalidate( settings, row, src, column );\n\t\t} );\n\t} );\n\n\n\n\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n\t} );\n\n\n\t_api_register( 'cell().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\tvar cell = this[0];\n\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && cell.length ?\n\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// Set\n\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n\n\t\treturn this;\n\t} );\n\n\n\n\t/**\n\t * Get current ordering (sorting) that has been applied to the table.\n\t *\n\t * @returns {array} 2D array containing the sorting information for the first\n\t *   table in the current context. Each element in the parent array represents\n\t *   a column being sorted upon (i.e. multi-sorting with two columns would have\n\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n\t *   the column index that the sorting condition applies to, the second is the\n\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n\t *   index of the sorting order from the `column.sorting` initialisation array.\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {integer} order Column index to sort upon.\n\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 1D array of sorting information to be applied.\n\t * @param {array} [...] Optional additional sorting conditions\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 2D array of sorting information to be applied.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order()', function ( order, dir ) {\n\t\tvar ctx = this.context;\n\n\t\tif ( order === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].aaSorting :\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// set\n\t\tif ( typeof order === 'number' ) {\n\t\t\t// Simple column / direction passed in\n\t\t\torder = [ [ order, dir ] ];\n\t\t}\n\t\telse if ( order.length && ! $.isArray( order[0] ) ) {\n\t\t\t// Arguments passed in (list of 1D arrays)\n\t\t\torder = Array.prototype.slice.call( arguments );\n\t\t}\n\t\t// otherwise a 2D array was passed in\n\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSorting = order.slice();\n\t\t} );\n\t} );\n\n\n\t/**\n\t * Attach a sort listener to an element for a given column\n\t *\n\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n\t *   listener to. This can take the form of a single DOM node, a jQuery\n\t *   collection of nodes or a jQuery selector which will identify the node(s).\n\t * @param {integer} column the column that a click on this node will sort on\n\t * @param {function} [callback] callback function when sort is run\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order.listener()', function ( node, column, callback ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSortAttachListener( settings, node, column, callback );\n\t\t} );\n\t} );\n\n\n\t_api_register( 'order.fixed()', function ( set ) {\n\t\tif ( ! set ) {\n\t\t\tvar ctx = this.context;\n\t\t\tvar fixed = ctx.length ?\n\t\t\t\tctx[0].aaSortingFixed :\n\t\t\t\tundefined;\n\n\t\t\treturn $.isArray( fixed ) ?\n\t\t\t\t{ pre: fixed } :\n\t\t\t\tfixed;\n\t\t}\n\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSortingFixed = $.extend( true, {}, set );\n\t\t} );\n\t} );\n\n\n\t// Order by the selected column(s)\n\t_api_register( [\n\t\t'columns().order()',\n\t\t'column().order()'\n\t], function ( dir ) {\n\t\tvar that = this;\n\n\t\treturn this.iterator( 'table', function ( settings, i ) {\n\t\t\tvar sort = [];\n\n\t\t\t$.each( that[i], function (j, col) {\n\t\t\t\tsort.push( [ col, dir ] );\n\t\t\t} );\n\n\t\t\tsettings.aaSorting = sort;\n\t\t} );\n\t} );\n\n\n\n\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n\t\tvar ctx = this.context;\n\n\t\tif ( input === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].oPreviousSearch.sSearch :\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t} ), 1 );\n\t\t} );\n\t} );\n\n\n\t_api_registerPlural(\n\t\t'columns().search()',\n\t\t'column().search()',\n\t\tfunction ( input, regex, smart, caseInsen ) {\n\t\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\t\tvar preSearch = settings.aoPreSearchCols;\n\n\t\t\t\tif ( input === undefined ) {\n\t\t\t\t\t// get\n\t\t\t\t\treturn preSearch[ column ].sSearch;\n\t\t\t\t}\n\n\t\t\t\t// set\n\t\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t$.extend( preSearch[ column ], {\n\t\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t\t} );\n\n\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n\t\t\t} );\n\t\t}\n\t);\n\n\t/*\n\t * State API methods\n\t */\n\n\t_api_register( 'state()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oSavedState :\n\t\t\tnull;\n\t} );\n\n\n\t_api_register( 'state.clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t// Save an empty object\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n\t\t} );\n\t} );\n\n\n\t_api_register( 'state.loaded()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oLoadedState :\n\t\t\tnull;\n\t} );\n\n\n\t_api_register( 'state.save()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSaveState( settings );\n\t\t} );\n\t} );\n\n\n\n\t/**\n\t * Provide a common method for plug-ins to check the version of DataTables being\n\t * used, in order to ensure compatibility.\n\t *\n\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to\n\t *    the required version, or false if this version of DataTales is not\n\t *    suitable\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n\t */\n\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n\t{\n\t\tvar aThis = DataTable.version.split('.');\n\t\tvar aThat = version.split('.');\n\t\tvar iThis, iThat;\n\n\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;\n\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;\n\n\t\t\t// Parts are the same, keep comparing\n\t\t\tif (iThis === iThat) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parts are different, return immediately\n\t\t\treturn iThis > iThat;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Check if a `<table>` node is a DataTable table already or not.\n\t *\n\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n\t *      selector for the table to test. Note that if more than more than one\n\t *      table is passed on, only the first will be checked\n\t *  @returns {boolean} true the table given is a DataTable, or false otherwise\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n\t *      $('#example').dataTable();\n\t *    }\n\t */\n\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n\t{\n\t\tvar t = $(table).get(0);\n\t\tvar is = false;\n\n\t\tif ( table instanceof DataTable.Api ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$.each( DataTable.settings, function (i, o) {\n\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n\t\t\tif ( o.nTable === t || head === t || foot === t ) {\n\t\t\t\tis = true;\n\t\t\t}\n\t\t} );\n\n\t\treturn is;\n\t};\n\n\n\t/**\n\t * Get all DataTable tables that have been initialised - optionally you can\n\t * select to get only currently visible tables.\n\t *\n\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n\t *    or visible tables only.\n\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n\t *    DataTables\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    $.each( $.fn.dataTable.tables(true), function () {\n\t *      $(table).DataTable().columns.adjust();\n\t *    } );\n\t */\n\tDataTable.tables = DataTable.fnTables = function ( visible )\n\t{\n\t\tvar api = false;\n\n\t\tif ( $.isPlainObject( visible ) ) {\n\t\t\tapi = visible.api;\n\t\t\tvisible = visible.visible;\n\t\t}\n\n\t\tvar a = $.map( DataTable.settings, function (o) {\n\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n\t\t\t\treturn o.nTable;\n\t\t\t}\n\t\t} );\n\n\t\treturn api ?\n\t\t\tnew _Api( a ) :\n\t\t\ta;\n\t};\n\n\n\t/**\n\t * Convert from camel case parameters to Hungarian notation. This is made public\n\t * for the extensions to provide the same ability as DataTables core to accept\n\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n\t * parameters.\n\t *\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t */\n\tDataTable.camelToHungarian = _fnCamelToHungarian;\n\n\n\n\t/**\n\t *\n\t */\n\t_api_register( '$()', function ( selector, opts ) {\n\t\tvar\n\t\t\trows   = this.rows( opts ).nodes(), // Get all rows\n\t\t\tjqRows = $(rows);\n\n\t\treturn $( [].concat(\n\t\t\tjqRows.filter( selector ).toArray(),\n\t\t\tjqRows.find( selector ).toArray()\n\t\t) );\n\t} );\n\n\n\t// jQuery functions to operate on the tables\n\t$.each( [ 'on', 'one', 'off' ], function (i, key) {\n\t\t_api_register( key+'()', function ( /* event, handler */ ) {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\n\t\t\t// Add the `dt` namespace automatically if it isn't already present\n\t\t\targs[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\n\t\t\t\treturn ! e.match(/\\.dt\\b/) ?\n\t\t\t\t\te+'.dt' :\n\t\t\t\t\te;\n\t\t\t\t} ).join( ' ' );\n\n\t\t\tvar inst = $( this.tables().nodes() );\n\t\t\tinst[key].apply( inst, args );\n\t\t\treturn this;\n\t\t} );\n\t} );\n\n\n\t_api_register( 'clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnClearTable( settings );\n\t\t} );\n\t} );\n\n\n\t_api_register( 'settings()', function () {\n\t\treturn new _Api( this.context, this.context );\n\t} );\n\n\n\t_api_register( 'init()', function () {\n\t\tvar ctx = this.context;\n\t\treturn ctx.length ? ctx[0].oInit : null;\n\t} );\n\n\n\t_api_register( 'data()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\treturn _pluck( settings.aoData, '_aData' );\n\t\t} ).flatten();\n\t} );\n\n\n\t_api_register( 'destroy()', function ( remove ) {\n\t\tremove = remove || false;\n\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tvar orig      = settings.nTableWrapper.parentNode;\n\t\t\tvar classes   = settings.oClasses;\n\t\t\tvar table     = settings.nTable;\n\t\t\tvar tbody     = settings.nTBody;\n\t\t\tvar thead     = settings.nTHead;\n\t\t\tvar tfoot     = settings.nTFoot;\n\t\t\tvar jqTable   = $(table);\n\t\t\tvar jqTbody   = $(tbody);\n\t\t\tvar jqWrapper = $(settings.nTableWrapper);\n\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n\t\t\tvar i, ien;\n\n\t\t\t// Flag to note that the table is currently being destroyed - no action\n\t\t\t// should be taken\n\t\t\tsettings.bDestroying = true;\n\n\t\t\t// Fire off the destroy callbacks for plug-ins etc\n\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n\n\t\t\t// If not being removed from the document, make all columns visible\n\t\t\tif ( ! remove ) {\n\t\t\t\tnew _Api( settings ).columns().visible( true );\n\t\t\t}\n\n\t\t\t// Blitz all `DT` namespaced events (these are internal events, the\n\t\t\t// lowercase, `dt` events are user subscribed and they are responsible\n\t\t\t// for removing them\n\t\t\tjqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n\t\t\t$(window).off('.DT-'+settings.sInstance);\n\n\t\t\t// When scrolling we had to break the table up - restore it\n\t\t\tif ( table != thead.parentNode ) {\n\t\t\t\tjqTable.children('thead').detach();\n\t\t\t\tjqTable.append( thead );\n\t\t\t}\n\n\t\t\tif ( tfoot && table != tfoot.parentNode ) {\n\t\t\t\tjqTable.children('tfoot').detach();\n\t\t\t\tjqTable.append( tfoot );\n\t\t\t}\n\n\t\t\tsettings.aaSorting = [];\n\t\t\tsettings.aaSortingFixed = [];\n\t\t\t_fnSortingClasses( settings );\n\n\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );\n\n\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+\n\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n\t\t\t);\n\n\t\t\tif ( settings.bJUI ) {\n\t\t\t\t$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\n\t\t\t\t$('th, td', thead).each( function () {\n\t\t\t\t\tvar wrapper = $('div.'+classes.sSortJUIWrapper, this);\n\t\t\t\t\t$(this).append( wrapper.contents() );\n\t\t\t\t\twrapper.detach();\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Add the TR elements back into the table in their original order\n\t\t\tjqTbody.children().detach();\n\t\t\tjqTbody.append( rows );\n\n\t\t\t// Remove the DataTables generated nodes, events and classes\n\t\t\tvar removedMethod = remove ? 'remove' : 'detach';\n\t\t\tjqTable[ removedMethod ]();\n\t\t\tjqWrapper[ removedMethod ]();\n\n\t\t\t// If we need to reattach the table to the document\n\t\t\tif ( ! remove && orig ) {\n\t\t\t\t// insertBefore acts like appendChild if !arg[1]\n\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );\n\n\t\t\t\t// Restore the width of the original table - was read from the style property,\n\t\t\t\t// so we can restore directly to that\n\t\t\t\tjqTable\n\t\t\t\t\t.css( 'width', settings.sDestroyWidth )\n\t\t\t\t\t.removeClass( classes.sTable );\n\n\t\t\t\t// If the were originally stripe classes - then we add them back here.\n\t\t\t\t// Note this is not fool proof (for example if not all rows had stripe\n\t\t\t\t// classes - but it's a good effort without getting carried away\n\t\t\t\tien = settings.asDestroyStripes.length;\n\n\t\t\t\tif ( ien ) {\n\t\t\t\t\tjqTbody.children().each( function (i) {\n\t\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Remove the settings object from the settings array */\n\t\t\tvar idx = $.inArray( settings, DataTable.settings );\n\t\t\tif ( idx !== -1 ) {\n\t\t\t\tDataTable.settings.splice( idx, 1 );\n\t\t\t}\n\t\t} );\n\t} );\n\n\n\t// Add the `every()` method for rows, columns and cells in a compact form\n\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n\t\t_api_register( type+'s().every()', function ( fn ) {\n\t\t\tvar opts = this.selector.opts;\n\t\t\tvar api = this;\n\n\t\t\treturn this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n\t\t\t\t// Rows and columns:\n\t\t\t\t//  arg1 - index\n\t\t\t\t//  arg2 - table counter\n\t\t\t\t//  arg3 - loop counter\n\t\t\t\t//  arg4 - undefined\n\t\t\t\t// Cells:\n\t\t\t\t//  arg1 - row index\n\t\t\t\t//  arg2 - column index\n\t\t\t\t//  arg3 - table counter\n\t\t\t\t//  arg4 - loop counter\n\t\t\t\tfn.call(\n\t\t\t\t\tapi[ type ](\n\t\t\t\t\t\targ1,\n\t\t\t\t\t\ttype==='cell' ? arg2 : opts,\n\t\t\t\t\t\ttype==='cell' ? opts : undefined\n\t\t\t\t\t),\n\t\t\t\t\targ1, arg2, arg3, arg4\n\t\t\t\t);\n\t\t\t} );\n\t\t} );\n\t} );\n\n\n\t// i18n method for extensions to be able to use the language object from the\n\t// DataTable\n\t_api_register( 'i18n()', function ( token, def, plural ) {\n\t\tvar ctx = this.context[0];\n\t\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n\n\t\tif ( resolved === undefined ) {\n\t\t\tresolved = def;\n\t\t}\n\n\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {\n\t\t\tresolved = resolved[ plural ] !== undefined ?\n\t\t\t\tresolved[ plural ] :\n\t\t\t\tresolved._;\n\t\t}\n\n\t\treturn resolved.replace( '%d', plural ); // nb: plural might be undefined,\n\t} );\n\n\t/**\n\t * Version string for plug-ins to check compatibility. Allowed format is\n\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n\t * only for non-release builds. See http://semver.org/ for more information.\n\t *  @member\n\t *  @type string\n\t *  @default Version number\n\t */\n\tDataTable.version = \"1.10.13\";\n\n\t/**\n\t * Private data store, containing all of the settings objects that are\n\t * created for the tables on a given page.\n\t *\n\t * Note that the `DataTable.settings` object is aliased to\n\t * `jQuery.fn.dataTableExt` through which it may be accessed and\n\t * manipulated, or `jQuery.fn.dataTable.settings`.\n\t *  @member\n\t *  @type array\n\t *  @default []\n\t *  @private\n\t */\n\tDataTable.settings = [];\n\n\t/**\n\t * Object models container, for the various models that DataTables has\n\t * available to it. These models define the objects that are used to hold\n\t * the active state and configuration of the table.\n\t *  @namespace\n\t */\n\tDataTable.models = {};\n\n\n\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * search information for the global filter and individual column filters.\n\t *  @namespace\n\t */\n\tDataTable.models.oSearch = {\n\t\t/**\n\t\t * Flag to indicate if the filtering should be case insensitive or not\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bCaseInsensitive\": true,\n\n\t\t/**\n\t\t * Applied search term\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sSearch\": \"\",\n\n\t\t/**\n\t\t * Flag to indicate if the search term should be interpreted as a\n\t\t * regular expression (true) or not (false) and therefore and special\n\t\t * regex characters escaped.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bRegex\": false,\n\n\t\t/**\n\t\t * Flag to indicate if DataTables is to use its smart filtering or not.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bSmart\": true\n\t};\n\n\n\n\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * each individual row. This is the object format used for the settings\n\t * aoData array.\n\t *  @namespace\n\t */\n\tDataTable.models.oRow = {\n\t\t/**\n\t\t * TR element for the row\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTr\": null,\n\n\t\t/**\n\t\t * Array of TD elements for each row. This is null until the row has been\n\t\t * created.\n\t\t *  @type array nodes\n\t\t *  @default []\n\t\t */\n\t\t\"anCells\": null,\n\n\t\t/**\n\t\t * Data object from the original data source for the row. This is either\n\t\t * an array if using the traditional form of DataTables, or an object if\n\t\t * using mData options. The exact type will depend on the passed in\n\t\t * data from the data source, or will be an array if using DOM a data\n\t\t * source.\n\t\t *  @type array|object\n\t\t *  @default []\n\t\t */\n\t\t\"_aData\": [],\n\n\t\t/**\n\t\t * Sorting data cache - this array is ostensibly the same length as the\n\t\t * number of columns (although each index is generated only as it is\n\t\t * needed), and holds the data that is used for sorting each column in the\n\t\t * row. We do this cache generation at the start of the sort in order that\n\t\t * the formatting of the sort data need be done only once for each cell\n\t\t * per sort. This array should not be read from or written to by anything\n\t\t * other than the master sorting methods.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aSortData\": null,\n\n\t\t/**\n\t\t * Per cell filtering data cache. As per the sort data cache, used to\n\t\t * increase the performance of the filtering in DataTables\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aFilterData\": null,\n\n\t\t/**\n\t\t * Filtering data cache. This is the same as the cell filtering cache, but\n\t\t * in this case a string rather than an array. This is easily computed with\n\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\n\t\t * needed on every search (memory traded for performance)\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sFilterRow\": null,\n\n\t\t/**\n\t\t * Cache of the class name that DataTables has applied to the row, so we\n\t\t * can quickly look at this variable rather than needing to do a DOM check\n\t\t * on className for the nTr property.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *  @private\n\t\t */\n\t\t\"_sRowStripe\": \"\",\n\n\t\t/**\n\t\t * Denote if the original data source was from the DOM, or the data source\n\t\t * object. This is used for invalidating data, so DataTables can\n\t\t * automatically read data from the original source, unless uninstructed\n\t\t * otherwise.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"src\": null,\n\n\t\t/**\n\t\t * Index in the aoData array. This saves an indexOf lookup when we have the\n\t\t * object, but want to know the index\n\t\t *  @type integer\n\t\t *  @default -1\n\t\t *  @private\n\t\t */\n\t\t\"idx\": -1\n\t};\n\n\n\t/**\n\t * Template object for the column information object in DataTables. This object\n\t * is held in the settings aoColumns array and contains all the information that\n\t * DataTables needs about each individual column.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults.column}\n\t * but this one is the internal data store for DataTables's cache of columns.\n\t * It should NOT be manipulated outside of DataTables. Any configuration should\n\t * be done through the initialisation options.\n\t *  @namespace\n\t */\n\tDataTable.models.oColumn = {\n\t\t/**\n\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it\n\t\t * is faster to just hold it as a variable\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"idx\": null,\n\n\t\t/**\n\t\t * A list of the columns that sorting should occur on when this column\n\t\t * is sorted. That this property is an array allows multi-column sorting\n\t\t * to be defined for a column (for example first name / last name columns\n\t\t * would benefit from this). The values are integers pointing to the\n\t\t * columns to be sorted on (typically it will be a single integer pointing\n\t\t * at itself, but that doesn't need to be the case).\n\t\t *  @type array\n\t\t */\n\t\t\"aDataSort\": null,\n\n\t\t/**\n\t\t * Define the sorting directions that are applied to the column, in sequence\n\t\t * as the column is repeatedly sorted upon - i.e. the first value is used\n\t\t * as the sorting direction when the column if first sorted (clicked on).\n\t\t * Sort it again (click again) and it will move on to the next index.\n\t\t * Repeat until loop.\n\t\t *  @type array\n\t\t */\n\t\t\"asSorting\": null,\n\n\t\t/**\n\t\t * Flag to indicate if the column is searchable, and thus should be included\n\t\t * in the filtering or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSearchable\": null,\n\n\t\t/**\n\t\t * Flag to indicate if the column is sortable or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortable\": null,\n\n\t\t/**\n\t\t * Flag to indicate if the column is currently visible in the table or not\n\t\t *  @type boolean\n\t\t */\n\t\t\"bVisible\": null,\n\n\t\t/**\n\t\t * Store for manual type assignment using the `column.type` option. This\n\t\t * is held in store so we can manipulate the column's `sType` property.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sManualType\": null,\n\n\t\t/**\n\t\t * Flag to indicate if HTML5 data attributes should be used as the data\n\t\t * source for filtering or sorting. True is either are.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @private\n\t\t */\n\t\t\"_bAttrSrc\": false,\n\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} nTd The TD node that has been created\n\t\t *  @param {*} sData The Data for the cell\n\t\t *  @param {array|object} oData The data for the whole row\n\t\t *  @param {int} iRow The row index for the aoData data store\n\t\t *  @default null\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\n\t\t/**\n\t\t * Function to get data from a cell in a column. You should <b>never</b>\n\t\t * access data directly through _aData internally in DataTables - always use\n\t\t * the method attached to this property. It allows mData to function as\n\t\t * required. This function is automatically assigned by the column\n\t\t * initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {string} sSpecific The specific data type you want to get -\n\t\t *    'display', 'type' 'filter' 'sort'\n\t\t *  @returns {*} The data for the cell from the given row's data\n\t\t *  @default null\n\t\t */\n\t\t\"fnGetData\": null,\n\n\t\t/**\n\t\t * Function to set data for a cell in the column. You should <b>never</b>\n\t\t * set the data directly to _aData internally in DataTables - always use\n\t\t * this method. It allows mData to function as required. This function\n\t\t * is automatically assigned by the column initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {*} sValue Value to set\n\t\t *  @default null\n\t\t */\n\t\t\"fnSetData\": null,\n\n\t\t/**\n\t\t * Property to read the value for the cells in the column from the data\n\t\t * source array / object. If null, then the default content is used, if a\n\t\t * function is given then the return from the function is used.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mData\": null,\n\n\t\t/**\n\t\t * Partner property to mData which is used (only when defined) to get\n\t\t * the data - i.e. it is basically the same as mData, but without the\n\t\t * 'set' option, and also the data fed to it is the result from mData.\n\t\t * This is the rendering method to match the data method of mData.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mRender\": null,\n\n\t\t/**\n\t\t * Unique header TH/TD element for this column - this is what the sorting\n\t\t * listener is attached to (if sorting is enabled.)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTh\": null,\n\n\t\t/**\n\t\t * Unique footer TH/TD element for this column (if there is one). Not used\n\t\t * in DataTables as such, but can be used for plug-ins to reference the\n\t\t * footer for each column.\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTf\": null,\n\n\t\t/**\n\t\t * The class to apply to all TD elements in the table's TBODY for the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sClass\": null,\n\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t *  @type string\n\t\t */\n\t\t\"sContentPadding\": null,\n\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because mData\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDefaultContent\": null,\n\n\t\t/**\n\t\t * Name for the column, allowing reference to the column by name as well as\n\t\t * by index (needs a lookup to work by name).\n\t\t *  @type string\n\t\t */\n\t\t\"sName\": null,\n\n\t\t/**\n\t\t * Custom sorting data type - defines which of the available plug-ins in\n\t\t * afnSortData the custom sorting will use - if any is defined.\n\t\t *  @type string\n\t\t *  @default std\n\t\t */\n\t\t\"sSortDataType\": 'std',\n\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClass\": null,\n\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column -\n\t\t * when jQuery UI theming is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClassJUI\": null,\n\n\t\t/**\n\t\t * Title of the column - what is seen in the TH element (nTh).\n\t\t *  @type string\n\t\t */\n\t\t\"sTitle\": null,\n\n\t\t/**\n\t\t * Column sorting and filtering type\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sType\": null,\n\n\t\t/**\n\t\t * Width of the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidth\": null,\n\n\t\t/**\n\t\t * Width of the column when it was first \"encountered\"\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidthOrig\": null\n\t};\n\n\n\t/*\n\t * Developer note: The properties of the object below are given in Hungarian\n\t * notation, that was used as the interface for DataTables prior to v1.10, however\n\t * from v1.10 onwards the primary interface is camel case. In order to avoid\n\t * breaking backwards compatibility utterly with this change, the Hungarian\n\t * version is still, internally the primary interface, but is is not documented\n\t * - hence the @name tags in each doc comment. This allows a Javascript function\n\t * to create a map from Hungarian notation to camel case (going the other direction\n\t * would require each property to be listed, which would at around 3K to the size\n\t * of DataTables, while this method is about a 0.5K hit.\n\t *\n\t * Ultimately this does pave the way for Hungarian notation to be dropped\n\t * completely, but that is a massive amount of work and will break current\n\t * installs (therefore is on-hold until v2).\n\t */\n\n\t/**\n\t * Initialisation options that can be given to DataTables at initialisation\n\t * time.\n\t *  @namespace\n\t */\n\tDataTable.defaults = {\n\t\t/**\n\t\t * An array of data to use for the table, passed in at initialisation which\n\t\t * will be used in preference to any data which is already in the DOM. This is\n\t\t * particularly useful for constructing tables purely in Javascript, for\n\t\t * example with a custom Ajax call.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.data\n\t\t *\n\t\t *  @example\n\t\t *    // Using a 2D array data source\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\" },\n\t\t *          { \"title\": \"Browser\" },\n\t\t *          { \"title\": \"Platform\" },\n\t\t *          { \"title\": \"Version\" },\n\t\t *          { \"title\": \"Grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using an array of objects as a data source (`data`)\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  4,\n\t\t *            \"grade\":    \"X\"\n\t\t *          },\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  5,\n\t\t *            \"grade\":    \"C\"\n\t\t *          }\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaData\": null,\n\n\n\t\t/**\n\t\t * If ordering is enabled, then DataTables will perform a first pass sort on\n\t\t * initialisation. You can define which column(s) the sort is performed\n\t\t * upon, and the sorting direction, with this variable. The `sorting` array\n\t\t * should contain an array for each column to be sorted initially containing\n\t\t * the column's index and a direction string ('asc' or 'desc').\n\t\t *  @type array\n\t\t *  @default [[0,'asc']]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.order\n\t\t *\n\t\t *  @example\n\t\t *    // Sort by 3rd column first, and then 4th column\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *    // No initial sorting\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": []\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaSorting\": [[0,'asc']],\n\n\n\t\t/**\n\t\t * This parameter is basically identical to the `sorting` parameter, but\n\t\t * cannot be overridden by user interaction with the table. What this means\n\t\t * is that you could have a column (visible or hidden) which the sorting\n\t\t * will always be forced on first - any sorting after that (from the user)\n\t\t * will then be performed as required. This can be useful for grouping rows\n\t\t * together.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.orderFixed\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderFixed\": [[0,'asc']]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\n\n\t\t/**\n\t\t * DataTables can be instructed to load data to display in the table from a\n\t\t * Ajax source. This option defines how that Ajax call is made and where to.\n\t\t *\n\t\t * The `ajax` property has three different modes of operation, depending on\n\t\t * how it is defined. These are:\n\t\t *\n\t\t * * `string` - Set the URL from where the data should be loaded from.\n\t\t * * `object` - Define properties for `jQuery.ajax`.\n\t\t * * `function` - Custom data get function\n\t\t *\n\t\t * `string`\n\t\t * --------\n\t\t *\n\t\t * As a string, the `ajax` property simply defines the URL from which\n\t\t * DataTables will load data.\n\t\t *\n\t\t * `object`\n\t\t * --------\n\t\t *\n\t\t * As an object, the parameters in the object are passed to\n\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n\t\t * of the Ajax request. DataTables has a number of default parameters which\n\t\t * you can override using this option. Please refer to the jQuery\n\t\t * documentation for a full description of the options available, although\n\t\t * the following parameters provide additional options in DataTables or\n\t\t * require special consideration:\n\t\t *\n\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it\n\t\t *   can also be used as a function to manipulate the data DataTables sends\n\t\t *   to the server. The function takes a single parameter, an object of\n\t\t *   parameters with the values that DataTables has readied for sending. An\n\t\t *   object may be returned which will be merged into the DataTables\n\t\t *   defaults, or you can add the items to the object that was passed in and\n\t\t *   not return anything from the function. This supersedes `fnServerParams`\n\t\t *   from DataTables 1.9-.\n\t\t *\n\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or\n\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n\t\t *   from an Ajax source or for server-side processing - this parameter\n\t\t *   allows that property to be changed. You can use Javascript dotted\n\t\t *   object notation to get a data source for multiple levels of nesting, or\n\t\t *   it my be used as a function. As a function it takes a single parameter,\n\t\t *   the JSON returned from the server, which can be manipulated as\n\t\t *   required, with the returned value being that used by DataTables as the\n\t\t *   data source for the table. This supersedes `sAjaxDataProp` from\n\t\t *   DataTables 1.9-.\n\t\t *\n\t\t * * `success` - Should not be overridden it is used internally in\n\t\t *   DataTables. To manipulate / transform the data returned by the server\n\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\t\t *\n\t\t * `function`\n\t\t * ----------\n\t\t *\n\t\t * As a function, making the Ajax call is left up to yourself allowing\n\t\t * complete control of the Ajax request. Indeed, if desired, a method other\n\t\t * than Ajax could be used to obtain the required data, such as Web storage\n\t\t * or an AIR database.\n\t\t *\n\t\t * The function is given four parameters and no return is required. The\n\t\t * parameters are:\n\t\t *\n\t\t * 1. _object_ - Data to send to the server\n\t\t * 2. _function_ - Callback function that must be executed when the required\n\t\t *    data has been obtained. That data should be passed into the callback\n\t\t *    as the only parameter\n\t\t * 3. _object_ - DataTables settings object for the table\n\t\t *\n\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.\n\t\t *\n\t\t *  @type string|object|function\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.ajax\n\t\t *  @since 1.10.0\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax.\n\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": \"data.json\"\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"tableData\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n\t\t *   // from a plain array rather than an array in an object\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Manipulate the data returned from the server - add a link to data\n\t\t *   // (note this can, should, be done using `render` for the column - this\n\t\t *   // is just a simple example of how the data can be manipulated).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": function ( json ) {\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n\t\t *         }\n\t\t *         return json;\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Add data to the request\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"data\": function ( d ) {\n\t\t *         return {\n\t\t *           \"extra_search\": $('#extra').val()\n\t\t *         };\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Send request as POST\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"type\": \"POST\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get the data from localStorage (could interface with a form for\n\t\t *   // adding, editing and removing rows).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": function (data, callback, settings) {\n\t\t *       callback(\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\n\t\t *       );\n\t\t *     }\n\t\t *   } );\n\t\t */\n\t\t\"ajax\": null,\n\n\n\t\t/**\n\t\t * This parameter allows you to readily specify the entries in the length drop\n\t\t * down menu that DataTables shows when pagination is enabled. It can be\n\t\t * either a 1D array of options which will be used for both the displayed\n\t\t * option and the value, or a 2D array which will use the array in the first\n\t\t * position as the value, and the array in the second position as the\n\t\t * displayed options (useful for language strings such as 'All').\n\t\t *\n\t\t * Note that the `pageLength` property will be automatically set to the\n\t\t * first value given in this array, unless `pageLength` is also provided.\n\t\t *  @type array\n\t\t *  @default [ 10, 25, 50, 100 ]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.lengthMenu\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],\n\n\n\t\t/**\n\t\t * The `columns` option in the initialisation parameter allows you to define\n\t\t * details about the way individual columns behave. For a full list of\n\t\t * column options that can be set, please see\n\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\n\t\t * define your columns, you must have an entry in the array for every single\n\t\t * column that you have in your table (these can be null if you don't which\n\t\t * to specify any options).\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.column\n\t\t */\n\t\t\"aoColumns\": null,\n\n\t\t/**\n\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific\n\t\t * column, multiple columns, or all columns, using the `targets` property of\n\t\t * each object in the array. This allows great flexibility when creating\n\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the\n\t\t * columns you specifically want. `columnDefs` may use any of the column\n\t\t * options available: {@link DataTable.defaults.column}, but it _must_\n\t\t * have `targets` defined in each object in the array. Values in the `targets`\n\t\t * array may be:\n\t\t *   <ul>\n\t\t *     <li>a string - class name will be matched on the TH for the column</li>\n\t\t *     <li>0 or a positive integer - column index counting from the left</li>\n\t\t *     <li>a negative integer - column index counting from the right</li>\n\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n\t\t *   </ul>\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.columnDefs\n\t\t */\n\t\t\"aoColumnDefs\": null,\n\n\n\t\t/**\n\t\t * Basically the same as `search`, this parameter defines the individual column\n\t\t * filtering state at initialisation time. The array must be of the same size\n\t\t * as the number of columns, and each element be an object with the parameters\n\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\n\t\t * accepted and the default will be used.\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.searchCols\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchCols\": [\n\t\t *          null,\n\t\t *          { \"search\": \"My filter\" },\n\t\t *          null,\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aoSearchCols\": [],\n\n\n\t\t/**\n\t\t * An array of CSS classes that should be applied to displayed rows. This\n\t\t * array may be of any length, and DataTables will apply each class\n\t\t * sequentially, looping when required.\n\t\t *  @type array\n\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n\t\t *    options</i>\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.stripeClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"asStripeClasses\": null,\n\n\n\t\t/**\n\t\t * Enable or disable automatic column width calculation. This can be disabled\n\t\t * as an optimisation (it takes some time to calculate the widths) if the\n\t\t * tables widths are passed in using `columns`.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.autoWidth\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"autoWidth\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bAutoWidth\": true,\n\n\n\t\t/**\n\t\t * Deferred rendering can provide DataTables with a huge speed boost when you\n\t\t * are using an Ajax or JS data source for the table. This option, when set to\n\t\t * true, will cause DataTables to defer the creation of the table elements for\n\t\t * each row until they are needed for a draw - saving a significant amount of\n\t\t * time.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.deferRender\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajax\": \"sources/arrays.txt\",\n\t\t *        \"deferRender\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDeferRender\": false,\n\n\n\t\t/**\n\t\t * Replace a DataTable which matches the given selector and replace it with\n\t\t * one which has the properties of the new initialisation object passed. If no\n\t\t * table matches the selector, then the new DataTable will be constructed as\n\t\t * per normal.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.destroy\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"srollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      // Some time later....\n\t\t *      $('#example').dataTable( {\n\t\t *        \"filter\": false,\n\t\t *        \"destroy\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDestroy\": false,\n\n\n\t\t/**\n\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n\t\t * that it allows the end user to input multiple words (space separated) and\n\t\t * will match a row containing those words, even if not in the order that was\n\t\t * specified (this allow matching across multiple columns). Note that if you\n\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the\n\t\t * default filtering input box and retain filtering abilities, please use\n\t\t * {@link DataTable.defaults.dom}.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.searching\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searching\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bFilter\": true,\n\n\n\t\t/**\n\t\t * Enable or disable the table information display. This shows information\n\t\t * about the data that is currently visible on the page, including information\n\t\t * about filtered data if that action is being performed.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.info\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"info\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bInfo\": true,\n\n\n\t\t/**\n\t\t * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\n\t\t * slightly different and additional mark-up from what DataTables has\n\t\t * traditionally used).\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.jQueryUI\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"jQueryUI\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bJQueryUI\": false,\n\n\n\t\t/**\n\t\t * Allows the end user to select the size of a formatted page from a select\n\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.lengthChange\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthChange\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bLengthChange\": true,\n\n\n\t\t/**\n\t\t * Enable or disable pagination.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.paging\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"paging\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bPaginate\": true,\n\n\n\t\t/**\n\t\t * Enable or disable the display of a 'processing' indicator when the table is\n\t\t * being processed (e.g. a sort). This is particularly useful for tables with\n\t\t * large amounts of data where it can take a noticeable amount of time to sort\n\t\t * the entries.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.processing\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"processing\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bProcessing\": false,\n\n\n\t\t/**\n\t\t * Retrieve the DataTables object for the given selector. Note that if the\n\t\t * table has already been initialised, this parameter will cause DataTables\n\t\t * to simply return the object that has already been set up - it will not take\n\t\t * account of any changes you might have made to the initialisation object\n\t\t * passed to DataTables (setting this parameter to true is an acknowledgement\n\t\t * that you understand this). `destroy` can be used to reinitialise a table if\n\t\t * you need.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.retrieve\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      initTable();\n\t\t *      tableActions();\n\t\t *    } );\n\t\t *\n\t\t *    function initTable ()\n\t\t *    {\n\t\t *      return $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false,\n\t\t *        \"retrieve\": true\n\t\t *      } );\n\t\t *    }\n\t\t *\n\t\t *    function tableActions ()\n\t\t *    {\n\t\t *      var table = initTable();\n\t\t *      // perform API operations with oTable\n\t\t *    }\n\t\t */\n\t\t\"bRetrieve\": false,\n\n\n\t\t/**\n\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of\n\t\t * the table's viewport to the given height at all times (useful for layout).\n\t\t * However, this can look odd when filtering data down to a small data set,\n\t\t * and the footer is left \"floating\" further down. This parameter (when\n\t\t * enabled) will cause DataTables to collapse the table's viewport down when\n\t\t * the result set will fit within the given Y height.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollCollapse\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200\",\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bScrollCollapse\": false,\n\n\n\t\t/**\n\t\t * Configure DataTables to use server-side processing. Note that the\n\t\t * `ajax` parameter must also be given in order to give DataTables a\n\t\t * source to obtain the required data for each draw.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverSide\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"xhr.php\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bServerSide\": false,\n\n\n\t\t/**\n\t\t * Enable or disable sorting of columns. Sorting of individual columns can be\n\t\t * disabled by the `sortable` option for each column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.ordering\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ordering\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSort\": true,\n\n\n\t\t/**\n\t\t * Enable or display DataTables' ability to sort multiple columns at the\n\t\t * same time (activated by shift-click by the user).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderMulti\n\t\t *\n\t\t *  @example\n\t\t *    // Disable multiple column sorting ability\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderMulti\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortMulti\": true,\n\n\n\t\t/**\n\t\t * Allows control over whether DataTables should use the top (true) unique\n\t\t * cell that is found for a single column, or the bottom (false - default).\n\t\t * This is useful when using complex headers.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderCellsTop\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderCellsTop\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortCellsTop\": false,\n\n\n\t\t/**\n\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is\n\t\t * presented as a feature switch as it can increase processing time (while\n\t\t * classes are removed and added) so for large data sets you might want to\n\t\t * turn this off.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.orderClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderClasses\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortClasses\": true,\n\n\n\t\t/**\n\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n\t\t * used to save table display information such as pagination information,\n\t\t * display length, filtering and sorting. As such when the end user reloads\n\t\t * the page the display display will match what thy had previously set up.\n\t\t *\n\t\t * Due to the use of `localStorage` the default state saving is not supported\n\t\t * in IE6 or 7. If state saving is required in those browsers, use\n\t\t * `stateSaveCallback` to provide a storage solution such as cookies.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.stateSave\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bStateSave\": false,\n\n\n\t\t/**\n\t\t * This function is called when a TR element is created (and all TD child\n\t\t * elements have been inserted), or registered if using a DOM source, allowing\n\t\t * manipulation of the TR element (adding classes etc).\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} dataIndex The index of this row in the internal aoData array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.createdRow\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" )\n\t\t *          {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedRow\": null,\n\n\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify any aspect you want about the created DOM.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.drawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"drawCallback\": function( settings ) {\n\t\t *          alert( 'DataTables has redrawn the table' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnDrawCallback\": null,\n\n\n\t\t/**\n\t\t * Identical to fnHeaderCallback() but for the table footer this function\n\t\t * allows you to modify the table footer on every 'draw' event.\n\t\t *  @type function\n\t\t *  @param {node} foot \"TR\" element for the footer\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.footerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnFooterCallback\": null,\n\n\n\t\t/**\n\t\t * When rendering large numbers in the information element for the table\n\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\n\t\t * rendered as \"1,000,000\") to help readability for the end user. This\n\t\t * function will override the default method DataTables uses.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {int} toFormat number to be formatted\n\t\t *  @returns {string} formatted string for DataTables to show the number\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.formatNumber\n\t\t *\n\t\t *  @example\n\t\t *    // Format a number using a single quote for the separator (note that\n\t\t *    // this can also be done with the language.thousands option)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"formatNumber\": function ( toFormat ) {\n\t\t *          return toFormat.toString().replace(\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n\t\t *          );\n\t\t *        };\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnFormatNumber\": function ( toFormat ) {\n\t\t\treturn toFormat.toString().replace(\n\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,\n\t\t\t\tthis.oLanguage.sThousands\n\t\t\t);\n\t\t},\n\n\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify the header row. This can be used to calculate and\n\t\t * display useful information about the table.\n\t\t *  @type function\n\t\t *  @param {node} head \"TR\" element for the header\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.headerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnHeaderCallback\": null,\n\n\n\t\t/**\n\t\t * The information element can be used to convey information about the current\n\t\t * state of the table. Although the internationalisation options presented by\n\t\t * DataTables are quite capable of dealing with most customisations, there may\n\t\t * be times where you wish to customise the string further. This callback\n\t\t * allows you to do exactly that.\n\t\t *  @type function\n\t\t *  @param {object} oSettings DataTables settings object\n\t\t *  @param {int} start Starting position in data for the draw\n\t\t *  @param {int} end End position in data for the draw\n\t\t *  @param {int} max Total number of rows in the table (regardless of\n\t\t *    filtering)\n\t\t *  @param {int} total Total number of rows in the data set, after filtering\n\t\t *  @param {string} pre The string that DataTables has formatted using it's\n\t\t *    own rules\n\t\t *  @returns {string} The string to be displayed in the information element.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.infoCallback\n\t\t *\n\t\t *  @example\n\t\t *    $('#example').dataTable( {\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n\t\t *        return start +\" to \"+ end;\n\t\t *      }\n\t\t *    } );\n\t\t */\n\t\t\"fnInfoCallback\": null,\n\n\n\t\t/**\n\t\t * Called when the table has been initialised. Normally DataTables will\n\t\t * initialise sequentially and there will be no need for this function,\n\t\t * however, this does not hold true when using external language information\n\t\t * since that is obtained using an async XHR call.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} json The JSON object request from the server - only\n\t\t *    present if client-side Ajax sourced data is used\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.initComplete\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"initComplete\": function(settings, json) {\n\t\t *          alert( 'DataTables has finished its initialisation.' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnInitComplete\": null,\n\n\n\t\t/**\n\t\t * Called at the very start of each table draw and can be used to cancel the\n\t\t * draw by returning false, any other return (including undefined) results in\n\t\t * the full draw occurring).\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @returns {boolean} False will cancel the draw, anything else (including no\n\t\t *    return) will allow it to complete.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.preDrawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"preDrawCallback\": function( settings ) {\n\t\t *          if ( $('#test').val() == 1 ) {\n\t\t *            return false;\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnPreDrawCallback\": null,\n\n\n\t\t/**\n\t\t * This function allows you to 'post process' each row after it have been\n\t\t * generated for each table draw, but before it is rendered on screen. This\n\t\t * function might be used for setting the row class name etc.\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} displayIndex The display index for the current table draw\n\t\t *  @param {int} displayIndexFull The index of the data in the full list of\n\t\t *    rows (after filtering)\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.rowCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" ) {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnRowCallback\": null,\n\n\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * This parameter allows you to override the default function which obtains\n\t\t * the data from the server so something more suitable for your application.\n\t\t * For example you could use POST data, or pull information from a Gears or\n\t\t * AIR database.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)\n\t\t *  @param {array} data A key/value pair object containing the data to send\n\t\t *    to the server\n\t\t *  @param {function} callback to be called on completion of the data get\n\t\t *    process that will draw the data on the page.\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverData\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerData\": null,\n\n\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t *  It is often useful to send extra data to the server when making an Ajax\n\t\t * request - for example custom filtering information, and this callback\n\t\t * function makes it trivial to send extra information to the server. The\n\t\t * passed in parameter is the data set that has been constructed by\n\t\t * DataTables, and you can add to this or modify it as you require.\n\t\t *  @type function\n\t\t *  @param {array} data Data array (array of objects which are name/value\n\t\t *    pairs) that has been constructed by DataTables and will be sent to the\n\t\t *    server. In the case of Ajax sourced data with server-side processing\n\t\t *    this will be an empty array, for server-side processing there will be a\n\t\t *    significant number of parameters!\n\t\t *  @returns {undefined} Ensure that you modify the data array passed in,\n\t\t *    as this is passed by reference.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverParams\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerParams\": null,\n\n\n\t\t/**\n\t\t * Load the table state. With this function you can define from where, and how, the\n\t\t * state of a table is loaded. By default DataTables will load from `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} callback Callback that can be executed when done. It\n\t\t *    should be passed the loaded state object.\n\t\t *  @return {object} The DataTables state object to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadCallback\": function (settings, callback) {\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_load\",\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"success\": function (json) {\n\t\t *              callback( json );\n\t\t *            }\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadCallback\": function ( settings ) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(\n\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\n\n\t\t/**\n\t\t * Callback which allows modification of the saved state prior to loading that state.\n\t\t * This callback is called when the table is loading state from the stored data, but\n\t\t * prior to the settings object being modified by the saved state. Note that for\n\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n\t\t * a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that is to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never loaded\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Disallow state loading by returning false\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          return false;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadParams\": null,\n\n\n\t\t/**\n\t\t * Callback that is called when the state has been loaded from the state saving method\n\t\t * and the DataTables settings object has been modified as a result of the loaded state.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that was loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoaded\n\t\t *\n\t\t *  @example\n\t\t *    // Show an alert with the filtering value that was saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoaded\": function (settings, data) {\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoaded\": null,\n\n\n\t\t/**\n\t\t * Save the table state. This function allows you to define where and how the state\n\t\t * information for the table is stored By default DataTables will use `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveCallback\": function (settings, data) {\n\t\t *          // Send an Ajax request to the server with the state object\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_save\",\n\t\t *            \"data\": data,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"method\": \"POST\"\n\t\t *            \"success\": function () {}\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveCallback\": function ( settings, data ) {\n\t\t\ttry {\n\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,\n\t\t\t\t\tJSON.stringify( data )\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\n\n\t\t/**\n\t\t * Callback which allows modification of the state to be saved. Called when the table\n\t\t * has changed state a new state save is required. This method allows modification of\n\t\t * the state saving object prior to actually doing the save, including addition or\n\t\t * other state properties or modification. Note that for plug-in authors, you should\n\t\t * use the `stateSaveParams` event to save parameters for a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveParams\": null,\n\n\n\t\t/**\n\t\t * Duration for which the saved state information is considered valid. After this period\n\t\t * has elapsed the state will be returned to the default.\n\t\t * Value is given in seconds.\n\t\t *  @type int\n\t\t *  @default 7200 <i>(2 hours)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.stateDuration\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iStateDuration\": 7200,\n\n\n\t\t/**\n\t\t * When enabled DataTables will not make a request to the server for the first\n\t\t * page draw - rather it will use the data already on the page (no sorting etc\n\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n\t\t * is used to indicate that deferred loading is required, but it is also used\n\t\t * to tell DataTables how many records there are in the full table (allowing\n\t\t * the information element and pagination to be displayed correctly). In the case\n\t\t * where a filtering is applied to the table on initial load, this can be\n\t\t * indicated by giving the parameter as an array, where the first element is\n\t\t * the number of records available after filtering and the second element is the\n\t\t * number of records without filtering (allowing the table information element\n\t\t * to be shown correctly).\n\t\t *  @type int | array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.deferLoading\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records available in the table, no filtering applied\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": 57\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": [ 57, 100 ],\n\t\t *        \"search\": {\n\t\t *          \"search\": \"my_filter\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iDeferLoading\": null,\n\n\n\t\t/**\n\t\t * Number of rows to display on a single page when using pagination. If\n\t\t * feature enabled (`lengthChange`) then the end user will be able to override\n\t\t * this to a custom setting using a pop-up menu.\n\t\t *  @type int\n\t\t *  @default 10\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pageLength\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pageLength\": 50\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayLength\": 10,\n\n\n\t\t/**\n\t\t * Define the starting point for data display when using DataTables with\n\t\t * pagination. Note that this parameter is the number of records, rather than\n\t\t * the page number, so if you have 10 records per page and want to start on\n\t\t * the third page, it should be \"20\".\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.displayStart\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"displayStart\": 20\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayStart\": 0,\n\n\n\t\t/**\n\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\n\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This\n\t\t * allows you to tab through the controls and press the enter key to activate them.\n\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\n\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to\n\t\t * disable built-in keyboard navigation.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.tabIndex\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"tabIndex\": 1\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iTabIndex\": 0,\n\n\n\t\t/**\n\t\t * Classes that DataTables assigns to the various components and features\n\t\t * that it adds to the HTML table. This allows classes to be configured\n\t\t * during initialisation in addition to through the static\n\t\t * {@link DataTable.ext.oStdClasses} object).\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.classes\n\t\t */\n\t\t\"oClasses\": {},\n\n\n\t\t/**\n\t\t * All strings that DataTables uses in the user interface that it creates\n\t\t * are defined in this object, allowing you to modified them individually or\n\t\t * completely replace them all as required.\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.language\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\n\t\t\t * actually visible on the page, but will be read by screenreaders, and thus\n\t\t\t * must be internationalised as well).\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.aria\n\t\t\t */\n\t\t\t\"oAria\": {\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted ascending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",\n\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted descending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Pagination string used by DataTables for the built-in pagination\n\t\t\t * control types.\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.paginate\n\t\t\t */\n\t\t\t\"oPaginate\": {\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the first page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default First\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.first\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"first\": \"First page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sFirst\": \"First\",\n\n\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the last page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Last\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.last\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"last\": \"Last page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sLast\": \"Last\",\n\n\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the\n\t\t\t\t * next page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Next\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.next\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"next\": \"Next page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sNext\": \"Next\",\n\n\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to\n\t\t\t\t * the previous page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Previous\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.previous\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"previous\": \"Previous page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sPrevious\": \"Previous\"\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This string is shown in preference to `zeroRecords` when the table is\n\t\t\t * empty of data (regardless of filtering). Note that this is an optional\n\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\n\t\t\t * instead (either the default or given value).\n\t\t\t *  @type string\n\t\t\t *  @default No data available in table\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.emptyTable\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"emptyTable\": \"No data available in table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sEmptyTable\": \"No data available in table\",\n\n\n\t\t\t/**\n\t\t\t * This string gives information to the end user about the information\n\t\t\t * that is current on display on the page. The following tokens can be\n\t\t\t * used in the string and will be dynamically replaced as the table\n\t\t\t * display updates. This tokens can be placed anywhere in the string, or\n\t\t\t * removed as needed by the language requires:\n\t\t\t *\n\t\t\t * * `\\_START\\_` - Display index of the first record on the current page\n\t\t\t * * `\\_END\\_` - Display index of the last record on the current page\n\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\n\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\n\t\t\t * * `\\_PAGE\\_` - Current page number\n\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\n\t\t\t *\n\t\t\t *  @type string\n\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.info\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n\n\t\t\t/**\n\t\t\t * Display information string for when the table is empty. Typically the\n\t\t\t * format of this string should match `info`.\n\t\t\t *  @type string\n\t\t\t *  @default Showing 0 to 0 of 0 entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoEmpty\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n\n\t\t\t/**\n\t\t\t * When a user filters the information in a table, this string is appended\n\t\t\t * to the information (`info`) to give an idea of how strong the filtering\n\t\t\t * is. The variable _MAX_ is dynamically updated.\n\t\t\t *  @type string\n\t\t\t *  @default (filtered from _MAX_ total entries)\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoFiltered\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n\n\t\t\t/**\n\t\t\t * If can be useful to append extra information to the info string at times,\n\t\t\t * and this variable does exactly that. This information will be appended to\n\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n\t\t\t * being used) at all times.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoPostFix\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoPostFix\": \"\",\n\n\n\t\t\t/**\n\t\t\t * This decimal place operator is a little different from the other\n\t\t\t * language options since DataTables doesn't output floating point\n\t\t\t * numbers, so it won't ever use this for display of a number. Rather,\n\t\t\t * what this parameter does is modify the sort methods of the table so\n\t\t\t * that numbers which are in a format which has a character other than\n\t\t\t * a period (`.`) as a decimal place will be sorted numerically.\n\t\t\t *\n\t\t\t * Note that numbers with different decimal places cannot be shown in\n\t\t\t * the same table and still be sortable, the table must be consistent.\n\t\t\t * However, multiple different tables on the page can use different\n\t\t\t * decimal place characters.\n\t\t\t *  @type string\n\t\t\t *  @default\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.decimal\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"decimal\": \",\"\n\t\t\t *          \"thousands\": \".\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sDecimal\": \"\",\n\n\n\t\t\t/**\n\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is\n\t\t\t * used to format large numbers that are used in the table information.\n\t\t\t * By default a comma is used, but this can be trivially changed to any\n\t\t\t * character you wish with this parameter.\n\t\t\t *  @type string\n\t\t\t *  @default ,\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.thousands\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"thousands\": \"'\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sThousands\": \",\",\n\n\n\t\t\t/**\n\t\t\t * Detail the action that will be taken when the drop down menu for the\n\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced\n\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\n\t\t\t * with a custom select box if required.\n\t\t\t *  @type string\n\t\t\t *  @default Show _MENU_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.lengthMenu\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language change only\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language and options change\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\n\t\t\t *            '<option value=\"10\">10</option>'+\n\t\t\t *            '<option value=\"20\">20</option>'+\n\t\t\t *            '<option value=\"30\">30</option>'+\n\t\t\t *            '<option value=\"40\">40</option>'+\n\t\t\t *            '<option value=\"50\">50</option>'+\n\t\t\t *            '<option value=\"-1\">All</option>'+\n\t\t\t *            '</select> records'\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",\n\n\n\t\t\t/**\n\t\t\t * When using Ajax sourced data and during the first draw when DataTables is\n\t\t\t * gathering the data, this message is shown in an empty row in the table to\n\t\t\t * indicate to the end user the the data is being loaded. Note that this\n\t\t\t * parameter is not used when loading data by server-side processing, just\n\t\t\t * Ajax sourced data with client-side processing.\n\t\t\t *  @type string\n\t\t\t *  @default Loading...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.loadingRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLoadingRecords\": \"Loading...\",\n\n\n\t\t\t/**\n\t\t\t * Text which is displayed when the table is processing a user action\n\t\t\t * (usually a sort command or similar).\n\t\t\t *  @type string\n\t\t\t *  @default Processing...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.processing\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sProcessing\": \"Processing...\",\n\n\n\t\t\t/**\n\t\t\t * Details the actions that will be taken when the user types into the\n\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\n\t\t\t * is replaced with the HTML text box for the filtering input allowing\n\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\n\t\t\t * then the input box is appended to the string automatically.\n\t\t\t *  @type string\n\t\t\t *  @default Search:\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.search\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Input text box will be appended at the end automatically\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Filter records:\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Specify where the filter should appear\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sSearch\": \"Search:\",\n\n\n\t\t\t/**\n\t\t\t * Assign a `placeholder` attribute to the search `input` element\n\t\t\t *  @type string\n\t\t\t *  @default\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.searchPlaceholder\n\t\t\t */\n\t\t\t\"sSearchPlaceholder\": \"\",\n\n\n\t\t\t/**\n\t\t\t * All of the language information can be stored in a file on the\n\t\t\t * server-side, which DataTables will look up if this parameter is passed.\n\t\t\t * It must store the URL of the language file, which is in a JSON format,\n\t\t\t * and the object has the same properties as the oLanguage object in the\n\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of\n\t\t\t * the example language files to see how this works in action.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string - i.e. disabled</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.url\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sUrl\": \"\",\n\n\n\t\t\t/**\n\t\t\t * Text shown inside the table records when the is no information to be\n\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\n\t\t\t * information in the table at all (regardless of filtering).\n\t\t\t *  @type string\n\t\t\t *  @default No matching records found\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.zeroRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"zeroRecords\": \"No records to display\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sZeroRecords\": \"No matching records found\"\n\t\t},\n\n\n\t\t/**\n\t\t * This parameter allows you to have define the global filtering state at\n\t\t * initialisation time. As an object the `search` parameter must be\n\t\t * defined, but all other parameters are optional. When `regex` is true,\n\t\t * the search string will be treated as a regular expression, when false\n\t\t * (default) it will be treated as a straight string. When `smart`\n\t\t * DataTables will use it's smart filtering methods (to word match at\n\t\t * any point in the data), when false this will not be done.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.search\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"search\": {\"search\": \"Initial search\"}\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n\n\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * By default DataTables will look for the property `data` (or `aaData` for\n\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n\t\t * source or for server-side processing - this parameter allows that\n\t\t * property to be changed. You can use Javascript dotted object notation to\n\t\t * get a data source for multiple levels of nesting.\n\t\t *  @type string\n\t\t *  @default data\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxDataProp\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxDataProp\": \"data\",\n\n\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * You can instruct DataTables to load data from an external\n\t\t * source using this parameter (use aData if you want to pass data in you\n\t\t * already have). Simply provide a url a JSON object can be obtained from.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxSource\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxSource\": null,\n\n\n\t\t/**\n\t\t * This initialisation variable allows you to specify exactly where in the\n\t\t * DOM you want DataTables to inject the various controls it adds to the page\n\t\t * (for example you might want the pagination controls at the top of the\n\t\t * table). DIV elements (with or without a custom class) can also be added to\n\t\t * aid styling. The follow syntax is used:\n\t\t *   <ul>\n\t\t *     <li>The following options are allowed:\n\t\t *       <ul>\n\t\t *         <li>'l' - Length changing</li>\n\t\t *         <li>'f' - Filtering input</li>\n\t\t *         <li>'t' - The table!</li>\n\t\t *         <li>'i' - Information</li>\n\t\t *         <li>'p' - Pagination</li>\n\t\t *         <li>'r' - pRocessing</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following constants are allowed:\n\t\t *       <ul>\n\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following syntax is expected:\n\t\t *       <ul>\n\t\t *         <li>'&lt;' and '&gt;' - div elements</li>\n\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>Examples:\n\t\t *       <ul>\n\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *   </ul>\n\t\t *  @type string\n\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.dom\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDom\": \"lfrtip\",\n\n\n\t\t/**\n\t\t * Search delay option. This will throttle full table searches that use the\n\t\t * DataTables provided search input element (it does not effect calls to\n\t\t * `dt-api search()`, providing a delay before the search is made.\n\t\t *  @type integer\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.searchDelay\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchDelay\": 200\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"searchDelay\": null,\n\n\n\t\t/**\n\t\t * DataTables features six different built-in options for the buttons to\n\t\t * display for pagination control:\n\t\t *\n\t\t * * `numbers` - Page number buttons only\n\t\t * * `simple` - 'Previous' and 'Next' buttons only\n\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n\t\t * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n\t\t *\n\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.\n\t\t *  @type string\n\t\t *  @default simple_numbers\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pagingType\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pagingType\": \"full_numbers\"\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"sPaginationType\": \"simple_numbers\",\n\n\n\t\t/**\n\t\t * Enable horizontal scrolling. When a table is too wide to fit into a\n\t\t * certain layout, or you have a large number of columns in the table, you\n\t\t * can enable x-scrolling to show the table in a viewport, which can be\n\t\t * scrolled. This property can be `true` which will allow the table to\n\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which\n\t\t * case it will be treated as a pixel measurement). Setting as simply `true`\n\t\t * is recommended.\n\t\t *  @type boolean|string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollX\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": true,\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollX\": \"\",\n\n\n\t\t/**\n\t\t * This property can be used to force a DataTable to use more width than it\n\t\t * might otherwise do when x-scrolling is enabled. For example if you have a\n\t\t * table which requires to be well spaced, this parameter is useful for\n\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n\t\t * any CSS unit, or a number (in which case it will be treated as a pixel\n\t\t * measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollXInner\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": \"100%\",\n\t\t *        \"scrollXInner\": \"110%\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollXInner\": \"\",\n\n\n\t\t/**\n\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n\t\t * to the given height, and enable scrolling for any data which overflows the\n\t\t * current viewport. This can be used as an alternative to paging to display\n\t\t * a lot of data in a small area (although paging and scrolling can both be\n\t\t * enabled at the same time). This property can be any CSS unit, or a number\n\t\t * (in which case it will be treated as a pixel measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollY\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollY\": \"\",\n\n\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * Set the HTTP method that is used to make the Ajax call for server-side\n\t\t * processing or Ajax sourced data.\n\t\t *  @type string\n\t\t *  @default GET\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverMethod\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sServerMethod\": \"GET\",\n\n\n\t\t/**\n\t\t * DataTables makes use of renderers when displaying HTML elements for\n\t\t * a table. These renderers can be added or modified by plug-ins to\n\t\t * generate suitable mark-up for a site. For example the Bootstrap\n\t\t * integration plug-in for DataTables uses a paging button renderer to\n\t\t * display pagination buttons in the mark-up required by Bootstrap.\n\t\t *\n\t\t * For further information about the renderers available see\n\t\t * DataTable.ext.renderer\n\t\t *  @type string|object\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.renderer\n\t\t *\n\t\t */\n\t\t\"renderer\": null,\n\n\n\t\t/**\n\t\t * Set the data property name that DataTables should use to get a row's id\n\t\t * to set as the `id` property in the node.\n\t\t *  @type string\n\t\t *  @default DT_RowId\n\t\t *\n\t\t *  @name DataTable.defaults.rowId\n\t\t */\n\t\t\"rowId\": \"DT_RowId\"\n\t};\n\n\t_fnHungarianMap( DataTable.defaults );\n\n\n\n\t/*\n\t * Developer note - See note in model.defaults.js about the use of Hungarian\n\t * notation and camel case.\n\t */\n\n\t/**\n\t * Column options that can be given to DataTables at initialisation time.\n\t *  @namespace\n\t */\n\tDataTable.defaults.column = {\n\t\t/**\n\t\t * Define which column(s) an order will occur on for this column. This\n\t\t * allows a column's ordering to take multiple columns into account when\n\t\t * doing a sort or use the data from a different column. For example first\n\t\t * name / last name columns make sense to do a multi-column sort over the\n\t\t * two columns.\n\t\t *  @type array|int\n\t\t *  @default null <i>Takes the value of the column index automatically</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderData\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderData\": [ 0, 1 ] },\n\t\t *          { \"orderData\": [ 1, 0 ] },\n\t\t *          { \"orderData\": 2 },\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aDataSort\": null,\n\t\t\"iDataSort\": -1,\n\n\n\t\t/**\n\t\t * You can control the default ordering direction, and even alter the\n\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n\t\t * using this parameter.\n\t\t *  @type array\n\t\t *  @default [ 'asc', 'desc' ]\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderSequence\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"asSorting\": [ 'asc', 'desc' ],\n\n\n\t\t/**\n\t\t * Enable or disable filtering on the data in this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.searchable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"searchable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSearchable\": true,\n\n\n\t\t/**\n\t\t * Enable or disable ordering on this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortable\": true,\n\n\n\t\t/**\n\t\t * Enable or disable the display of this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.visible\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"visible\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bVisible\": true,\n\n\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} td The TD node that has been created\n\t\t *  @param {*} cellData The Data for the cell\n\t\t *  @param {array|object} rowData The data for the whole row\n\t\t *  @param {int} row The row index for the aoData data store\n\t\t *  @param {int} col The column index for aoColumns\n\t\t *\n\t\t *  @name DataTable.defaults.column.createdCell\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [3],\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\n\t\t *            if ( cellData == \"1.7\" ) {\n\t\t *              $(td).css('color', 'blue')\n\t\t *            }\n\t\t *          }\n\t\t *        } ]\n\t\t *      });\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\n\n\t\t/**\n\t\t * This parameter has been replaced by `data` in DataTables to ensure naming\n\t\t * consistency. `dataProp` can still be used, as there is backwards\n\t\t * compatibility in DataTables for this option, but it is strongly\n\t\t * recommended that you use `data` in preference to `dataProp`.\n\t\t *  @name DataTable.defaults.column.dataProp\n\t\t */\n\n\n\t\t/**\n\t\t * This property can be used to read data from any data source property,\n\t\t * including deeply nested objects / properties. `data` can be given in a\n\t\t * number of different ways which effect its behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object. Note that\n\t\t *      function notation is recommended for use in `render` rather than\n\t\t *      `data` as it is much simpler to use as a renderer.\n\t\t * * `null` - use the original data source for the row rather than plucking\n\t\t *   data directly from it. This action has effects on two other\n\t\t *   initialisation options:\n\t\t *    * `defaultContent` - When null is given as the `data` option and\n\t\t *      `defaultContent` is specified for the column, the value defined by\n\t\t *      `defaultContent` will be used for the cell.\n\t\t *    * `render` - When null is used for the `data` option and the `render`\n\t\t *      option is specified for the column, the whole data source for the\n\t\t *      row is used for the renderer.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * `{array|object}` The data source for the row\n\t\t *      * `{string}` The type call data requested - this will be 'set' when\n\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n\t\t *        when gathering data. Note that when `undefined` is given for the\n\t\t *        type DataTables expects to get the raw data for the object back<\n\t\t *      * `{*}` Data to set when the second parameter is 'set'.\n\t\t *    * Return:\n\t\t *      * The return value from the function is not required when 'set' is\n\t\t *        the type of call, but otherwise the return is what will be used\n\t\t *        for the data requested.\n\t\t *\n\t\t * Note that `data` is a getter and setter option. If you just require\n\t\t * formatting of data for output, you will likely want to use `render` which\n\t\t * is simply a getter and thus simpler to use.\n\t\t *\n\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n\t\t * name change reflects the flexibility of this property and is consistent\n\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still\n\t\t * be used by DataTables, as it automatically maps the old name to the new\n\t\t * if required.\n\t\t *\n\t\t *  @type string|int|function|null\n\t\t *  @default null <i>Use automatically calculated column index</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.data\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Read table data from objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {value},\n\t\t *    //      \"version\": {value},\n\t\t *    //      \"grade\": {value}\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform\" },\n\t\t *          { \"data\": \"version\" },\n\t\t *          { \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Read information from deeply nested objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {\n\t\t *    //         \"inner\": {value}\n\t\t *    //      },\n\t\t *    //      \"details\": [\n\t\t *    //         {value}, {value}\n\t\t *    //      ]\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform.inner\" },\n\t\t *          { \"data\": \"platform.details.0\" },\n\t\t *          { \"data\": \"platform.details.1\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `data` as a function to provide different information for\n\t\t *    // sorting, filtering and display. In this case, currency (price)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": function ( source, type, val ) {\n\t\t *            if (type === 'set') {\n\t\t *              source.price = val;\n\t\t *              // Store the computed dislay and filter values for efficiency\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n\t\t *              return;\n\t\t *            }\n\t\t *            else if (type === 'display') {\n\t\t *              return source.price_display;\n\t\t *            }\n\t\t *            else if (type === 'filter') {\n\t\t *              return source.price_filter;\n\t\t *            }\n\t\t *            // 'sort', 'type' and undefined all just use the integer\n\t\t *            return source.price;\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using default content\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null,\n\t\t *          \"defaultContent\": \"Click to edit\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using array notation - outputting a list from an array\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"name[, ]\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t */\n\t\t\"mData\": null,\n\n\n\t\t/**\n\t\t * This property is the rendering partner to `data` and it is suggested that\n\t\t * when you want to manipulate data for display (including filtering,\n\t\t * sorting etc) without altering the underlying data for the table, use this\n\t\t * property. `render` can be considered to be the the read only companion to\n\t\t * `data` which is read / write (then as such more complex). Like `data`\n\t\t * this option can be given in a number of different ways to effect its\n\t\t * behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object.\n\t\t * * `object` - use different data for the different data types requested by\n\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n\t\t *   of the object is the data type the property refers to and the value can\n\t\t *   defined using an integer, string or function using the same rules as\n\t\t *   `render` normally does. Note that an `_` option _must_ be specified.\n\t\t *   This is the default value to use if you haven't specified a value for\n\t\t *   the data type requested by DataTables.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * {array|object} The data source for the row (based on `data`)\n\t\t *      * {string} The type call data requested - this will be 'filter',\n\t\t *        'display', 'type' or 'sort'.\n\t\t *      * {array|object} The full data source for the row (not based on\n\t\t *        `data`)\n\t\t *    * Return:\n\t\t *      * The return value from the function is what will be used for the\n\t\t *        data requested.\n\t\t *\n\t\t *  @type string|int|function|object|null\n\t\t *  @default null Use the data source value.\n\t\t *\n\t\t *  @name DataTable.defaults.column.render\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Create a comma separated list from an array of objects\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          {\n\t\t *            \"data\": \"platform\",\n\t\t *            \"render\": \"[, ].name\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Execute a function to obtain data\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": \"browserName()\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // As an object, extracting different data for the different types\n\t\t *    // This would be used with a data source such as:\n\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while\n\t\t *    // the formatted phone number is the one that is shown in the table.\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": {\n\t\t *            \"_\": \"phone\",\n\t\t *            \"filter\": \"phone_filter\",\n\t\t *            \"display\": \"phone_display\"\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Use as a function to create a link from the data source\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"download_link\",\n\t\t *          \"render\": function ( data, type, full ) {\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"mRender\": null,\n\n\n\t\t/**\n\t\t * Change the cell type created for the column - either TD cells or TH cells. This\n\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them\n\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n\t\t *  @type string\n\t\t *  @default td\n\t\t *\n\t\t *  @name DataTable.defaults.column.cellType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Make the first column use TH cells\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"cellType\": \"th\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sCellType\": \"td\",\n\n\n\t\t/**\n\t\t * Class to give to each cell in this column.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.class\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"class\": \"my_class\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sClass\": \"\",\n\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t * Generally you shouldn't need this!\n\t\t *  @type string\n\t\t *  @default <i>Empty string<i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.contentPadding\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"contentPadding\": \"mmm\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sContentPadding\": \"\",\n\n\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because `data`\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.column.defaultContent\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\",\n\t\t *            \"targets\": [ -1 ]\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDefaultContent\": null,\n\n\n\t\t/**\n\t\t * This parameter is only used in DataTables' server-side processing. It can\n\t\t * be exceptionally useful to know what columns are being displayed on the\n\t\t * client side, and to map these to database fields. When defined, the names\n\t\t * also allow DataTables to reorder information from the server if it comes\n\t\t * back in an unexpected order (i.e. if you switch your columns around on the\n\t\t * client-side, your server-side code does not also need updating).\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.name\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"name\": \"engine\" },\n\t\t *          { \"name\": \"browser\" },\n\t\t *          { \"name\": \"platform\" },\n\t\t *          { \"name\": \"version\" },\n\t\t *          { \"name\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sName\": \"\",\n\n\n\t\t/**\n\t\t * Defines a data source type for the ordering which can be used to read\n\t\t * real-time information from the table (updating the internally cached\n\t\t * version) prior to ordering. This allows ordering to occur on user\n\t\t * editable elements such as form inputs.\n\t\t *  @type string\n\t\t *  @default std\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderDataType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          { \"orderDataType\": \"dom-text\" },\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n\t\t *          { \"orderDataType\": \"dom-select\" },\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sSortDataType\": \"std\",\n\n\n\t\t/**\n\t\t * The title of this column.\n\t\t *  @type string\n\t\t *  @default null <i>Derived from the 'TH' value for this column in the\n\t\t *    original HTML table.</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.title\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"My column title\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sTitle\": null,\n\n\n\t\t/**\n\t\t * The type allows you to specify how the data for this column will be\n\t\t * ordered. Four types (string, numeric, date and html (which will strip\n\t\t * HTML tags before ordering)) are currently available. Note that only date\n\t\t * formats understood by Javascript's Date() object will be accepted as type\n\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\n\t\t * through plug-ins.\n\t\t *  @type string\n\t\t *  @default null <i>Auto-detected from raw data</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.type\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"type\": \"html\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sType\": null,\n\n\n\t\t/**\n\t\t * Defining the width of the column, this parameter may take any CSS value\n\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n\t\t * been given a specific width through this interface ensuring that the table\n\t\t * remains readable.\n\t\t *  @type string\n\t\t *  @default null <i>Automatic</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.width\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"width\": \"20%\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sWidth\": null\n\t};\n\n\t_fnHungarianMap( DataTable.defaults.column );\n\n\n\n\t/**\n\t * DataTables settings object - this holds all the information needed for a\n\t * given table, including configuration, data and current application of the\n\t * table options. DataTables does not have a single instance for each DataTable\n\t * with the settings attached to that instance, but rather instances of the\n\t * DataTable \"class\" are created on-the-fly as needed (typically by a\n\t * $().dataTable() call) and the settings object is then applied to that\n\t * instance.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults} but this\n\t * one is the internal data store for DataTables's cache of columns. It should\n\t * NOT be manipulated outside of DataTables. Any configuration should be done\n\t * through the initialisation options.\n\t *  @namespace\n\t *  @todo Really should attach the settings object to individual instances so we\n\t *    don't need to create new instances on each $().dataTable() call (if the\n\t *    table already exists). It would also save passing oSettings around and\n\t *    into every single function. However, this is a very significant\n\t *    architecture change for DataTables and will almost certainly break\n\t *    backwards compatibility with older installations. This is something that\n\t *    will be done in 2.0.\n\t */\n\tDataTable.models.oSettings = {\n\t\t/**\n\t\t * Primary features of DataTables and their enablement state.\n\t\t *  @namespace\n\t\t */\n\t\t\"oFeatures\": {\n\n\t\t\t/**\n\t\t\t * Flag to say if DataTables should automatically try to calculate the\n\t\t\t * optimum table and columns widths (true) or not (false).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bAutoWidth\": null,\n\n\t\t\t/**\n\t\t\t * Delay the creation of TR and TD elements until they are actually\n\t\t\t * needed by a driven page draw. This can give a significant speed\n\t\t\t * increase for Ajax source and Javascript source data, but makes no\n\t\t\t * difference at all fro DOM and server-side processing tables.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bDeferRender\": null,\n\n\t\t\t/**\n\t\t\t * Enable filtering on the table or not. Note that if this is disabled\n\t\t\t * then there is no filtering at all on the table, including fnFilter.\n\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bFilter\": null,\n\n\t\t\t/**\n\t\t\t * Table information element (the 'Showing x of y records' div) enable\n\t\t\t * flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bInfo\": null,\n\n\t\t\t/**\n\t\t\t * Present a user control allowing the end user to change the page size\n\t\t\t * when pagination is enabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bLengthChange\": null,\n\n\t\t\t/**\n\t\t\t * Pagination enabled or not. Note that if this is disabled then length\n\t\t\t * changing must also be disabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bPaginate\": null,\n\n\t\t\t/**\n\t\t\t * Processing indicator enable flag whenever DataTables is enacting a\n\t\t\t * user request - typically an Ajax request for server-side processing.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bProcessing\": null,\n\n\t\t\t/**\n\t\t\t * Server-side processing enabled flag - when enabled DataTables will\n\t\t\t * get all data from the server for every draw - there is no filtering,\n\t\t\t * sorting or paging done on the client-side.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bServerSide\": null,\n\n\t\t\t/**\n\t\t\t * Sorting enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSort\": null,\n\n\t\t\t/**\n\t\t\t * Multi-column sorting\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortMulti\": null,\n\n\t\t\t/**\n\t\t\t * Apply a class to the columns which are being sorted to provide a\n\t\t\t * visual highlight or not. This can slow things down when enabled since\n\t\t\t * there is a lot of DOM interaction.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortClasses\": null,\n\n\t\t\t/**\n\t\t\t * State saving enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bStateSave\": null\n\t\t},\n\n\n\t\t/**\n\t\t * Scrolling settings for a table.\n\t\t *  @namespace\n\t\t */\n\t\t\"oScroll\": {\n\t\t\t/**\n\t\t\t * When the table is shorter in height than sScrollY, collapse the\n\t\t\t * table container down to the height of the table (when true).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bCollapse\": null,\n\n\t\t\t/**\n\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated\n\t\t\t * during table initialisation.\n\t\t\t *  @type int\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"iBarWidth\": 0,\n\n\t\t\t/**\n\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\n\t\t\t * disabled if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sX\": null,\n\n\t\t\t/**\n\t\t\t * Width to expand the table to when using x-scrolling. Typically you\n\t\t\t * should not need to use this.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t *  @deprecated\n\t\t\t */\n\t\t\t\"sXInner\": null,\n\n\t\t\t/**\n\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\n\t\t\t * if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sY\": null\n\t\t},\n\n\t\t/**\n\t\t * Language information for the table.\n\t\t *  @namespace\n\t\t *  @extends DataTable.defaults.oLanguage\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Information callback function. See\n\t\t\t * {@link DataTable.defaults.fnInfoCallback}\n\t\t\t *  @type function\n\t\t\t *  @default null\n\t\t\t */\n\t\t\t\"fnInfoCallback\": null\n\t\t},\n\n\t\t/**\n\t\t * Browser support parameters\n\t\t *  @namespace\n\t\t */\n\t\t\"oBrowser\": {\n\t\t\t/**\n\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a\n\t\t\t * scrolling element (IE6/7)\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollOversize\": false,\n\n\t\t\t/**\n\t\t\t * Determine if the vertical scrollbar is on the right or left of the\n\t\t\t * scrolling container - needed for rtl language layout, although not\n\t\t\t * all browsers move the scrollbar (Safari).\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollbarLeft\": false,\n\n\t\t\t/**\n\t\t\t * Flag for if `getBoundingClientRect` is fully supported or not\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bBounding\": false,\n\n\t\t\t/**\n\t\t\t * Browser scrollbar width\n\t\t\t *  @type integer\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"barWidth\": 0\n\t\t},\n\n\n\t\t\"ajax\": null,\n\n\n\t\t/**\n\t\t * Array referencing the nodes which are used for the features. The\n\t\t * parameters of this object match what is allowed by sDom - i.e.\n\t\t *   <ul>\n\t\t *     <li>'l' - Length changing</li>\n\t\t *     <li>'f' - Filtering input</li>\n\t\t *     <li>'t' - The table!</li>\n\t\t *     <li>'i' - Information</li>\n\t\t *     <li>'p' - Pagination</li>\n\t\t *     <li>'r' - pRocessing</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aanFeatures\": [],\n\n\t\t/**\n\t\t * Store data information - see {@link DataTable.models.oRow} for detailed\n\t\t * information.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoData\": [],\n\n\t\t/**\n\t\t * Array of indexes which are in the current display (after filtering etc)\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplay\": [],\n\n\t\t/**\n\t\t * Array of indexes for display - no filtering\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplayMaster\": [],\n\n\t\t/**\n\t\t * Map of row ids to data indexes\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"aIds\": {},\n\n\t\t/**\n\t\t * Store information about each column that is in use\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoColumns\": [],\n\n\t\t/**\n\t\t * Store information about the table's header\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeader\": [],\n\n\t\t/**\n\t\t * Store information about the table's footer\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooter\": [],\n\n\t\t/**\n\t\t * Store the applied global search information in case we want to force a\n\t\t * research or compare the old search to a new one.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t */\n\t\t\"oPreviousSearch\": {},\n\n\t\t/**\n\t\t * Store the applied search for each column - see\n\t\t * {@link DataTable.models.oSearch} for the format that is used for the\n\t\t * filtering information for each column.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreSearchCols\": [],\n\n\t\t/**\n\t\t * Sorting that is applied to the table. Note that the inner arrays are\n\t\t * used in the following manner:\n\t\t * <ul>\n\t\t *   <li>Index 0 - column number</li>\n\t\t *   <li>Index 1 - current sorting direction</li>\n\t\t * </ul>\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @todo These inner arrays should really be objects\n\t\t */\n\t\t\"aaSorting\": null,\n\n\t\t/**\n\t\t * Sorting that is always applied to the table (i.e. prefixed in front of\n\t\t * aaSorting).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\n\t\t/**\n\t\t * Classes to use for the striping of a table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asStripeClasses\": null,\n\n\t\t/**\n\t\t * If restoring a table - we should restore its striping classes as well\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asDestroyStripes\": [],\n\n\t\t/**\n\t\t * If restoring a table - we should restore its width\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"sDestroyWidth\": 0,\n\n\t\t/**\n\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCallback\": [],\n\n\t\t/**\n\t\t * Callback functions for the header on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeaderCallback\": [],\n\n\t\t/**\n\t\t * Callback function for the footer on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooterCallback\": [],\n\n\t\t/**\n\t\t * Array of callback functions for draw callback functions\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDrawCallback\": [],\n\n\t\t/**\n\t\t * Array of callback functions for row created function\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCreatedCallback\": [],\n\n\t\t/**\n\t\t * Callback functions for just before the table is redrawn. A return of\n\t\t * false will be used to cancel the draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreDrawCallback\": [],\n\n\t\t/**\n\t\t * Callback functions for when the table has been initialised.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoInitComplete\": [],\n\n\n\t\t/**\n\t\t * Callbacks for modifying the settings to be stored for state saving, prior to\n\t\t * saving state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSaveParams\": [],\n\n\t\t/**\n\t\t * Callbacks for modifying the settings that have been stored for state saving\n\t\t * prior to using the stored values to restore the state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoadParams\": [],\n\n\t\t/**\n\t\t * Callbacks for operating on the settings object once the saved state has been\n\t\t * loaded\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoaded\": [],\n\n\t\t/**\n\t\t * Cache the table ID for quick access\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sTableId\": \"\",\n\n\t\t/**\n\t\t * The TABLE node for the main table\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTable\": null,\n\n\t\t/**\n\t\t * Permanent ref to the thead element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTHead\": null,\n\n\t\t/**\n\t\t * Permanent ref to the tfoot element - if it exists\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTFoot\": null,\n\n\t\t/**\n\t\t * Permanent ref to the tbody element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTBody\": null,\n\n\t\t/**\n\t\t * Cache the wrapper node (contains all DataTables controlled elements)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTableWrapper\": null,\n\n\t\t/**\n\t\t * Indicate if when using server-side processing the loading of data\n\t\t * should be deferred until the second draw.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDeferLoading\": false,\n\n\t\t/**\n\t\t * Indicate if all required information has been read in\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bInitialised\": false,\n\n\t\t/**\n\t\t * Information about open rows. Each object in the array has the parameters\n\t\t * 'nTr' and 'nParent'\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoOpenRows\": [],\n\n\t\t/**\n\t\t * Dictate the positioning of DataTables' control elements - see\n\t\t * {@link DataTable.model.oInit.sDom}.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDom\": null,\n\n\t\t/**\n\t\t * Search delay (in mS)\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"searchDelay\": null,\n\n\t\t/**\n\t\t * Which type of pagination should be used.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default two_button\n\t\t */\n\t\t\"sPaginationType\": \"two_button\",\n\n\t\t/**\n\t\t * The state duration (for `stateSave`) in seconds.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iStateDuration\": 0,\n\n\t\t/**\n\t\t * Array of callback functions for state saving. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the JSON string to save that has been thus far created. Returns\n\t\t *       a JSON string to be inserted into a json object\n\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSave\": [],\n\n\t\t/**\n\t\t * Array of callback functions for state loading. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the object stored. May return false to cancel state loading</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoad\": [],\n\n\t\t/**\n\t\t * State that was saved. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oSavedState\": null,\n\n\t\t/**\n\t\t * State that was loaded. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oLoadedState\": null,\n\n\t\t/**\n\t\t * Source url for AJAX data for the table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sAjaxSource\": null,\n\n\t\t/**\n\t\t * Property from a given object from which to read the table data from. This\n\t\t * can be an empty string (when not server-side processing), in which case\n\t\t * it is  assumed an an array is given directly.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sAjaxDataProp\": null,\n\n\t\t/**\n\t\t * Note if draw should be blocked while getting data\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bAjaxDataGet\": true,\n\n\t\t/**\n\t\t * The last jQuery XHR object that was used for server-side data gathering.\n\t\t * This can be used for working with the XHR information in one of the\n\t\t * callbacks\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"jqXHR\": null,\n\n\t\t/**\n\t\t * JSON returned from the server in the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"json\": undefined,\n\n\t\t/**\n\t\t * Data submitted as part of the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"oAjaxData\": undefined,\n\n\t\t/**\n\t\t * Function to get the server-side data.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnServerData\": null,\n\n\t\t/**\n\t\t * Functions which are called prior to sending an Ajax request so extra\n\t\t * parameters can easily be sent to the server\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoServerParams\": [],\n\n\t\t/**\n\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n\t\t * required).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sServerMethod\": null,\n\n\t\t/**\n\t\t * Format numbers for display.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnFormatNumber\": null,\n\n\t\t/**\n\t\t * List of options that can be used for the user selectable length menu.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLengthMenu\": null,\n\n\t\t/**\n\t\t * Counter for the draws that the table does. Also used as a tracker for\n\t\t * server-side processing\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iDraw\": 0,\n\n\t\t/**\n\t\t * Indicate if a redraw is being done - useful for Ajax\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDrawing\": false,\n\n\t\t/**\n\t\t * Draw index (iDraw) of the last error when parsing the returned data\n\t\t *  @type int\n\t\t *  @default -1\n\t\t */\n\t\t\"iDrawError\": -1,\n\n\t\t/**\n\t\t * Paging display length\n\t\t *  @type int\n\t\t *  @default 10\n\t\t */\n\t\t\"_iDisplayLength\": 10,\n\n\t\t/**\n\t\t * Paging start point - aiDisplay index\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"_iDisplayStart\": 0,\n\n\t\t/**\n\t\t * Server-side processing - number of records in the result set\n\t\t * (i.e. before filtering), Use fnRecordsTotal rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsTotal\": 0,\n\n\t\t/**\n\t\t * Server-side processing - number of records in the current display set\n\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type boolean\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsDisplay\": 0,\n\n\t\t/**\n\t\t * Flag to indicate if jQuery UI marking and classes should be used.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bJUI\": null,\n\n\t\t/**\n\t\t * The classes to use for the table\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oClasses\": {},\n\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if filtering has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bFiltered\": false,\n\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if sorting has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bSorted\": false,\n\n\t\t/**\n\t\t * Indicate that if multiple rows are in the header and there is more than\n\t\t * one unique cell per column, if the top one (true) or bottom one (false)\n\t\t * should be used for sorting / title by DataTables.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortCellsTop\": null,\n\n\t\t/**\n\t\t * Initialisation object that is used for the table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInit\": null,\n\n\t\t/**\n\t\t * Destroy callback functions - for plug-ins to attach themselves to the\n\t\t * destroy so they can clean up markup and events.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDestroyCallback\": [],\n\n\n\t\t/**\n\t\t * Get the number of records in the current record set, before filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsTotal\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsTotal * 1 :\n\t\t\t\tthis.aiDisplayMaster.length;\n\t\t},\n\n\t\t/**\n\t\t * Get the number of records in the current record set, after filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsDisplay\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsDisplay * 1 :\n\t\t\t\tthis.aiDisplay.length;\n\t\t},\n\n\t\t/**\n\t\t * Get the display end point - aiDisplay index\n\t\t *  @type function\n\t\t */\n\t\t\"fnDisplayEnd\": function ()\n\t\t{\n\t\t\tvar\n\t\t\t\tlen      = this._iDisplayLength,\n\t\t\t\tstart    = this._iDisplayStart,\n\t\t\t\tcalc     = start + len,\n\t\t\t\trecords  = this.aiDisplay.length,\n\t\t\t\tfeatures = this.oFeatures,\n\t\t\t\tpaginate = features.bPaginate;\n\n\t\t\tif ( features.bServerSide ) {\n\t\t\t\treturn paginate === false || len === -1 ?\n\t\t\t\t\tstart + records :\n\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn ! paginate || calc>records || len===-1 ?\n\t\t\t\t\trecords :\n\t\t\t\t\tcalc;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * The DataTables object for this table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInstance\": null,\n\n\t\t/**\n\t\t * Unique identifier for each instance of the DataTables object. If there\n\t\t * is an ID on the table node, then it takes that value, otherwise an\n\t\t * incrementing internal counter is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sInstance\": null,\n\n\t\t/**\n\t\t * tabindex attribute value that is added to DataTables control elements, allowing\n\t\t * keyboard navigation of the table and its controls.\n\t\t */\n\t\t\"iTabIndex\": 0,\n\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollHead\": null,\n\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollFoot\": null,\n\n\t\t/**\n\t\t * Last applied sort\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLastSort\": [],\n\n\t\t/**\n\t\t * Stored plug-in instances\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oPlugins\": {},\n\n\t\t/**\n\t\t * Function used to get a row's id from the row's data\n\t\t *  @type function\n\t\t *  @default null\n\t\t */\n\t\t\"rowIdFn\": null,\n\n\t\t/**\n\t\t * Data location where to store a row's id\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"rowId\": null\n\t};\n\n\t/**\n\t * Extension object for DataTables that is used to provide all extension\n\t * options.\n\t *\n\t * Note that the `DataTable.ext` object is available through\n\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n\t *  @namespace\n\t *  @extends DataTable.models.ext\n\t */\n\n\n\t/**\n\t * DataTables extensions\n\t *\n\t * This namespace acts as a collection area for plug-ins that can be used to\n\t * extend DataTables capabilities. Indeed many of the build in methods\n\t * use this method to provide their own capabilities (sorting methods for\n\t * example).\n\t *\n\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n\t * reasons\n\t *\n\t *  @namespace\n\t */\n\tDataTable.ext = _ext = {\n\t\t/**\n\t\t * Buttons. For use with the Buttons extension for DataTables. This is\n\t\t * defined here so other extensions can define buttons regardless of load\n\t\t * order. It is _not_ used by DataTables core.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tbuttons: {},\n\n\n\t\t/**\n\t\t * Element class names\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tclasses: {},\n\n\n\t\t/**\n\t\t * DataTables build type (expanded by the download builder)\n\t\t *\n\t\t *  @type string\n\t\t */\n\t\tbuilder: \"-source-\",\n\n\n\t\t/**\n\t\t * Error reporting.\n\t\t *\n\t\t * How should DataTables report an error. Can take the value 'alert',\n\t\t * 'throw', 'none' or a function.\n\t\t *\n\t\t *  @type string|function\n\t\t *  @default alert\n\t\t */\n\t\terrMode: \"alert\",\n\n\n\t\t/**\n\t\t * Feature plug-ins.\n\t\t *\n\t\t * This is an array of objects which describe the feature plug-ins that are\n\t\t * available to DataTables. These feature plug-ins are then available for\n\t\t * use through the `dom` initialisation option.\n\t\t *\n\t\t * Each feature plug-in is described by an object which must have the\n\t\t * following properties:\n\t\t *\n\t\t * * `fnInit` - function that is used to initialise the plug-in,\n\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`\n\t\t *   instillation option. This is case sensitive.\n\t\t *\n\t\t * The `fnInit` function has the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *\n\t\t * And the following return is expected:\n\t\t *\n\t\t * * {node|null} The element which contains your feature. Note that the\n\t\t *   return may also be void if your plug-in does not require to inject any\n\t\t *   DOM elements into DataTables control (`dom`) - for example this might\n\t\t *   be useful when developing a plug-in which allows table control via\n\t\t *   keyboard entry\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    $.fn.dataTable.ext.features.push( {\n\t\t *      \"fnInit\": function( oSettings ) {\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\n\t\t *      },\n\t\t *      \"cFeature\": \"T\"\n\t\t *    } );\n\t\t */\n\t\tfeature: [],\n\n\n\t\t/**\n\t\t * Row searching.\n\t\t *\n\t\t * This method of searching is complimentary to the default type based\n\t\t * searching, and a lot more comprehensive as it allows you complete control\n\t\t * over the searching logic. Each element in this array is a function\n\t\t * (parameters described below) that is called for every row in the table,\n\t\t * and your logic decides if it should be included in the searching data set\n\t\t * or not.\n\t\t *\n\t\t * Searching functions have the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{array|object}` Data for the row to be processed (same as the\n\t\t *    original format that was passed in as the data source, or an array\n\t\t *    from a DOM data source\n\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\n\t\t *\n\t\t * And the following return is expected:\n\t\t *\n\t\t * * {boolean} Include the row in the searched result set (true) or not\n\t\t *   (false)\n\t\t *\n\t\t * Note that as with the main search ability in DataTables, technically this\n\t\t * is \"filtering\", since it is subtractive. However, for consistency in\n\t\t * naming we call it searching here.\n\t\t *\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @example\n\t\t *    // The following example shows custom search being applied to the\n\t\t *    // fourth column (i.e. the data[3] index) based on two input values\n\t\t *    // from the end-user, matching the data in a certain range.\n\t\t *    $.fn.dataTable.ext.search.push(\n\t\t *      function( settings, data, dataIndex ) {\n\t\t *        var min = document.getElementById('min').value * 1;\n\t\t *        var max = document.getElementById('max').value * 1;\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t\t *\n\t\t *        if ( min == \"\" && max == \"\" ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min == \"\" && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && \"\" == max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        return false;\n\t\t *      }\n\t\t *    );\n\t\t */\n\t\tsearch: [],\n\n\n\t\t/**\n\t\t * Selector extensions\n\t\t *\n\t\t * The `selector` option can be used to extend the options available for the\n\t\t * selector modifier options (`selector-modifier` object data type) that\n\t\t * each of the three built in selector types offer (row, column and cell +\n\t\t * their plural counterparts). For example the Select extension uses this\n\t\t * mechanism to provide an option to select only rows, columns and cells\n\t\t * that have been marked as selected by the end user (`{selected: true}`),\n\t\t * which can be used in conjunction with the existing built in selector\n\t\t * options.\n\t\t *\n\t\t * Each property is an array to which functions can be pushed. The functions\n\t\t * take three attributes:\n\t\t *\n\t\t * * Settings object for the host table\n\t\t * * Options object (`selector-modifier` object type)\n\t\t * * Array of selected item indexes\n\t\t *\n\t\t * The return is an array of the resulting item indexes after the custom\n\t\t * selector has been applied.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tselector: {\n\t\t\tcell: [],\n\t\t\tcolumn: [],\n\t\t\trow: []\n\t\t},\n\n\n\t\t/**\n\t\t * Internal functions, exposed for used in plug-ins.\n\t\t *\n\t\t * Please note that you should not need to use the internal methods for\n\t\t * anything other than a plug-in (and even then, try to avoid if possible).\n\t\t * The internal function may change between releases.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tinternal: {},\n\n\n\t\t/**\n\t\t * Legacy configuration options. Enable and disable legacy options that\n\t\t * are available in DataTables.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tlegacy: {\n\t\t\t/**\n\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing\n\t\t\t * requests\n\t\t\t *\n\t\t\t *  @type boolean\n\t\t\t *  @default null\n\t\t\t */\n\t\t\tajax: null\n\t\t},\n\n\n\t\t/**\n\t\t * Pagination plug-in methods.\n\t\t *\n\t\t * Each entry in this object is a function and defines which buttons should\n\t\t * be shown by the pagination rendering method that is used for the table:\n\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n\t\t * buttons are displayed in the document, while the functions here tell it\n\t\t * what buttons to display. This is done by returning an array of button\n\t\t * descriptions (what each button will do).\n\t\t *\n\t\t * Pagination types (the four built in options and any additional plug-in\n\t\t * options defined here) can be used through the `paginationType`\n\t\t * initialisation parameter.\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{int} page` The current page index\n\t\t * 2. `{int} pages` The number of pages in the table\n\t\t *\n\t\t * Each function is expected to return an array where each element of the\n\t\t * array can be one of:\n\t\t *\n\t\t * * `first` - Jump to first page when activated\n\t\t * * `last` - Jump to last page when activated\n\t\t * * `previous` - Show previous page when activated\n\t\t * * `next` - Show next page when activated\n\t\t * * `{int}` - Show page of the index given\n\t\t * * `{array}` - A nested array containing the above elements to add a\n\t\t *   containing 'DIV' element (might be useful for styling).\n\t\t *\n\t\t * Note that DataTables v1.9- used this object slightly differently whereby\n\t\t * an object with two functions would be defined for each plug-in. That\n\t\t * ability is still supported by DataTables 1.10+ to provide backwards\n\t\t * compatibility, but this option of use is now decremented and no longer\n\t\t * documented in DataTables 1.10+.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    // Show previous, next and current page buttons only\n\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t\t *      return [ 'previous', page, 'next' ];\n\t\t *    };\n\t\t */\n\t\tpager: {},\n\n\n\t\trenderer: {\n\t\t\tpageButton: {},\n\t\t\theader: {}\n\t\t},\n\n\n\t\t/**\n\t\t * Ordering plug-ins - custom data source\n\t\t *\n\t\t * The extension options for ordering of data available here is complimentary\n\t\t * to the default type based ordering that DataTables typically uses. It\n\t\t * allows much greater control over the the data that is being used to\n\t\t * order a column, but is necessarily therefore more complex.\n\t\t *\n\t\t * This type of ordering is useful if you want to do ordering based on data\n\t\t * live from the DOM (for example the contents of an 'input' element) rather\n\t\t * than just the static string that DataTables knows of.\n\t\t *\n\t\t * The way these plug-ins work is that you create an array of the values you\n\t\t * wish to be ordering for the column in question and then return that\n\t\t * array. The data in the array much be in the index order of the rows in\n\t\t * the table (not the currently ordering order!). Which order data gathering\n\t\t * function is run here depends on the `dt-init columns.orderDataType`\n\t\t * parameter that is used for the column (if any).\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{int}` Target column index\n\t\t *\n\t\t * Each function is expected to return an array:\n\t\t *\n\t\t * * `{array}` Data for the column to be ordering upon\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    // Ordering using `input` node values\n\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n\t\t *    {\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t\t *        return $('input', td).val();\n\t\t *      } );\n\t\t *    }\n\t\t */\n\t\torder: {},\n\n\n\t\t/**\n\t\t * Type based plug-ins.\n\t\t *\n\t\t * Each column in DataTables has a type assigned to it, either by automatic\n\t\t * detection or by direct assignment using the `type` option for the column.\n\t\t * The type of a column will effect how it is ordering and search (plug-ins\n\t\t * can also make use of the column type if required).\n\t\t *\n\t\t * @namespace\n\t\t */\n\t\ttype: {\n\t\t\t/**\n\t\t\t * Type detection functions.\n\t\t\t *\n\t\t\t * The functions defined in this object are used to automatically detect\n\t\t\t * a column's type, making initialisation of DataTables super easy, even\n\t\t\t * when complex data is in the table.\n\t\t\t *\n\t\t\t * The functions defined take two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be analysed\n\t\t     *  2. `{settings}` DataTables settings object. This can be used to\n\t\t     *     perform context specific type detection - for example detection\n\t\t     *     based on language settings such as using a comma for a decimal\n\t\t     *     place. Generally speaking the options from the settings will not\n\t\t     *     be required\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\n\t\t\t *   pass it on to the other type detection functions.\n\t\t\t *\n\t\t\t *  @type array\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Currency type detection plug-in:\n\t\t\t *    $.fn.dataTable.ext.type.detect.push(\n\t\t\t *      function ( data, settings ) {\n\t\t\t *        // Check the numeric part\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\n\t\t\t *          return null;\n\t\t\t *        }\n\t\t\t *\n\t\t\t *        // Check prefixed by currency\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t\t *          return 'currency';\n\t\t\t *        }\n\t\t\t *        return null;\n\t\t\t *      }\n\t\t\t *    );\n\t\t\t */\n\t\t\tdetect: [],\n\n\n\t\t\t/**\n\t\t\t * Type based search formatting.\n\t\t\t *\n\t\t\t * The type based searching functions can be used to pre-format the\n\t\t\t * data to be search on. For example, it can be used to strip HTML\n\t\t\t * tags or to de-format telephone numbers for numeric only searching.\n\t\t\t *\n\t\t\t * Note that is a search is not defined for a column of a given type,\n\t\t\t * no search formatting will be performed.\n\t\t\t *\n\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType\n\t\t\t * for a column (or have it automatically detected for you by DataTables\n\t\t\t * or a type detection plug-in), you will typically be using this for\n\t\t\t * custom sorting, but it can also be used to provide custom searching\n\t\t\t * by allowing you to pre-processing the data and returning the data in\n\t\t\t * the format that should be searched upon. This is done by adding\n\t\t\t * functions this object with a parameter name which matches the sType\n\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>\n\t\t\t * for searching data.\n\t\t\t *\n\t\t\t * The functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for searching\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Formatted string that will be used for the searching.\n\t\t\t *\n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t\t *    }\n\t\t\t */\n\t\t\tsearch: {},\n\n\n\t\t\t/**\n\t\t\t * Type based ordering.\n\t\t\t *\n\t\t\t * The column type tells DataTables what ordering to apply to the table\n\t\t\t * when a column is sorted upon. The order for each type that is defined,\n\t\t\t * is defined by the functions available in this object.\n\t\t\t *\n\t\t\t * Each ordering option can be described by three properties added to\n\t\t\t * this object:\n\t\t\t *\n\t\t\t * * `{type}-pre` - Pre-formatting function\n\t\t\t * * `{type}-asc` - Ascending order function\n\t\t\t * * `{type}-desc` - Descending order function\n\t\t\t *\n\t\t\t * All three can be used together, only `{type}-pre` or only\n\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\n\t\t\t * that only `{type}-pre` is used, as this provides the optimal\n\t\t\t * implementation in terms of speed, although the others are provided\n\t\t\t * for compatibility with existing Javascript sort functions.\n\t\t\t *\n\t\t\t * `{type}-pre`: Functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering\n\t\t\t *\n\t\t\t * And return:\n\t\t\t *\n\t\t\t * * `{*}` Data to be sorted upon\n\t\t\t *\n\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n\t\t\t * functions, taking two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data to compare to the second parameter\n\t\t     *  2. `{*}` Data to compare to the first parameter\n\t\t\t *\n\t\t\t * And returning:\n\t\t\t *\n\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n\t\t\t *   than the second parameter, ===0 if the two parameters are equal and\n\t\t\t *   >0 if the first parameter should be sorted height than the second\n\t\t\t *   parameter.\n\t\t\t *\n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\n\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t\t *      \"string-pre\": function(x) {\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t\t *        return parseFloat( a );\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method\n\t\t\t *    $.extend( $.fn.dataTable.ext.order, {\n\t\t\t *      \"string-case-asc\": function(x,y) {\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t\t *      },\n\t\t\t *      \"string-case-desc\": function(x,y) {\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t */\n\t\t\torder: {}\n\t\t},\n\n\t\t/**\n\t\t * Unique DataTables instance counter\n\t\t *\n\t\t * @type int\n\t\t * @private\n\t\t */\n\t\t_unique: 0,\n\n\n\t\t//\n\t\t// Depreciated\n\t\t// The following properties are retained for backwards compatiblity only.\n\t\t// The should not be used in new projects and will be removed in a future\n\t\t// version\n\t\t//\n\n\t\t/**\n\t\t * Version check function.\n\t\t *  @type function\n\t\t *  @depreciated Since 1.10\n\t\t */\n\t\tfnVersionCheck: DataTable.fnVersionCheck,\n\n\n\t\t/**\n\t\t * Index for what 'this' index API functions should use\n\t\t *  @type int\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tiApiIndex: 0,\n\n\n\t\t/**\n\t\t * jQuery UI class container\n\t\t *  @type object\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\toJUIClasses: {},\n\n\n\t\t/**\n\t\t * Software version\n\t\t *  @type string\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tsVersion: DataTable.version\n\t};\n\n\n\t//\n\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n\t//\n\t$.extend( _ext, {\n\t\tafnFiltering: _ext.search,\n\t\taTypes:       _ext.type.detect,\n\t\tofnSearch:    _ext.type.search,\n\t\toSort:        _ext.type.order,\n\t\tafnSortData:  _ext.order,\n\t\taoFeatures:   _ext.feature,\n\t\toApi:         _ext.internal,\n\t\toStdClasses:  _ext.classes,\n\t\toPagination:  _ext.pager\n\t} );\n\n\n\t$.extend( DataTable.ext.classes, {\n\t\t\"sTable\": \"dataTable\",\n\t\t\"sNoFooter\": \"no-footer\",\n\n\t\t/* Paging buttons */\n\t\t\"sPageButton\": \"pagination-item\",\n\t\t\"sPageButtonActive\": \"-active\",\n\t\t\"sPageButtonDisabled\": \"-disabled\",\n\n\t\t/* Striping classes */\n\t\t\"sStripeOdd\": \"odd\",\n\t\t\"sStripeEven\": \"even\",\n\n\t\t/* Empty row */\n\t\t\"sRowEmpty\": \"dataTables_empty\",\n\n\t\t/* Features */\n\t\t\"sWrapper\": \"dataTables_wrapper\",\n\t\t\"sFilter\": \"dataTables_filter\",\n\t\t\"sInfo\": \"dataTables_info\",\n\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n\t\t\"sLength\": \"dataTables_length\",\n\t\t\"sProcessing\": \"dataTables_processing\",\n\n\t\t/* Sorting */\n\t\t\"sSortAsc\": \"sorting_asc\",\n\t\t\"sSortDesc\": \"sorting_desc\",\n\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */\n\t\t\"sSortableAsc\": \"sorting_asc_disabled\",\n\t\t\"sSortableDesc\": \"sorting_desc_disabled\",\n\t\t\"sSortableNone\": \"sorting_disabled\",\n\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n\n\t\t/* Filtering */\n\t\t\"sFilterInput\": \"\",\n\n\t\t/* Page length */\n\t\t\"sLengthSelect\": \"\",\n\n\t\t/* Scrolling */\n\t\t\"sScrollWrapper\": \"dataTables_scroll\",\n\t\t\"sScrollHead\": \"dataTables_scrollHead\",\n\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n\t\t\"sScrollBody\": \"dataTables_scrollBody\",\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",\n\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n\t\t/* Misc */\n\t\t\"sHeaderTH\": \"\",\n\t\t\"sFooterTH\": \"\",\n\n\t\t// Deprecated\n\t\t\"sSortJUIAsc\": \"\",\n\t\t\"sSortJUIDesc\": \"\",\n\t\t\"sSortJUI\": \"\",\n\t\t\"sSortJUIAscAllowed\": \"\",\n\t\t\"sSortJUIDescAllowed\": \"\",\n\t\t\"sSortJUIWrapper\": \"\",\n\t\t\"sSortIcon\": \"\",\n\t\t\"sJUIHeader\": \"\",\n\t\t\"sJUIFooter\": \"\"\n\t} );\n\n\n\t(function() {\n\n\t// Reused strings for better compression. Closure compiler appears to have a\n\t// weird edge case where it is trying to expand strings rather than use the\n\t// variable version. This results in about 200 bytes being added, for very\n\t// little preference benefit since it this run on script load only.\n\tvar _empty = '';\n\t_empty = '';\n\n\tvar _stateDefault = _empty + 'ui-state-default';\n\tvar _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\n\tvar _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\n\n\t$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\n\t\t/* Full numbers paging buttons */\n\t\t\"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\n\t\t\"sPageButtonActive\":   \"ui-state-disabled\",\n\t\t\"sPageButtonDisabled\": \"ui-state-disabled\",\n\n\t\t/* Features */\n\t\t\"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\n\t\t\t\"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n\n\t\t/* Sorting */\n\t\t\"sSortAsc\":            _stateDefault+\" sorting_asc\",\n\t\t\"sSortDesc\":           _stateDefault+\" sorting_desc\",\n\t\t\"sSortable\":           _stateDefault+\" sorting\",\n\t\t\"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\n\t\t\"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\n\t\t\"sSortableNone\":       _stateDefault+\" sorting_disabled\",\n\t\t\"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\n\t\t\"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\n\t\t\"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\n\t\t\"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\n\t\t\"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\n\t\t\"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\n\t\t\"sSortIcon\":           \"DataTables_sort_icon\",\n\n\t\t/* Scrolling */\n\t\t\"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\n\n\t\t/* Misc */\n\t\t\"sHeaderTH\":  _stateDefault,\n\t\t\"sFooterTH\":  _stateDefault,\n\t\t\"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\n\t\t\"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\n\t} );\n\n\t}());\n\n\n\n\tvar extPagination = DataTable.ext.pager;\n\n\tfunction _numbers ( page, pages ) {\n\t\tvar\n\t\t\tnumbers = [],\n\t\t\tbuttons = extPagination.numbers_length,\n\t\t\thalf = Math.floor( buttons / 2 ),\n\t\t\ti = 1;\n\n\t\tif ( pages <= buttons ) {\n\t\t\tnumbers = _range( 0, pages );\n\t\t}\n\t\telse if ( page <= half ) {\n\t\t\tnumbers = _range( 0, buttons-2 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t}\n\t\telse if ( page >= pages - 1 - half ) {\n\t\t\tnumbers = _range( pages-(buttons-2), pages );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\telse {\n\t\t\tnumbers = _range( page-half+2, page+half-1 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' );\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\n\t\tnumbers.DT_el = 'span';\n\t\treturn numbers;\n\t}\n\n\n\t$.extend( extPagination, {\n\t\tsimple: function ( page, pages ) {\n\t\t\treturn [ 'previous', 'next' ];\n\t\t},\n\n\t\tfull: function ( page, pages ) {\n\t\t\treturn [  'first', 'previous', 'next', 'last' ];\n\t\t},\n\n\t\tnumbers: function ( page, pages ) {\n\t\t\treturn [ _numbers(page, pages) ];\n\t\t},\n\n\t\tsimple_numbers: function ( page, pages ) {\n\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];\n\t\t},\n\n\t\tfull_numbers: function ( page, pages ) {\n\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n\t\t},\n\n\t\tfirst_last_numbers: function (page, pages) {\n\t \t\treturn ['first', _numbers(page, pages), 'last'];\n\t \t},\n\n\t\t// For testing and plug-ins to use\n\t\t_numbers: _numbers,\n\n\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_\n\t\tnumbers_length: 7\n\t} );\n\n\n\t$.extend( true, DataTable.ext.renderer, {\n\t\tpageButton: {\n\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {\n\t\t\t\tvar classes = settings.oClasses;\n\t\t\t\tvar lang = settings.oLanguage.oPaginate;\n\t\t\t\tvar aria = settings.oLanguage.oAria.paginate || {};\n\t\t\t\tvar btnDisplay, btnClass, counter=0;\n\n\t\t\t\tvar attach = function( container, buttons ) {\n\t\t\t\t\tvar i, ien, node, button;\n\t\t\t\t\tvar clickHandler = function ( e ) {\n\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );\n\t\t\t\t\t};\n\n\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tbutton = buttons[i];\n\n\t\t\t\t\t\tif ( $.isArray( button ) ) {\n\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )\n\t\t\t\t\t\t\t\t.appendTo( container );\n\t\t\t\t\t\t\tattach( inner, button );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbtnDisplay = null;\n\t\t\t\t\t\t\tbtnClass = '';\n\n\t\t\t\t\t\t\tswitch ( button ) {\n\t\t\t\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'last':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbtnDisplay = button + 1;\n\t\t\t\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( btnDisplay !== null ) {\n\t\t\t\t\t\t\t\tnode = $('<a>', {\n\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t\t\t\t'aria-label': aria[ button ],\n\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,\n\t\t\t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,\n\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t\t\t\t.appendTo( container );\n\n\t\t\t\t\t\t\t\t_fnBindAction(\n\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for\n\t\t\t\t// accessibility, but neither are frames.\n\t\t\t\tvar activeEl;\n\n\t\t\t\ttry {\n\t\t\t\t\t// Because this approach is destroying and recreating the paging\n\t\t\t\t\t// elements, focus is lost on the select button which is bad for\n\t\t\t\t\t// accessibility. So we want to restore focus once the draw has\n\t\t\t\t\t// completed\n\t\t\t\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');\n\t\t\t\t}\n\t\t\t\tcatch (e) {}\n\n\t\t\t\tattach( $(host).empty(), buttons );\n\n\t\t\t\tif ( activeEl !== undefined ) {\n\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\n\n\n\t// Built in type detection. See model.ext.aTypes for information about\n\t// what is required from this methods.\n\t$.extend( DataTable.ext.type.detect, [\n\t\t// Plain numbers - first since V8 detects some plain numbers as dates\n\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;\n\t\t},\n\n\t\t// Dates (only those recognised by the browser's Date.parse)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\t// V8 tries _very_ hard to make a string passed into `Date.parse()`\n\t\t\t// valid, so we need to use a regex to restrict date formats. Use a\n\t\t\t// plug-in for anything other than ISO8601 style strings\n\t\t\tif ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar parsed = Date.parse(d);\n\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n\t\t},\n\n\t\t// Formatted numbers\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n\t\t},\n\n\t\t// HTML numeric\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n\t\t},\n\n\t\t// HTML numeric, formatted\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n\t\t},\n\n\t\t// HTML (this is strict checking - there must be html)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n\t\t\t\t'html' : null;\n\t\t}\n\t] );\n\n\n\n\t// Filter formatting functions. See model.ext.ofnSearch for information about\n\t// what is required from these methods.\n\t//\n\t// Note that additional search methods are added for the html numbers and\n\t// html formatted numbers by `_addNumericSort()` when we know what the decimal\n\t// place is\n\n\n\t$.extend( DataTable.ext.type.search, {\n\t\thtml: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata\n\t\t\t\t\t\t.replace( _re_new_lines, \" \" )\n\t\t\t\t\t\t.replace( _re_html, \"\" ) :\n\t\t\t\t\t'';\n\t\t},\n\n\t\tstring: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :\n\t\t\t\t\tdata;\n\t\t}\n\t} );\n\n\n\n\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n\t\tif ( d !== 0 && (!d || d === '-') ) {\n\t\t\treturn -Infinity;\n\t\t}\n\n\t\t// If a decimal place other than `.` is used, it needs to be given to the\n\t\t// function so we can detect it and replace with a `.` which is the only\n\t\t// decimal place Javascript recognises - it is not locale aware.\n\t\tif ( decimalPlace ) {\n\t\t\td = _numToDecimal( d, decimalPlace );\n\t\t}\n\n\t\tif ( d.replace ) {\n\t\t\tif ( re1 ) {\n\t\t\t\td = d.replace( re1, '' );\n\t\t\t}\n\n\t\t\tif ( re2 ) {\n\t\t\t\td = d.replace( re2, '' );\n\t\t\t}\n\t\t}\n\n\t\treturn d * 1;\n\t};\n\n\n\t// Add the numeric 'deformatting' functions for sorting and search. This is done\n\t// in a function to provide an easy ability for the language options to add\n\t// additional methods if a non-period decimal place is used.\n\tfunction _addNumericSort ( decimalPlace ) {\n\t\t$.each(\n\t\t\t{\n\t\t\t\t// Plain numbers\n\t\t\t\t\"num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace );\n\t\t\t\t},\n\n\t\t\t\t// Formatted numbers\n\t\t\t\t\"num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );\n\t\t\t\t},\n\n\t\t\t\t// HTML numeric\n\t\t\t\t\"html-num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );\n\t\t\t\t},\n\n\t\t\t\t// HTML numeric, formatted\n\t\t\t\t\"html-num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction ( key, fn ) {\n\t\t\t\t// Add the ordering method\n\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;\n\n\t\t\t\t// For HTML types add a search formatter that will strip the HTML\n\t\t\t\tif ( key.match(/^html\\-/) ) {\n\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\n\t// Default sort methods\n\t$.extend( _ext.type.order, {\n\t\t// Dates\n\t\t\"date-pre\": function ( d ) {\n\t\t\treturn Date.parse( d ) || -Infinity;\n\t\t},\n\n\t\t// html\n\t\t\"html-pre\": function ( a ) {\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ta.replace ?\n\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :\n\t\t\t\t\ta+'';\n\t\t},\n\n\t\t// string\n\t\t\"string-pre\": function ( a ) {\n\t\t\t// This is a little complex, but faster than always calling toString,\n\t\t\t// http://jsperf.com/tostring-v-check\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ttypeof a === 'string' ?\n\t\t\t\t\ta.toLowerCase() :\n\t\t\t\t\t! a.toString ?\n\t\t\t\t\t\t'' :\n\t\t\t\t\t\ta.toString();\n\t\t},\n\n\t\t// string-asc and -desc are retained only for compatibility with the old\n\t\t// sort methods\n\t\t\"string-asc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t},\n\n\t\t\"string-desc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t}\n\t} );\n\n\n\t// Numeric sorting types - order doesn't matter here\n\t_addNumericSort( '' );\n\n\n\t$.extend( true, DataTable.ext.renderer, {\n\t\theader: {\n\t\t\t_: function ( settings, cell, column, classes ) {\n\t\t\t\t// No additional mark-up required\n\t\t\t\t// Attach a sort listener to update on sort - note that using the\n\t\t\t\t// `DT` namespace will allow the event to be removed automatically\n\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are\n\t\t\t\t// listening for\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host\n\t\t\t\t\t\treturn;               // table, not a nested one\n\t\t\t\t\t}\n\n\t\t\t\t\tvar colIdx = column.idx;\n\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tcolumn.sSortingClass +' '+\n\t\t\t\t\t\t\tclasses.sSortAsc +' '+\n\t\t\t\t\t\t\tclasses.sSortDesc\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tjqueryui: function ( settings, cell, column, classes ) {\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.addClass( classes.sSortJUIWrapper )\n\t\t\t\t\t.append( cell.contents() )\n\t\t\t\t\t.append( $('<span/>')\n\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n\t\t\t\t\t)\n\t\t\t\t\t.appendTo( cell );\n\n\t\t\t\t// Attach a sort listener to update on sort\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar colIdx = column.idx;\n\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcell\n\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/*\n\t * Public helper functions. These aren't used internally by DataTables, or\n\t * called by any of the options passed into DataTables, but they can be used\n\t * externally by developers working with DataTables. They are helper functions\n\t * to make working with DataTables a little bit easier.\n\t */\n\n\tvar __htmlEscapeEntities = function ( d ) {\n\t\treturn typeof d === 'string' ?\n\t\t\td.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') :\n\t\t\td;\n\t};\n\n\t/**\n\t * Helpers for `columns.render`.\n\t *\n\t * The options defined here can be used with the `columns.render` initialisation\n\t * option to provide a display renderer. The following functions are defined:\n\t *\n\t * * `number` - Will format numeric data (defined by `columns.data`) for\n\t *   display, retaining the original unformatted data for sorting and filtering.\n\t *   It takes 5 parameters:\n\t *   * `string` - Thousands grouping separator\n\t *   * `string` - Decimal point indicator\n\t *   * `integer` - Number of decimal points to show\n\t *   * `string` (optional) - Prefix.\n\t *   * `string` (optional) - Postfix (/suffix).\n\t * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n\t *   parameters.\n\t *\n\t * @example\n\t *   // Column definition using the number renderer\n\t *   {\n\t *     data: \"salary\",\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n\t *   }\n\t *\n\t * @namespace\n\t */\n\tDataTable.render = {\n\t\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {\n\t\t\treturn {\n\t\t\t\tdisplay: function ( d ) {\n\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar negative = d < 0 ? '-' : '';\n\t\t\t\t\tvar flo = parseFloat( d );\n\n\t\t\t\t\t// If NaN then there isn't much formatting that we can do - just\n\t\t\t\t\t// return immediately, escaping any HTML (this was supposed to\n\t\t\t\t\t// be a number after all)\n\t\t\t\t\tif ( isNaN( flo ) ) {\n\t\t\t\t\t\treturn __htmlEscapeEntities( d );\n\t\t\t\t\t}\n\n\t\t\t\t\tflo = flo.toFixed( precision );\n\t\t\t\t\td = Math.abs( flo );\n\n\t\t\t\t\tvar intPart = parseInt( d, 10 );\n\t\t\t\t\tvar floatPart = precision ?\n\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):\n\t\t\t\t\t\t'';\n\n\t\t\t\t\treturn negative + (prefix||'') +\n\t\t\t\t\t\tintPart.toString().replace(\n\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tfloatPart +\n\t\t\t\t\t\t(postfix||'');\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\ttext: function () {\n\t\t\treturn {\n\t\t\t\tdisplay: __htmlEscapeEntities\n\t\t\t};\n\t\t}\n\t};\n\n\n\t/*\n\t * This is really a good bit rubbish this method of exposing the internal methods\n\t * publicly... - To be fixed in 2.0 using methods on the prototype\n\t */\n\n\n\t/**\n\t * Create a wrapper function for exporting an internal functions to an external API.\n\t *  @param {string} fn API function name\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#internal\n\t */\n\tfunction _fnExternApiFunc (fn)\n\t{\n\t\treturn function() {\n\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n\t\t\t\tArray.prototype.slice.call(arguments)\n\t\t\t);\n\t\t\treturn DataTable.ext.internal[fn].apply( this, args );\n\t\t};\n\t}\n\n\n\t/**\n\t * Reference to internal functions for use by plug-in developers. Note that\n\t * these methods are references to internal functions and are considered to be\n\t * private. If you use these methods, be aware that they are liable to change\n\t * between versions.\n\t *  @namespace\n\t */\n\t$.extend( DataTable.ext.internal, {\n\t\t_fnExternApiFunc: _fnExternApiFunc,\n\t\t_fnBuildAjax: _fnBuildAjax,\n\t\t_fnAjaxUpdate: _fnAjaxUpdate,\n\t\t_fnAjaxParameters: _fnAjaxParameters,\n\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,\n\t\t_fnAddColumn: _fnAddColumn,\n\t\t_fnColumnOptions: _fnColumnOptions,\n\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,\n\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,\n\t\t_fnVisbleColumns: _fnVisbleColumns,\n\t\t_fnGetColumns: _fnGetColumns,\n\t\t_fnColumnTypes: _fnColumnTypes,\n\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,\n\t\t_fnHungarianMap: _fnHungarianMap,\n\t\t_fnCamelToHungarian: _fnCamelToHungarian,\n\t\t_fnLanguageCompat: _fnLanguageCompat,\n\t\t_fnBrowserDetect: _fnBrowserDetect,\n\t\t_fnAddData: _fnAddData,\n\t\t_fnAddTr: _fnAddTr,\n\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,\n\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,\n\t\t_fnGetCellData: _fnGetCellData,\n\t\t_fnSetCellData: _fnSetCellData,\n\t\t_fnSplitObjNotation: _fnSplitObjNotation,\n\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,\n\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,\n\t\t_fnGetDataMaster: _fnGetDataMaster,\n\t\t_fnClearTable: _fnClearTable,\n\t\t_fnDeleteIndex: _fnDeleteIndex,\n\t\t_fnInvalidate: _fnInvalidate,\n\t\t_fnGetRowElements: _fnGetRowElements,\n\t\t_fnCreateTr: _fnCreateTr,\n\t\t_fnBuildHead: _fnBuildHead,\n\t\t_fnDrawHead: _fnDrawHead,\n\t\t_fnDraw: _fnDraw,\n\t\t_fnReDraw: _fnReDraw,\n\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,\n\t\t_fnDetectHeader: _fnDetectHeader,\n\t\t_fnGetUniqueThs: _fnGetUniqueThs,\n\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n\t\t_fnFilterComplete: _fnFilterComplete,\n\t\t_fnFilterCustom: _fnFilterCustom,\n\t\t_fnFilterColumn: _fnFilterColumn,\n\t\t_fnFilter: _fnFilter,\n\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,\n\t\t_fnEscapeRegex: _fnEscapeRegex,\n\t\t_fnFilterData: _fnFilterData,\n\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n\t\t_fnUpdateInfo: _fnUpdateInfo,\n\t\t_fnInfoMacros: _fnInfoMacros,\n\t\t_fnInitialise: _fnInitialise,\n\t\t_fnInitComplete: _fnInitComplete,\n\t\t_fnLengthChange: _fnLengthChange,\n\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,\n\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n\t\t_fnPageChange: _fnPageChange,\n\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n\t\t_fnProcessingDisplay: _fnProcessingDisplay,\n\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,\n\t\t_fnScrollDraw: _fnScrollDraw,\n\t\t_fnApplyToChildren: _fnApplyToChildren,\n\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,\n\t\t_fnThrottle: _fnThrottle,\n\t\t_fnConvertToWidth: _fnConvertToWidth,\n\t\t_fnGetWidestNode: _fnGetWidestNode,\n\t\t_fnGetMaxLenString: _fnGetMaxLenString,\n\t\t_fnStringToCss: _fnStringToCss,\n\t\t_fnSortFlatten: _fnSortFlatten,\n\t\t_fnSort: _fnSort,\n\t\t_fnSortAria: _fnSortAria,\n\t\t_fnSortListener: _fnSortListener,\n\t\t_fnSortAttachListener: _fnSortAttachListener,\n\t\t_fnSortingClasses: _fnSortingClasses,\n\t\t_fnSortData: _fnSortData,\n\t\t_fnSaveState: _fnSaveState,\n\t\t_fnLoadState: _fnLoadState,\n\t\t_fnSettingsFromNode: _fnSettingsFromNode,\n\t\t_fnLog: _fnLog,\n\t\t_fnMap: _fnMap,\n\t\t_fnBindAction: _fnBindAction,\n\t\t_fnCallbackReg: _fnCallbackReg,\n\t\t_fnCallbackFire: _fnCallbackFire,\n\t\t_fnLengthOverflow: _fnLengthOverflow,\n\t\t_fnRenderer: _fnRenderer,\n\t\t_fnDataSource: _fnDataSource,\n\t\t_fnRowAttributes: _fnRowAttributes,\n\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n\t\t                                // in 1.10, so this dead-end function is\n\t\t                                // added to prevent errors\n\t} );\n\n\n\t// jQuery access\n\t$.fn.dataTable = DataTable;\n\n\t// Provide access to the host jQuery object (circular reference)\n\tDataTable.$ = $;\n\n\t// Legacy aliases\n\t$.fn.dataTableSettings = DataTable.settings;\n\t$.fn.dataTableExt = DataTable.ext;\n\n\t// With a capital `D` we return a DataTables API instance rather than a\n\t// jQuery object\n\t$.fn.DataTable = function ( opts ) {\n\t\treturn $(this).dataTable( opts ).api();\n\t};\n\n\t// All properties that are available to $.fn.dataTable should also be\n\t// available on $.fn.DataTable\n\t$.each( DataTable, function ( prop, val ) {\n\t\t$.fn.DataTable[ prop ] = val;\n\t} );\n\n\n\t// Information about events fired by DataTables - for documentation.\n\t/**\n\t * Draw event, fired whenever the table is redrawn on the page, at the same\n\t * point as fnDrawCallback. This may be useful for binding events or\n\t * performing calculations when the table is altered at all.\n\t *  @name DataTable#draw.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Search event, fired when the searching applied to the table (using the\n\t * built-in global search, or column filters) is altered.\n\t *  @name DataTable#search.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page change event, fired when the paging of the table is altered.\n\t *  @name DataTable#page.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Order event, fired when the ordering applied to the table is altered.\n\t *  @name DataTable#order.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * DataTables initialisation complete event, fired when the table is fully\n\t * drawn, including Ajax data loaded, if Ajax data is required.\n\t *  @name DataTable#init.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The JSON object request from the server - only\n\t *    present if client-side Ajax sourced data is used</li></ol>\n\t */\n\n\t/**\n\t * State save event, fired when the table has changed state a new state save\n\t * is required. This event allows modification of the state saving object\n\t * prior to actually doing the save, including addition or other state\n\t * properties (for plug-ins) or modification of a DataTables core property.\n\t *  @name DataTable#stateSaveParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The state information to be saved\n\t */\n\n\t/**\n\t * State load event, fired when the table is loading state from the stored\n\t * data, but prior to the settings object being modified by the saved state\n\t * - allowing modification of the saved state is required or loading of\n\t * state for a plug-in.\n\t *  @name DataTable#stateLoadParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * State loaded event, fired when state has been loaded from stored data and\n\t * the settings object has been modified by the loaded data.\n\t *  @name DataTable#stateLoaded.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * Processing event, fired when DataTables is doing some kind of processing\n\t * (be it, order, searcg or anything else). It can be used to indicate to\n\t * the end user that there is something happening, or that something has\n\t * finished.\n\t *  @name DataTable#processing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n\t */\n\n\t/**\n\t * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n\t * request to made to the server for new data. This event is called before\n\t * DataTables processed the returned data, so it can also be used to pre-\n\t * process the data returned from the server, if needed.\n\t *\n\t * Note that this trigger is called in `fnServerData`, if you override\n\t * `fnServerData` and which to use this event, you need to trigger it in you\n\t * success function.\n\t *  @name DataTable#xhr.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {object} json JSON returned from the server\n\t *\n\t *  @example\n\t *     // Use a custom property returned from the server in another DOM element\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       $('#status').html( json.status );\n\t *     } );\n\t *\n\t *  @example\n\t *     // Pre-process the data returned from the server\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n\t *       }\n\t *       // Note no return - manipulate the data directly in the JSON object.\n\t *     } );\n\t */\n\n\t/**\n\t * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n\t * or passing the bDestroy:true parameter in the initialisation object. This\n\t * can be used to remove bound events, added DOM nodes, etc.\n\t *  @name DataTable#destroy.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page length change event, fired when number of records to show on each\n\t * page (the length) is changed.\n\t *  @name DataTable#length.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {integer} len New length\n\t */\n\n\t/**\n\t * Column sizing has changed.\n\t *  @name DataTable#column-sizing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Column visibility has changed.\n\t *  @name DataTable#column-visibility.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {int} column Column index\n\t *  @param {bool} vis `false` if column now hidden, or `true` if visible\n\t */\n\n\treturn $.fn.dataTable;\n}));\n\n/*! DataTables Bootstrap 3 integration\n * ©2011-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and\n * DataTables 1.10 or newer.\n *\n * This file sets the defaults and adds options to DataTables to style its\n * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap\n * for further information.\n */\n(function( factory ){\n\tfactory( jQuery, window, document );\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n/* Set the defaults for DataTables initialisation */\n$.extend( true, DataTable.defaults, {\n\tdom:\n\t\t\"<'row'<'col -xs-12 col -md-6'l><'col -xs-12 col -md-6'f>>\" +\n\t\t\"<'row'<'col -xs-12'tr>>\" +\n\t\t\"<'row'<'col -xs-12 col -md-5'i><'col -xs-12 col -md-7'p>>\",\n\trenderer: 'bootstrap'\n} );\n\n\n/* Default class modification */\n$.extend( DataTable.ext.classes, {\n\tsWrapper:      \"dataTables_wrapper form-inline dt-bootstrap4\",\n\tsFilterInput:  \"form-control input-sm -dark\",\n\tsLengthSelect: \"form-control input-sm -dark\",\n\tsProcessing:   \"dataTables_processing panel -default\",\n\tsPageButton:   \"paginate_button pagination-item\"\n} );\n\n\n/* Bootstrap paging button renderer */\nDataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {\n\tvar api     = new DataTable.Api( settings );\n\tvar classes = settings.oClasses;\n\tvar lang    = settings.oLanguage.oPaginate;\n\tvar aria = settings.oLanguage.oAria.paginate || {};\n\tvar btnDisplay, btnClass, counter=0;\n\n\tvar attach = function( container, buttons ) {\n\t\tvar i, ien, node, button;\n\t\tvar clickHandler = function ( e ) {\n\t\t\te.preventDefault();\n\t\t\tif ( !$(e.currentTarget).hasClass('-disabled') && api.page() != e.data.action ) {\n\t\t\t\tapi.page( e.data.action ).draw( 'page' );\n\t\t\t}\n\t\t};\n\n\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\tbutton = buttons[i];\n\n\t\t\tif ( $.isArray( button ) ) {\n\t\t\t\tattach( container, button );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbtnDisplay = '';\n\t\t\t\tbtnClass = '';\n\n\t\t\t\tswitch ( button ) {\n\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\tbtnDisplay = '&#x2026;';\n\t\t\t\t\t\tbtnClass = '-disabled';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'first':\n\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t'' : ' -disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t'' : ' -disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'next':\n\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t'' : ' -disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'last':\n\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t'' : ' -disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbtnDisplay = button + 1;\n\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t'-active' : '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( btnDisplay ) {\n\t\t\t\t\tnode = $('<li>', {\n\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.append( $('<a>', {\n\t\t\t\t\t\t\t\t'href': '#',\n\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t\t'aria-label': aria[ button ],\n\t\t\t\t\t\t\t\t'data-dt-idx': counter,\n\t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex\n\t\t\t\t\t\t\t\t// 'class': 'page-link'\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.appendTo( container );\n\n\t\t\t\t\tsettings.oApi._fnBindAction(\n\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t);\n\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t// inside an iframe or frame.\n\tvar activeEl;\n\n\ttry {\n\t\t// Because this approach is destroying and recreating the paging\n\t\t// elements, focus is lost on the select button which is bad for\n\t\t// accessibility. So we want to restore focus once the draw has\n\t\t// completed\n\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');\n\t}\n\tcatch (e) {}\n\n\tattach(\n\t\t$(host).empty().html('<ul class=\"pagination -dark\"/>').children('ul'),\n\t\tbuttons\n\t);\n\n\tif ( activeEl !== undefined ) {\n\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n\t}\n};\n\n\nreturn DataTable;\n}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}