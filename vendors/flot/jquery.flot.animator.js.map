{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/flot/build/vendors/flot/jquery.flot.animator.js"],"names":[],"mappings":"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","file":"jquery.flot.animator.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * The MIT License\n\nThis is a fork of jquery.flot.grow by Thodoris Greasidis,\nthat implements the growing animations using requestAnimationFrame\nand introduces varius bug fixes and improvements.\n\nCopyright (c) 2013,2014 by Thodoris Greasidis\n\nCopyright (c) 2010,2011,2012, 2013 by Juergen Marsch\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n(function ($) {\n    'use strict';\n    var pluginName = 'growraf', pluginVersion = '0.5.0';\n    var options = {\n        series: {\n            grow: {\n                active: false,\n                //stepDelay: 20,\n                //steps: 100,\n                duration: 1000,\n                valueIndex: 1,\n                reanimate: true,\n                growings: [\n                    {\n                        valueIndex: 1,\n                        stepMode: 'linear',\n                        stepDirection: 'up',\n                        reanimate: 'continue'\n                    }\n                ]\n            }\n        }\n    };\n\n    /** @enum {number} */\n    var GrowPhase = {\n        NOT_PLOTTED_YET: 0,\n        PLOTTED_SOME_FRAMES: 1,\n        PLOTTED_LAST_FRAME: 2\n    };\n\n    var growFunctions = {\n        none: function (dataj, timePassed, growing, growPhase) {\n            if (growPhase === GrowPhase.NOT_PLOTTED_YET) {\n                for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {\n                    dataj.data[i][growing.valueIndex] = dataj.dataOrg[i][growing.valueIndex];\n                }\n            }\n        },\n        linear: function (dataj, timePassed, growing/*, growPhase*/) {\n            var percentage = Math.min(timePassed / dataj.grow.duration, 1);\n            var axis = dataj.yaxis;\n            if (dataj.bars && dataj.bars.show && dataj.bars.horizontal) {\n                axis = dataj.xaxis;\n            }\n\n            for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {\n                var originalValue = dataj.dataOrg[i][growing.valueIndex];\n\n                if (originalValue !== null) {\n                    if (growing.stepDirection === 'up') {\n                        dataj.data[i][growing.valueIndex] = originalValue * percentage;\n                    }\n                    else if (growing.stepDirection === 'down') {\n                        dataj.data[i][growing.valueIndex] = originalValue + (axis.max - originalValue) * (1 - percentage);\n                    }\n                } else {\n                    dataj.data[i][growing.valueIndex] = null;\n                }\n            }\n        },\n        maximum: function (dataj, timePassed, growing/*, growPhase*/) {\n            var percentage = Math.min(timePassed / dataj.grow.duration, 1);\n            var axis = dataj.yaxis;\n            if (dataj.bars && dataj.bars.show && dataj.bars.horizontal) {\n                axis = dataj.xaxis;\n            }\n\n            var upMax   = axis.max * percentage,\n                upMin   = axis.min * percentage,\n                downMax = axis.max * (1 - percentage),\n                downMin = axis.min * (1 - percentage);\n            for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {\n                var originalValue = dataj.dataOrg[i][growing.valueIndex];\n\n                if (originalValue !== null) {\n                    if (growing.stepDirection === 'up') {\n                        if (originalValue >= 0) {\n                            dataj.data[i][growing.valueIndex] = Math.min(originalValue, upMax);\n                        } else {\n                            dataj.data[i][growing.valueIndex] = Math.max(originalValue, upMin);\n                        }\n                    }\n                    else if (growing.stepDirection === 'down') {\n                        if (originalValue >= 0) {\n                            dataj.data[i][growing.valueIndex] = Math.max(originalValue, downMax);\n                        } else {\n                            dataj.data[i][growing.valueIndex] = Math.min(originalValue, downMin);\n                        }\n                    }\n                } else {\n                    dataj.data[i][growing.valueIndex] = null;\n                }\n            }\n        },\n        delay: function (dataj, timePassed, growing/*, growPhase*/) {\n            if (timePassed >= dataj.grow.duration) {\n                for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {\n                    dataj.data[i][growing.valueIndex] = dataj.dataOrg[i][growing.valueIndex];\n                }\n            }\n        },\n        reanimate: function (dataj, timePassed, growing/*, growPhase*/) {\n            var percentage = Math.min(timePassed / dataj.grow.duration, 1);\n\n            for (var i = 0, djdatalen = dataj.data.length; i < djdatalen; i++) {\n                var targetValue = dataj.dataOrg[i][growing.valueIndex];\n\n                if (targetValue === null) {\n                    dataj.data[i][growing.valueIndex] = null;\n                } else if (dataj.dataOld) {\n                    var oldData = dataj.dataOld[i][growing.valueIndex];\n                    dataj.data[i][growing.valueIndex] = oldData + (targetValue - oldData) * percentage;\n                }\n            }\n        }\n    };\n\n    var requestAnimationFrame;\n    var cancelAnimationFrame;\n    polyfillLocalRequestAnimationFrame();\n\n    function init(plot) {\n        // State variables\n        var processSeriesDone = false;\n        var initGrowingLoop = true;\n        var startTime = 0, timePassed = 0, growPhase = GrowPhase.NOT_PLOTTED_YET;\n        var dataOld = [];\n\n        var growfunc;\n        var plt = plot;\n        var data = null;\n        var opt = null;\n        plot.hooks.drawSeries.push(processSeries);\n        plot.hooks.draw.push(drawDone);\n        plot.hooks.bindEvents.push(processbindEvents);\n        plot.hooks.shutdown.push(shutdown);\n\n\n        function processSeries(plot/*, canvascontext, series*/) {\n            opt = plot.getOptions();\n            var valueIndex = opt.series.grow.valueIndex;\n            if (opt.series.grow.active === true) {\n                var reanimate = false;\n                var j = 0;\n\n                if (opt.series.grow.reanimate && growPhase === GrowPhase.PLOTTED_LAST_FRAME) {\n                    // reset animation state\n                    processSeriesDone = false;\n                    growPhase = GrowPhase.NOT_PLOTTED_YET;\n                    startTime = 0;\n\n                    // restore old data from the tempory variable to the actual plot data\n                    data = plot.getData();\n                    var minLen = Math.min(data.length, dataOld.length);\n                    for (j = 0; j < minLen; j++) {\n                        data[j].dataOld = dataOld[j];\n                    }\n\n                    reanimate = true;\n                    initGrowingLoop = true;\n                }\n\n                if (!processSeriesDone) {\n                    // do not refetch the data in case of a reanimate,\n                    // so that a single setData is called\n                    if (!reanimate) {\n                        data = plot.getData();\n                    }\n\n                    growPhase = GrowPhase.NOT_PLOTTED_YET;\n                    startTime = +new Date() | 0;\n                    dataOld = [];\n                    for (j = 0; j < data.length; j++) {\n                        var dataj = data[j];\n                        // deep cloning the original data\n                        dataj.dataOrg = $.extend(true, [], dataj.data);\n                        // keep the data in a temporary array, in case a reanimation is requested\n                        dataOld.push(dataj.dataOrg);\n\n                        if (!reanimate) {\n                            valueIndex = dataj.grow.valueIndex;\n                            // set zero or null initial data values.\n                            for (var i = 0; i < dataj.data.length; i++) {\n                                dataj.data[i][valueIndex] = dataj.dataOrg[i][valueIndex] === null ? null : 0;\n                            }\n                        }\n                    }\n                    plot.setData(data);\n                    processSeriesDone = true;\n                }\n            }\n        }\n\n        function drawDone(plot/*, canvascontext*/) {\n            if (initGrowingLoop === true) {\n                initiateGrowingLoop(plot);\n            }\n        }\n\n        function initiateGrowingLoop(plot) {\n            opt = plot.getOptions();\n            if (opt.series.grow.active === true) {\n                calculateMaxDuration(plot.getData(), opt);\n\n                startTime = +new Date() | 0;\n                growfunc = requestAnimationFrame(growingLoop);\n            }\n            initGrowingLoop = false;\n        }\n\n        function calculateMaxDuration(data, opt) {\n            var maxDuration = opt.series.grow.duration;\n            for (var j = 0, datalen = data.length; j < datalen; j++) {\n                var datajDuration = data[j].grow.duration;\n                if (maxDuration < datajDuration) {\n                    maxDuration = datajDuration;\n                }\n            }\n            opt.series.grow.duration = maxDuration;\n        }\n\n        function processbindEvents(plot/*, eventHolder*/) {\n            if (isPluginRegistered('resize')) {\n                plot.getPlaceholder().resize(onResize);\n            }\n        }\n\n        function growingLoop() {\n            timePassed = (+new Date()) - startTime | 0;\n\n            if (data == null) {\n                data = [];\n            }\n\n            for (var j = 0, datalen = data.length; j < datalen; j++) {\n                var dataj = data[j];\n                var isReAnimation = dataj.dataOld && dataj.dataOld.length > 0;\n\n                for (var g = 0, glen = dataj.grow.growings.length; g < glen; g++) {\n                    var growing = dataj.grow.growings[g];\n                    var func;\n\n                    if (isReAnimation && growing.reanimate !== 'reinit') {\n                        if (typeof growing.reanimate === 'function') {\n                            func = growing.reanimate;\n                        } if (growing.reanimate === 'continue') {\n                            func = growFunctions.reanimate;\n                        } else {// if (growing.reanimate === 'none')\n                            func = growFunctions.none;\n                        }\n                    } else if (typeof growing.stepMode === 'function') {\n                        func = growing.stepMode;\n                    } else {\n                        // if stepMode does not exist, use 'none'\n                        func = growFunctions[growing.stepMode] || growFunctions.none;\n                    }\n                    func(dataj, timePassed, growing, growPhase);\n                }\n            }\n\n            plt.setData(data);\n            plt.draw();\n\n            if (growPhase === GrowPhase.NOT_PLOTTED_YET) {\n                growPhase = GrowPhase.PLOTTED_SOME_FRAMES;\n            }\n\n            if (timePassed < opt.series.grow.duration) {\n                growfunc = requestAnimationFrame(growingLoop);\n            } else {\n                growPhase = GrowPhase.PLOTTED_LAST_FRAME;\n                growfunc = null;\n                plt.getPlaceholder().trigger('growFinished');\n            }\n        }\n\n        function onResize() {\n            if (growfunc) {\n                for (var j = 0; j < data.length; j++) {\n                    var dataj = data[j];\n                    // deep cloning the original data\n                    dataj.data = $.extend(true, [], dataj.dataOrg);\n                }\n                plot.setData(data);\n                plot.setupGrid();\n            }\n        }\n\n        function shutdown(plot/*, eventHolder*/) {\n            plot.getPlaceholder().unbind('resize', onResize);\n            if (growfunc) {\n                cancelAnimationFrame(growfunc);\n                growfunc = null;\n            }\n        }\n    }\n\n    function isPluginRegistered(pluginName) {\n        var plugins = $.plot.plugins;\n\n        for (var i = 0, len = plugins.length; i < len; i++) {\n            var plug = plugins[i];\n\n            if (plug.name === pluginName) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Derived from:\n    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n    // requestAnimationFrame polyfill by Erik Möller\n    // fixes from Paul Irish and Tino Zijdel\n    function polyfillLocalRequestAnimationFrame() {\n        var rAF = window.requestAnimationFrame;\n        var cAF = window.cancelAnimationFrame;\n\n        var lastTime = +new Date();\n        var vendors = ['ms', 'moz', 'webkit', 'o'];\n        for(var x = 0; x < vendors.length && !rAF; ++x) {\n            rAF = window[vendors[x]+'RequestAnimationFrame'];\n\n            cAF = window[vendors[x]+'CancelAnimationFrame'] ||\n                  window[vendors[x]+'CancelRequestAnimationFrame'];\n        }\n        if (!rAF) {\n            rAF = function(callback/*, element*/) {\n                var currTime = +new Date();\n                var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                var id = window.setTimeout(function() {\n                    callback(currTime + timeToCall);\n                }, timeToCall);\n                lastTime = currTime + timeToCall;\n                return id;\n            };\n        }\n        if (!cAF) {\n            cAF = function(id) {\n                clearTimeout(id);\n            };\n        }\n        requestAnimationFrame = rAF;\n        cancelAnimationFrame = cAF;\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: pluginName,\n        version: pluginVersion\n    });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}