{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/flot/build/vendors/flot/jquery.flot.categories.js"],"names":[],"mappings":"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","file":"jquery.flot.categories.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Flot plugin for plotting textual data or categories.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nConsider a dataset like [[\"February\", 34], [\"March\", 20], ...]. This plugin\nallows you to plot such a dataset directly.\n\nTo enable it, you must specify mode: \"categories\" on the axis with the textual\nlabels, e.g.\n\n\t$.plot(\"#placeholder\", data, { xaxis: { mode: \"categories\" } });\n\nBy default, the labels are ordered as they are met in the data series. If you\nneed a different ordering, you can specify \"categories\" on the axis options\nand list the categories there:\n\n\txaxis: {\n\t\tmode: \"categories\",\n\t\tcategories: [\"February\", \"March\", \"April\"]\n\t}\n\nIf you need to customize the distances between the categories, you can specify\n\"categories\" as an object mapping labels to values\n\n\txaxis: {\n\t\tmode: \"categories\",\n\t\tcategories: { \"February\": 1, \"March\": 3, \"April\": 4 }\n\t}\n\nIf you don't specify all categories, the remaining categories will be numbered\nfrom the max value plus 1 (with a spacing of 1 between each).\n\nInternally, the plugin works by transforming the input data through an auto-\ngenerated mapping where the first category becomes 0, the second 1, etc.\nHence, a point like [\"February\", 34] becomes [0, 34] internally in Flot (this\nis visible in hover and click events that return numbers rather than the\ncategory labels). The plugin also overrides the tick generator to spit out the\ncategories as ticks instead of the values.\n\nIf you need to map a value back to its label, the mapping is always accessible\nas \"categories\" on the axis object, e.g. plot.getAxes().xaxis.categories.\n\n*/\n\n(function ($) {\n    var options = {\n        xaxis: {\n            categories: null\n        },\n        yaxis: {\n            categories: null\n        }\n    };\n    \n    function processRawData(plot, series, data, datapoints) {\n        // if categories are enabled, we need to disable\n        // auto-transformation to numbers so the strings are intact\n        // for later processing\n\n        var xCategories = series.xaxis.options.mode == \"categories\",\n            yCategories = series.yaxis.options.mode == \"categories\";\n        \n        if (!(xCategories || yCategories))\n            return;\n\n        var format = datapoints.format;\n\n        if (!format) {\n            // FIXME: auto-detection should really not be defined here\n            var s = series;\n            format = [];\n            format.push({ x: true, number: true, required: true });\n            format.push({ y: true, number: true, required: true });\n\n            if (s.bars.show || (s.lines.show && s.lines.fill)) {\n                var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\n                format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\n                if (s.bars.horizontal) {\n                    delete format[format.length - 1].y;\n                    format[format.length - 1].x = true;\n                }\n            }\n            \n            datapoints.format = format;\n        }\n\n        for (var m = 0; m < format.length; ++m) {\n            if (format[m].x && xCategories)\n                format[m].number = false;\n            \n            if (format[m].y && yCategories)\n                format[m].number = false;\n        }\n    }\n\n    function getNextIndex(categories) {\n        var index = -1;\n        \n        for (var v in categories)\n            if (categories[v] > index)\n                index = categories[v];\n\n        return index + 1;\n    }\n\n    function categoriesTickGenerator(axis) {\n        var res = [];\n        for (var label in axis.categories) {\n            var v = axis.categories[label];\n            if (v >= axis.min && v <= axis.max)\n                res.push([v, label]);\n        }\n\n        res.sort(function (a, b) { return a[0] - b[0]; });\n\n        return res;\n    }\n    \n    function setupCategoriesForAxis(series, axis, datapoints) {\n        if (series[axis].options.mode != \"categories\")\n            return;\n        \n        if (!series[axis].categories) {\n            // parse options\n            var c = {}, o = series[axis].options.categories || {};\n            if ($.isArray(o)) {\n                for (var i = 0; i < o.length; ++i)\n                    c[o[i]] = i;\n            }\n            else {\n                for (var v in o)\n                    c[v] = o[v];\n            }\n            \n            series[axis].categories = c;\n        }\n\n        // fix ticks\n        if (!series[axis].options.ticks)\n            series[axis].options.ticks = categoriesTickGenerator;\n\n        transformPointsOnAxis(datapoints, axis, series[axis].categories);\n    }\n    \n    function transformPointsOnAxis(datapoints, axis, categories) {\n        // go through the points, transforming them\n        var points = datapoints.points,\n            ps = datapoints.pointsize,\n            format = datapoints.format,\n            formatColumn = axis.charAt(0),\n            index = getNextIndex(categories);\n\n        for (var i = 0; i < points.length; i += ps) {\n            if (points[i] == null)\n                continue;\n            \n            for (var m = 0; m < ps; ++m) {\n                var val = points[i + m];\n\n                if (val == null || !format[m][formatColumn])\n                    continue;\n\n                if (!(val in categories)) {\n                    categories[val] = index;\n                    ++index;\n                }\n                \n                points[i + m] = categories[val];\n            }\n        }\n    }\n\n    function processDatapoints(plot, series, datapoints) {\n        setupCategoriesForAxis(series, \"xaxis\", datapoints);\n        setupCategoriesForAxis(series, \"yaxis\", datapoints);\n    }\n\n    function init(plot) {\n        plot.hooks.processRawData.push(processRawData);\n        plot.hooks.processDatapoints.push(processDatapoints);\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'categories',\n        version: '1.0'\n    });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}