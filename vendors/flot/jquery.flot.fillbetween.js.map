{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/flot/build/vendors/flot/jquery.flot.fillbetween.js"],"names":[],"mappings":"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","file":"jquery.flot.fillbetween.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Flot plugin for computing bottoms for filled line and bar charts.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe case: you've got two series that you want to fill the area between. In Flot\nterms, you need to use one as the fill bottom of the other. You can specify the\nbottom of each data point as the third coordinate manually, or you can use this\nplugin to compute it for you.\n\nIn order to name the other series, you need to give it an id, like this:\n\n\tvar dataset = [\n\t\t{ data: [ ... ], id: \"foo\" } ,         // use default bottom\n\t\t{ data: [ ... ], fillBetween: \"foo\" }, // use first dataset as bottom\n\t];\n\n\t$.plot($(\"#placeholder\"), dataset, { lines: { show: true, fill: true }});\n\nAs a convenience, if the id given is a number that doesn't appear as an id in\nthe series, it is interpreted as the index in the array instead (so fillBetween:\n0 can also mean the first series).\n\nInternally, the plugin modifies the datapoints in each series. For line series,\nextra data points might be inserted through interpolation. Note that at points\nwhere the bottom line is not defined (due to a null point or start/end of line),\nthe current line will show a gap too. The algorithm comes from the\njquery.flot.stack.js plugin, possibly some code could be shared.\n\n*/\n\n(function ( $ ) {\n\n\tvar options = {\n\t\tseries: {\n\t\t\tfillBetween: null\t// or number\n\t\t}\n\t};\n\n\tfunction init( plot ) {\n\n\t\tfunction findBottomSeries( s, allseries ) {\n\n\t\t\tvar i;\n\n\t\t\tfor ( i = 0; i < allseries.length; ++i ) {\n\t\t\t\tif ( allseries[ i ].id === s.fillBetween ) {\n\t\t\t\t\treturn allseries[ i ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( typeof s.fillBetween === \"number\" ) {\n\t\t\t\tif ( s.fillBetween < 0 || s.fillBetween >= allseries.length ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn allseries[ s.fillBetween ];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction computeFillBottoms( plot, s, datapoints ) {\n\n\t\t\tif ( s.fillBetween == null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar other = findBottomSeries( s, plot.getData() );\n\n\t\t\tif ( !other ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar ps = datapoints.pointsize,\n\t\t\t\tpoints = datapoints.points,\n\t\t\t\totherps = other.datapoints.pointsize,\n\t\t\t\totherpoints = other.datapoints.points,\n\t\t\t\tnewpoints = [],\n\t\t\t\tpx, py, intery, qx, qy, bottom,\n\t\t\t\twithlines = s.lines.show,\n\t\t\t\twithbottom = ps > 2 && datapoints.format[2].y,\n\t\t\t\twithsteps = withlines && s.lines.steps,\n\t\t\t\tfromgap = true,\n\t\t\t\ti = 0,\n\t\t\t\tj = 0,\n\t\t\t\tl, m;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( i >= points.length ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tl = newpoints.length;\n\n\t\t\t\tif ( points[ i ] == null ) {\n\n\t\t\t\t\t// copy gaps\n\n\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t}\n\n\t\t\t\t\ti += ps;\n\n\t\t\t\t} else if ( j >= otherpoints.length ) {\n\n\t\t\t\t\t// for lines, we can't use the rest of the points\n\n\t\t\t\t\tif ( !withlines ) {\n\t\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ti += ps;\n\n\t\t\t\t} else if ( otherpoints[ j ] == null ) {\n\n\t\t\t\t\t// oops, got a gap\n\n\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\tnewpoints.push( null );\n\t\t\t\t\t}\n\n\t\t\t\t\tfromgap = true;\n\t\t\t\t\tj += otherps;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// cases where we actually got two points\n\n\t\t\t\t\tpx = points[ i ];\n\t\t\t\t\tpy = points[ i + 1 ];\n\t\t\t\t\tqx = otherpoints[ j ];\n\t\t\t\t\tqy = otherpoints[ j + 1 ];\n\t\t\t\t\tbottom = 0;\n\n\t\t\t\t\tif ( px === qx ) {\n\n\t\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//newpoints[ l + 1 ] += qy;\n\t\t\t\t\t\tbottom = qy;\n\n\t\t\t\t\t\ti += ps;\n\t\t\t\t\t\tj += otherps;\n\n\t\t\t\t\t} else if ( px > qx ) {\n\n\t\t\t\t\t\t// we got past point below, might need to\n\t\t\t\t\t\t// insert interpolated extra point\n\n\t\t\t\t\t\tif ( withlines && i > 0 && points[ i - ps ] != null ) {\n\t\t\t\t\t\t\tintery = py + ( points[ i - ps + 1 ] - py ) * ( qx - px ) / ( points[ i - ps ] - px );\n\t\t\t\t\t\t\tnewpoints.push( qx );\n\t\t\t\t\t\t\tnewpoints.push( intery );\n\t\t\t\t\t\t\tfor ( m = 2; m < ps; ++m ) {\n\t\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbottom = qy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tj += otherps;\n\n\t\t\t\t\t} else { // px < qx\n\n\t\t\t\t\t\t// if we come from a gap, we just skip this point\n\n\t\t\t\t\t\tif ( fromgap && withlines ) {\n\t\t\t\t\t\t\ti += ps;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// we might be able to interpolate a point below,\n\t\t\t\t\t\t// this can give us a better y\n\n\t\t\t\t\t\tif ( withlines && j > 0 && otherpoints[ j - otherps ] != null ) {\n\t\t\t\t\t\t\tbottom = qy + ( otherpoints[ j - otherps + 1 ] - qy ) * ( px - qx ) / ( otherpoints[ j - otherps ] - qx );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//newpoints[l + 1] += bottom;\n\n\t\t\t\t\t\ti += ps;\n\t\t\t\t\t}\n\n\t\t\t\t\tfromgap = false;\n\n\t\t\t\t\tif ( l !== newpoints.length && withbottom ) {\n\t\t\t\t\t\tnewpoints[ l + 2 ] = bottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// maintain the line steps invariant\n\n\t\t\t\tif ( withsteps && l !== newpoints.length && l > 0 &&\n\t\t\t\t\tnewpoints[ l ] !== null &&\n\t\t\t\t\tnewpoints[ l ] !== newpoints[ l - ps ] &&\n\t\t\t\t\tnewpoints[ l + 1 ] !== newpoints[ l - ps + 1 ] ) {\n\t\t\t\t\tfor (m = 0; m < ps; ++m) {\n\t\t\t\t\t\tnewpoints[ l + ps + m ] = newpoints[ l + m ];\n\t\t\t\t\t}\n\t\t\t\t\tnewpoints[ l + 1 ] = newpoints[ l - ps + 1 ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdatapoints.points = newpoints;\n\t\t}\n\n\t\tplot.hooks.processDatapoints.push( computeFillBottoms );\n\t}\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: \"fillbetween\",\n\t\tversion: \"1.0\"\n\t});\n\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}