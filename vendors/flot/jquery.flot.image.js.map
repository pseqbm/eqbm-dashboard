{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/flot/build/vendors/flot/jquery.flot.image.js"],"names":[],"mappings":"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","file":"jquery.flot.image.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Flot plugin for plotting images.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe data syntax is [ [ image, x1, y1, x2, y2 ], ... ] where (x1, y1) and\n(x2, y2) are where you intend the two opposite corners of the image to end up\nin the plot. Image must be a fully loaded Javascript image (you can make one\nwith new Image()). If the image is not complete, it's skipped when plotting.\n\nThere are two helpers included for retrieving images. The easiest work the way\nthat you put in URLs instead of images in the data, like this:\n\n\t[ \"myimage.png\", 0, 0, 10, 10 ]\n\nThen call $.plot.image.loadData( data, options, callback ) where data and\noptions are the same as you pass in to $.plot. This loads the images, replaces\nthe URLs in the data with the corresponding images and calls \"callback\" when\nall images are loaded (or failed loading). In the callback, you can then call\n$.plot with the data set. See the included example.\n\nA more low-level helper, $.plot.image.load(urls, callback) is also included.\nGiven a list of URLs, it calls callback with an object mapping from URL to\nImage object when all images are loaded or have failed loading.\n\nThe plugin supports these options:\n\n\tseries: {\n\t\timages: {\n\t\t\tshow: boolean\n\t\t\tanchor: \"corner\" or \"center\"\n\t\t\talpha: [ 0, 1 ]\n\t\t}\n\t}\n\nThey can be specified for a specific series:\n\n\t$.plot( $(\"#placeholder\"), [{\n\t\tdata: [ ... ],\n\t\timages: { ... }\n\t])\n\nNote that because the data format is different from usual data points, you\ncan't use images with anything else in a specific data series.\n\nSetting \"anchor\" to \"center\" causes the pixels in the image to be anchored at\nthe corner pixel centers inside of at the pixel corners, effectively letting\nhalf a pixel stick out to each side in the plot.\n\nA possible future direction could be support for tiling for large images (like\nGoogle Maps).\n\n*/\n\n(function ($) {\n    var options = {\n        series: {\n            images: {\n                show: false,\n                alpha: 1,\n                anchor: \"corner\" // or \"center\"\n            }\n        }\n    };\n\n    $.plot.image = {};\n\n    $.plot.image.loadDataImages = function (series, options, callback) {\n        var urls = [], points = [];\n\n        var defaultShow = options.series.images.show;\n        \n        $.each(series, function (i, s) {\n            if (!(defaultShow || s.images.show))\n                return;\n            \n            if (s.data)\n                s = s.data;\n\n            $.each(s, function (i, p) {\n                if (typeof p[0] == \"string\") {\n                    urls.push(p[0]);\n                    points.push(p);\n                }\n            });\n        });\n\n        $.plot.image.load(urls, function (loadedImages) {\n            $.each(points, function (i, p) {\n                var url = p[0];\n                if (loadedImages[url])\n                    p[0] = loadedImages[url];\n            });\n\n            callback();\n        });\n    }\n    \n    $.plot.image.load = function (urls, callback) {\n        var missing = urls.length, loaded = {};\n        if (missing == 0)\n            callback({});\n\n        $.each(urls, function (i, url) {\n            var handler = function () {\n                --missing;\n                \n                loaded[url] = this;\n                \n                if (missing == 0)\n                    callback(loaded);\n            };\n\n            $('<img />').load(handler).error(handler).attr('src', url);\n        });\n    };\n    \n    function drawSeries(plot, ctx, series) {\n        var plotOffset = plot.getPlotOffset();\n        \n        if (!series.images || !series.images.show)\n            return;\n        \n        var points = series.datapoints.points,\n            ps = series.datapoints.pointsize;\n        \n        for (var i = 0; i < points.length; i += ps) {\n            var img = points[i],\n                x1 = points[i + 1], y1 = points[i + 2],\n                x2 = points[i + 3], y2 = points[i + 4],\n                xaxis = series.xaxis, yaxis = series.yaxis,\n                tmp;\n\n            // actually we should check img.complete, but it\n            // appears to be a somewhat unreliable indicator in\n            // IE6 (false even after load event)\n            if (!img || img.width <= 0 || img.height <= 0)\n                continue;\n\n            if (x1 > x2) {\n                tmp = x2;\n                x2 = x1;\n                x1 = tmp;\n            }\n            if (y1 > y2) {\n                tmp = y2;\n                y2 = y1;\n                y1 = tmp;\n            }\n            \n            // if the anchor is at the center of the pixel, expand the \n            // image by 1/2 pixel in each direction\n            if (series.images.anchor == \"center\") {\n                tmp = 0.5 * (x2-x1) / (img.width - 1);\n                x1 -= tmp;\n                x2 += tmp;\n                tmp = 0.5 * (y2-y1) / (img.height - 1);\n                y1 -= tmp;\n                y2 += tmp;\n            }\n            \n            // clip\n            if (x1 == x2 || y1 == y2 ||\n                x1 >= xaxis.max || x2 <= xaxis.min ||\n                y1 >= yaxis.max || y2 <= yaxis.min)\n                continue;\n\n            var sx1 = 0, sy1 = 0, sx2 = img.width, sy2 = img.height;\n            if (x1 < xaxis.min) {\n                sx1 += (sx2 - sx1) * (xaxis.min - x1) / (x2 - x1);\n                x1 = xaxis.min;\n            }\n\n            if (x2 > xaxis.max) {\n                sx2 += (sx2 - sx1) * (xaxis.max - x2) / (x2 - x1);\n                x2 = xaxis.max;\n            }\n\n            if (y1 < yaxis.min) {\n                sy2 += (sy1 - sy2) * (yaxis.min - y1) / (y2 - y1);\n                y1 = yaxis.min;\n            }\n\n            if (y2 > yaxis.max) {\n                sy1 += (sy1 - sy2) * (yaxis.max - y2) / (y2 - y1);\n                y2 = yaxis.max;\n            }\n            \n            x1 = xaxis.p2c(x1);\n            x2 = xaxis.p2c(x2);\n            y1 = yaxis.p2c(y1);\n            y2 = yaxis.p2c(y2);\n            \n            // the transformation may have swapped us\n            if (x1 > x2) {\n                tmp = x2;\n                x2 = x1;\n                x1 = tmp;\n            }\n            if (y1 > y2) {\n                tmp = y2;\n                y2 = y1;\n                y1 = tmp;\n            }\n\n            tmp = ctx.globalAlpha;\n            ctx.globalAlpha *= series.images.alpha;\n            ctx.drawImage(img,\n                          sx1, sy1, sx2 - sx1, sy2 - sy1,\n                          x1 + plotOffset.left, y1 + plotOffset.top,\n                          x2 - x1, y2 - y1);\n            ctx.globalAlpha = tmp;\n        }\n    }\n\n    function processRawData(plot, series, data, datapoints) {\n        if (!series.images.show)\n            return;\n\n        // format is Image, x1, y1, x2, y2 (opposite corners)\n        datapoints.format = [\n            { required: true },\n            { x: true, number: true, required: true },\n            { y: true, number: true, required: true },\n            { x: true, number: true, required: true },\n            { y: true, number: true, required: true }\n        ];\n    }\n    \n    function init(plot) {\n        plot.hooks.processRawData.push(processRawData);\n        plot.hooks.drawSeries.push(drawSeries);\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'image',\n        version: '1.1'\n    });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}