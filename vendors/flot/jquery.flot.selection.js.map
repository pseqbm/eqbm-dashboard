{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/flot/build/vendors/flot/jquery.flot.selection.js"],"names":[],"mappings":"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","file":"jquery.flot.selection.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Flot plugin for selecting regions of a plot.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\nselection: {\n\tmode: null or \"x\" or \"y\" or \"xy\",\n\tcolor: color,\n\tshape: \"round\" or \"miter\" or \"bevel\",\n\tminSize: number of pixels\n}\n\nSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\nIn \"x\" mode, the user will only be able to specify the x range, similarly for\n\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\nspecified. \"color\" is color of the selection (if you need to change the color\nlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\nis the shape of the corners of the selection.\n\n\"minSize\" is the minimum size a selection can be in pixels. This value can\nbe customized to determine the smallest size a selection can be and still\nhave the selection rectangle be displayed. When customizing this value, the\nfact that it refers to pixels, not axis units must be taken into account.\nThus, for example, if there is a bar graph in time mode with BarWidth set to 1\nminute, setting \"minSize\" to 1 will not make the minimum selection size 1\nminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\n\"plotunselected\" events from being fired when the user clicks the mouse without\ndragging.\n\nWhen selection support is enabled, a \"plotselected\" event will be emitted on\nthe DOM element you passed into the plot function. The event handler gets a\nparameter with the ranges selected on the axes, like this:\n\n\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\n\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\n\t\t// similar for yaxis - with multiple axes, the extra ones are in\n\t\t// x2axis, x3axis, ...\n\t});\n\nThe \"plotselected\" event is only fired when the user has finished making the\nselection. A \"plotselecting\" event is fired during the process with the same\nparameters as the \"plotselected\" event, in case you want to know what's\nhappening while it's happening,\n\nA \"plotunselected\" event with no arguments is emitted when the user clicks the\nmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\ndestroy this behavior.\n\nThe plugin allso adds the following methods to the plot object:\n\n- setSelection( ranges, preventEvent )\n\n  Set the selection rectangle. The passed in ranges is on the same form as\n  returned in the \"plotselected\" event. If the selection mode is \"x\", you\n  should put in either an xaxis range, if the mode is \"y\" you need to put in\n  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\n  this:\n\n\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\n\n  setSelection will trigger the \"plotselected\" event when called. If you don't\n  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\n  true as the second parameter. If you are using multiple axes, you can\n  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\n  xaxis, the plugin picks the first one it sees.\n\n- clearSelection( preventEvent )\n\n  Clear the selection rectangle. Pass in true to avoid getting a\n  \"plotunselected\" event.\n\n- getSelection()\n\n  Returns the current selection in the same format as the \"plotselected\"\n  event. If there's currently no selection, the function returns null.\n\n*/\n\n(function ($) {\n    function init(plot) {\n        var selection = {\n                first: { x: -1, y: -1}, second: { x: -1, y: -1},\n                show: false,\n                active: false\n            };\n\n        // FIXME: The drag handling implemented here should be\n        // abstracted out, there's some similar code from a library in\n        // the navigation plugin, this should be massaged a bit to fit\n        // the Flot cases here better and reused. Doing this would\n        // make this plugin much slimmer.\n        var savedhandlers = {};\n\n        var mouseUpHandler = null;\n        \n        function onMouseMove(e) {\n            if (selection.active) {\n                updateSelection(e);\n                \n                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\n            }\n        }\n\n        function onMouseDown(e) {\n            if (e.which != 1)  // only accept left-click\n                return;\n            \n            // cancel out any text selections\n            document.body.focus();\n\n            // prevent text selection and drag in old-school browsers\n            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\n                savedhandlers.onselectstart = document.onselectstart;\n                document.onselectstart = function () { return false; };\n            }\n            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\n                savedhandlers.ondrag = document.ondrag;\n                document.ondrag = function () { return false; };\n            }\n\n            setSelectionPos(selection.first, e);\n\n            selection.active = true;\n\n            // this is a bit silly, but we have to use a closure to be\n            // able to whack the same handler again\n            mouseUpHandler = function (e) { onMouseUp(e); };\n            \n            $(document).one(\"mouseup\", mouseUpHandler);\n        }\n\n        function onMouseUp(e) {\n            mouseUpHandler = null;\n            \n            // revert drag stuff for old-school browsers\n            if (document.onselectstart !== undefined)\n                document.onselectstart = savedhandlers.onselectstart;\n            if (document.ondrag !== undefined)\n                document.ondrag = savedhandlers.ondrag;\n\n            // no more dragging\n            selection.active = false;\n            updateSelection(e);\n\n            if (selectionIsSane())\n                triggerSelectedEvent();\n            else {\n                // this counts as a clear\n                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\n            }\n\n            return false;\n        }\n\n        function getSelection() {\n            if (!selectionIsSane())\n                return null;\n            \n            if (!selection.show) return null;\n\n            var r = {}, c1 = selection.first, c2 = selection.second;\n            $.each(plot.getAxes(), function (name, axis) {\n                if (axis.used) {\n                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]); \n                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\n                }\n            });\n            return r;\n        }\n\n        function triggerSelectedEvent() {\n            var r = getSelection();\n\n            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\n\n            // backwards-compat stuff, to be removed in future\n            if (r.xaxis && r.yaxis)\n                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\n        }\n\n        function clamp(min, value, max) {\n            return value < min ? min: (value > max ? max: value);\n        }\n\n        function setSelectionPos(pos, e) {\n            var o = plot.getOptions();\n            var offset = plot.getPlaceholder().offset();\n            var plotOffset = plot.getPlotOffset();\n            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\n            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\n\n            if (o.selection.mode == \"y\")\n                pos.x = pos == selection.first ? 0 : plot.width();\n\n            if (o.selection.mode == \"x\")\n                pos.y = pos == selection.first ? 0 : plot.height();\n        }\n\n        function updateSelection(pos) {\n            if (pos.pageX == null)\n                return;\n\n            setSelectionPos(selection.second, pos);\n            if (selectionIsSane()) {\n                selection.show = true;\n                plot.triggerRedrawOverlay();\n            }\n            else\n                clearSelection(true);\n        }\n\n        function clearSelection(preventEvent) {\n            if (selection.show) {\n                selection.show = false;\n                plot.triggerRedrawOverlay();\n                if (!preventEvent)\n                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n            }\n        }\n\n        // function taken from markings support in Flot\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = plot.getAxes();\n\n            for (var k in axes) {\n                axis = axes[k];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n            \n            return { from: from, to: to, axis: axis };\n        }\n        \n        function setSelection(ranges, preventEvent) {\n            var axis, range, o = plot.getOptions();\n\n            if (o.selection.mode == \"y\") {\n                selection.first.x = 0;\n                selection.second.x = plot.width();\n            }\n            else {\n                range = extractRange(ranges, \"x\");\n\n                selection.first.x = range.axis.p2c(range.from);\n                selection.second.x = range.axis.p2c(range.to);\n            }\n\n            if (o.selection.mode == \"x\") {\n                selection.first.y = 0;\n                selection.second.y = plot.height();\n            }\n            else {\n                range = extractRange(ranges, \"y\");\n\n                selection.first.y = range.axis.p2c(range.from);\n                selection.second.y = range.axis.p2c(range.to);\n            }\n\n            selection.show = true;\n            plot.triggerRedrawOverlay();\n            if (!preventEvent && selectionIsSane())\n                triggerSelectedEvent();\n        }\n\n        function selectionIsSane() {\n            var minSize = plot.getOptions().selection.minSize;\n            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\n                Math.abs(selection.second.y - selection.first.y) >= minSize;\n        }\n\n        plot.clearSelection = clearSelection;\n        plot.setSelection = setSelection;\n        plot.getSelection = getSelection;\n\n        plot.hooks.bindEvents.push(function(plot, eventHolder) {\n            var o = plot.getOptions();\n            if (o.selection.mode != null) {\n                eventHolder.mousemove(onMouseMove);\n                eventHolder.mousedown(onMouseDown);\n            }\n        });\n\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            // draw selection\n            if (selection.show && selectionIsSane()) {\n                var plotOffset = plot.getPlotOffset();\n                var o = plot.getOptions();\n\n                ctx.save();\n                ctx.translate(plotOffset.left, plotOffset.top);\n\n                var c = $.color.parse(o.selection.color);\n\n                ctx.strokeStyle = c.scale('a', 0.8).toString();\n                ctx.lineWidth = 1;\n                ctx.lineJoin = o.selection.shape;\n                ctx.fillStyle = c.scale('a', 0.4).toString();\n\n                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\n                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\n                    w = Math.abs(selection.second.x - selection.first.x) - 1,\n                    h = Math.abs(selection.second.y - selection.first.y) - 1;\n\n                ctx.fillRect(x, y, w, h);\n                ctx.strokeRect(x, y, w, h);\n\n                ctx.restore();\n            }\n        });\n        \n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mousedown\", onMouseDown);\n            \n            if (mouseUpHandler)\n                $(document).unbind(\"mouseup\", mouseUpHandler);\n        });\n\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: {\n            selection: {\n                mode: null, // one of null, \"x\", \"y\" or \"xy\"\n                color: \"#e8cfac\",\n                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\n                minSize: 5 // minimum number of pixels\n            }\n        },\n        name: 'selection',\n        version: '1.1'\n    });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}