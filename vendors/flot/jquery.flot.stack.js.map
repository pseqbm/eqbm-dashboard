{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/flot/build/vendors/flot/jquery.flot.stack.js"],"names":[],"mappings":"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","file":"jquery.flot.stack.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Flot plugin for stacking data sets rather than overlyaing them.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes the data is sorted on x (or y if stacking horizontally).\nFor line charts, it is assumed that if a line has an undefined gap (from a\nnull point), then the line above it should have the same gap - insert zeros\ninstead of \"null\" if you want another behaviour. This also holds for the start\nand end of the chart. Note that stacking a mix of positive and negative values\nin most instances doesn't make sense (so it looks weird).\n\nTwo or more series are stacked when their \"stack\" attribute is set to the same\nkey (which can be any number or string or just \"true\"). To specify the default\nstack, you can set the stack option like this:\n\n\tseries: {\n\t\tstack: null/false, true, or a key (number/string)\n\t}\n\nYou can also specify it for a single series, like this:\n\n\t$.plot( $(\"#placeholder\"), [{\n\t\tdata: [ ... ],\n\t\tstack: true\n\t}])\n\nThe stacking order is determined by the order of the data series in the array\n(later series end up on top of the previous).\n\nInternally, the plugin modifies the datapoints in each series, adding an\noffset to the y value. For line series, extra data points are inserted through\ninterpolation. If there's a second y value, it's also adjusted (e.g for bar\ncharts or filled areas).\n\n*/\n\n(function ($) {\n    var options = {\n        series: { stack: null } // or number/string\n    };\n    \n    function init(plot) {\n        function findMatchingSeries(s, allseries) {\n            var res = null;\n            for (var i = 0; i < allseries.length; ++i) {\n                if (s == allseries[i])\n                    break;\n                \n                if (allseries[i].stack == s.stack)\n                    res = allseries[i];\n            }\n            \n            return res;\n        }\n        \n        function stackData(plot, s, datapoints) {\n            if (s.stack == null || s.stack === false)\n                return;\n\n            var other = findMatchingSeries(s, plot.getData());\n            if (!other)\n                return;\n\n            var ps = datapoints.pointsize,\n                points = datapoints.points,\n                otherps = other.datapoints.pointsize,\n                otherpoints = other.datapoints.points,\n                newpoints = [],\n                px, py, intery, qx, qy, bottom,\n                withlines = s.lines.show,\n                horizontal = s.bars.horizontal,\n                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),\n                withsteps = withlines && s.lines.steps,\n                fromgap = true,\n                keyOffset = horizontal ? 1 : 0,\n                accumulateOffset = horizontal ? 0 : 1,\n                i = 0, j = 0, l, m;\n\n            while (true) {\n                if (i >= points.length)\n                    break;\n\n                l = newpoints.length;\n\n                if (points[i] == null) {\n                    // copy gaps\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (j >= otherpoints.length) {\n                    // for lines, we can't use the rest of the points\n                    if (!withlines) {\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n                    }\n                    i += ps;\n                }\n                else if (otherpoints[j] == null) {\n                    // oops, got a gap\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(null);\n                    fromgap = true;\n                    j += otherps;\n                }\n                else {\n                    // cases where we actually got two points\n                    px = points[i + keyOffset];\n                    py = points[i + accumulateOffset];\n                    qx = otherpoints[j + keyOffset];\n                    qy = otherpoints[j + accumulateOffset];\n                    bottom = 0;\n\n                    if (px == qx) {\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        newpoints[l + accumulateOffset] += qy;\n                        bottom = qy;\n                        \n                        i += ps;\n                        j += otherps;\n                    }\n                    else if (px > qx) {\n                        // we got past point below, might need to\n                        // insert interpolated extra point\n                        if (withlines && i > 0 && points[i - ps] != null) {\n                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);\n                            newpoints.push(qx);\n                            newpoints.push(intery + qy);\n                            for (m = 2; m < ps; ++m)\n                                newpoints.push(points[i + m]);\n                            bottom = qy; \n                        }\n\n                        j += otherps;\n                    }\n                    else { // px < qx\n                        if (fromgap && withlines) {\n                            // if we come from a gap, we just skip this point\n                            i += ps;\n                            continue;\n                        }\n                            \n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n                        \n                        // we might be able to interpolate a point below,\n                        // this can give us a better y\n                        if (withlines && j > 0 && otherpoints[j - otherps] != null)\n                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);\n\n                        newpoints[l + accumulateOffset] += bottom;\n                        \n                        i += ps;\n                    }\n\n                    fromgap = false;\n                    \n                    if (l != newpoints.length && withbottom)\n                        newpoints[l + 2] += bottom;\n                }\n\n                // maintain the line steps invariant\n                if (withsteps && l != newpoints.length && l > 0\n                    && newpoints[l] != null\n                    && newpoints[l] != newpoints[l - ps]\n                    && newpoints[l + 1] != newpoints[l - ps + 1]) {\n                    for (m = 0; m < ps; ++m)\n                        newpoints[l + ps + m] = newpoints[l + m];\n                    newpoints[l + 1] = newpoints[l - ps + 1];\n                }\n            }\n\n            datapoints.points = newpoints;\n        }\n        \n        plot.hooks.processDatapoints.push(stackData);\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stack',\n        version: '1.2'\n    });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}