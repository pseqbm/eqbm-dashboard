{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/isotope/build/vendors/isotope/isotope.js"],"names":[],"mappings":"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","file":"isotope.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * Isotope PACKAGED v3.0.4\n *\n * Licensed GPLv3 for open source use\n * or Isotope Commercial License for commercial use\n *\n * http://isotope.metafizzy.co\n * Copyright 2017 Metafizzy\n */\n\n/**\n * Bridget makes jQuery widgets\n * v2.0.1\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  // browser global\n  window.jQueryBridget = factory(\n    window,\n    window.jQuery\n  );\n}( window, function factory( window, jQuery ) {\n'use strict';\n\n// ----- utils ----- //\n\nvar arraySlice = Array.prototype.slice;\n\n// helper function for logging errors\n// $.error breaks jQuery chaining\nvar console = window.console;\nvar logError = typeof console == 'undefined' ? function() {} :\n  function( message ) {\n    console.error( message );\n  };\n\n// ----- jQueryBridget ----- //\n\nfunction jQueryBridget( namespace, PluginClass, $ ) {\n  $ = $ || jQuery || window.jQuery;\n  if ( !$ ) {\n    return;\n  }\n\n  // add option method -> $().plugin('option', {...})\n  if ( !PluginClass.prototype.option ) {\n    // option setter\n    PluginClass.prototype.option = function( opts ) {\n      // bail out if not an object\n      if ( !$.isPlainObject( opts ) ){\n        return;\n      }\n      this.options = $.extend( true, this.options, opts );\n    };\n  }\n\n  // make jQuery plugin\n  $.fn[ namespace ] = function( arg0 /*, arg1 */ ) {\n    if ( typeof arg0 == 'string' ) {\n      // method call $().plugin( 'methodName', { options } )\n      // shift arguments by 1\n      var args = arraySlice.call( arguments, 1 );\n      return methodCall( this, arg0, args );\n    }\n    // just $().plugin({ options })\n    plainCall( this, arg0 );\n    return this;\n  };\n\n  // $().plugin('methodName')\n  function methodCall( $elems, methodName, args ) {\n    var returnValue;\n    var pluginMethodStr = '$().' + namespace + '(\"' + methodName + '\")';\n\n    $elems.each( function( i, elem ) {\n      // get instance\n      var instance = $.data( elem, namespace );\n      if ( !instance ) {\n        logError( namespace + ' not initialized. Cannot call methods, i.e. ' +\n          pluginMethodStr );\n        return;\n      }\n\n      var method = instance[ methodName ];\n      if ( !method || methodName.charAt(0) == '_' ) {\n        logError( pluginMethodStr + ' is not a valid method' );\n        return;\n      }\n\n      // apply method, get return value\n      var value = method.apply( instance, args );\n      // set return value if value is returned, use only first value\n      returnValue = returnValue === undefined ? value : returnValue;\n    });\n\n    return returnValue !== undefined ? returnValue : $elems;\n  }\n\n  function plainCall( $elems, options ) {\n    $elems.each( function( i, elem ) {\n      var instance = $.data( elem, namespace );\n      if ( instance ) {\n        // set options & init\n        instance.option( options );\n        instance._init();\n      } else {\n        // initialize new instance\n        instance = new PluginClass( elem, options );\n        $.data( elem, namespace, instance );\n      }\n    });\n  }\n\n  updateJQuery( $ );\n\n}\n\n// ----- updateJQuery ----- //\n\n// set $.bridget for v1 backwards compatibility\nfunction updateJQuery( $ ) {\n  if ( !$ || ( $ && $.bridget ) ) {\n    return;\n  }\n  $.bridget = jQueryBridget;\n}\n\nupdateJQuery( jQuery || window.jQuery );\n\n// -----  ----- //\n\nreturn jQueryBridget;\n\n}));\n\n/**\n * EvEmitter v1.0.3\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( window, factory ) {\n  // Browser globals\n  window.EvEmitter = factory();\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var i = 0;\n  var listener = listeners[i];\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  while ( listener ) {\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n    // get next listener\n    i += isOnce ? 0 : 1;\n    listener = listeners[i];\n  }\n\n  return this;\n};\n\nreturn EvEmitter;\n\n}));\n\n/*!\n * getSize v2.0.2\n * measure size of elements\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n/*global define: false, module: false, console: false */\n\n( function( window, factory ) {\n  'use strict';\n\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( 'get-size/get-size',[],function() {\n      return factory();\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n\n})( window, function factory() {\n'use strict';\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  var num = parseFloat( value );\n  // not a percent like '100%', and a number\n  var isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\nfunction noop() {}\n\nvar logError = typeof console == 'undefined' ? noop :\n  function( message ) {\n    console.error( message );\n  };\n\n// -------------------------- measurements -------------------------- //\n\nvar measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth'\n];\n\nvar measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  var size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0\n  };\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    size[ measurement ] = 0;\n  }\n  return size;\n}\n\n// -------------------------- getStyle -------------------------- //\n\n/**\n * getStyle, get style of element, check for Firefox bug\n * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction getStyle( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    logError( 'Style returned ' + style +\n      '. Are you running this code in a hidden iframe on Firefox? ' +\n      'See http://bit.ly/getsizebug1' );\n  }\n  return style;\n}\n\n// -------------------------- setup -------------------------- //\n\nvar isSetup = false;\n\nvar isBoxSizeOuter;\n\n/**\n * setup\n * check isBoxSizerOuter\n * do on first getSize() rather than on page load for Firefox bug\n */\nfunction setup() {\n  // setup once\n  if ( isSetup ) {\n    return;\n  }\n  isSetup = true;\n\n  // -------------------------- box sizing -------------------------- //\n\n  /**\n   * WebKit measures the outer-width on style.width on border-box elems\n   * IE & Firefox<29 measures the inner-width\n   */\n  var div = document.createElement('div');\n  div.style.width = '200px';\n  div.style.padding = '1px 2px 3px 4px';\n  div.style.borderStyle = 'solid';\n  div.style.borderWidth = '1px 2px 3px 4px';\n  div.style.boxSizing = 'border-box';\n\n  var body = document.body || document.documentElement;\n  body.appendChild( div );\n  var style = getStyle( div );\n\n  getSize.isBoxSizeOuter = isBoxSizeOuter = getStyleSize( style.width ) == 200;\n  body.removeChild( div );\n\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  setup();\n\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n\n  // do not proceed on non-objects\n  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {\n    return;\n  }\n\n  var style = getStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) {\n    return getZeroSize();\n  }\n\n  var size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    var value = style[ measurement ];\n    var num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  }\n\n  var paddingWidth = size.paddingLeft + size.paddingRight;\n  var paddingHeight = size.paddingTop + size.paddingBottom;\n  var marginWidth = size.marginLeft + size.marginRight;\n  var marginHeight = size.marginTop + size.marginBottom;\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n  // overwrite width and height if we can get it from style\n  var styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );\n  }\n\n  var styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n});\n\n/**\n * matchesSelector v2.0.2\n * matchesSelector( element, '.selector' )\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( 'desandro-matches-selector/matches-selector',factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n\n}( window, function factory() {\n  'use strict';\n\n  var matchesMethod = ( function() {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if ( ElemProto.matches ) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if ( ElemProto.matchesSelector ) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];\n\n    for ( var i=0; i < prefixes.length; i++ ) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if ( ElemProto[ method ] ) {\n        return method;\n      }\n    }\n  })();\n\n  return function matchesSelector( elem, selector ) {\n    return elem[ matchesMethod ]( selector );\n  };\n\n}));\n\n/**\n * Fizzy UI utils v2.0.5\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // browser global\n  window.fizzyUIUtils = factory(\n    window,\n    window.matchesSelector\n  );\n}( window, function factory( window, matchesSelector ) {\n\n\n\nvar utils = {};\n\n// ----- extend ----- //\n\n// extends objects\nutils.extend = function( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n};\n\n// ----- modulo ----- //\n\nutils.modulo = function( num, div ) {\n  return ( ( num % div ) + div ) % div;\n};\n\n// ----- makeArray ----- //\n\n// turn element or nodeList into an array\nutils.makeArray = function( obj ) {\n  var ary = [];\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    ary = obj;\n  } else if ( obj && typeof obj == 'object' &&\n    typeof obj.length == 'number' ) {\n    // convert nodeList to array\n    for ( var i=0; i < obj.length; i++ ) {\n      ary.push( obj[i] );\n    }\n  } else {\n    // array of single index\n    ary.push( obj );\n  }\n  return ary;\n};\n\n// ----- removeFrom ----- //\n\nutils.removeFrom = function( ary, obj ) {\n  var index = ary.indexOf( obj );\n  if ( index != -1 ) {\n    ary.splice( index, 1 );\n  }\n};\n\n// ----- getParent ----- //\n\nutils.getParent = function( elem, selector ) {\n  while ( elem.parentNode && elem != document.body ) {\n    elem = elem.parentNode;\n    if ( matchesSelector( elem, selector ) ) {\n      return elem;\n    }\n  }\n};\n\n// ----- getQueryElement ----- //\n\n// use element as selector string\nutils.getQueryElement = function( elem ) {\n  if ( typeof elem == 'string' ) {\n    return document.querySelector( elem );\n  }\n  return elem;\n};\n\n// ----- handleEvent ----- //\n\n// enable .ontype to trigger from .addEventListener( elem, 'type' )\nutils.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// ----- filterFindElements ----- //\n\nutils.filterFindElements = function( elems, selector ) {\n  // make array of elems\n  elems = utils.makeArray( elems );\n  var ffElems = [];\n\n  elems.forEach( function( elem ) {\n    // check that elem is an actual element\n    if ( !( elem instanceof HTMLElement ) ) {\n      return;\n    }\n    // add elem if no selector\n    if ( !selector ) {\n      ffElems.push( elem );\n      return;\n    }\n    // filter & find items if we have a selector\n    // filter\n    if ( matchesSelector( elem, selector ) ) {\n      ffElems.push( elem );\n    }\n    // find children\n    var childElems = elem.querySelectorAll( selector );\n    // concat childElems to filterFound array\n    for ( var i=0; i < childElems.length; i++ ) {\n      ffElems.push( childElems[i] );\n    }\n  });\n\n  return ffElems;\n};\n\n// ----- debounceMethod ----- //\n\nutils.debounceMethod = function( _class, methodName, threshold ) {\n  // original method\n  var method = _class.prototype[ methodName ];\n  var timeoutName = methodName + 'Timeout';\n\n  _class.prototype[ methodName ] = function() {\n    var timeout = this[ timeoutName ];\n    if ( timeout ) {\n      clearTimeout( timeout );\n    }\n    var args = arguments;\n\n    var _this = this;\n    this[ timeoutName ] = setTimeout( function() {\n      method.apply( _this, args );\n      delete _this[ timeoutName ];\n    }, threshold || 100 );\n  };\n};\n\n// ----- docReady ----- //\n\nutils.docReady = function( callback ) {\n  var readyState = document.readyState;\n  if ( readyState == 'complete' || readyState == 'interactive' ) {\n    // do async to allow for other scripts to run. metafizzy/flickity#441\n    setTimeout( callback );\n  } else {\n    document.addEventListener( 'DOMContentLoaded', callback );\n  }\n};\n\n// ----- htmlInit ----- //\n\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nutils.toDashed = function( str ) {\n  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {\n    return $1 + '-' + $2;\n  }).toLowerCase();\n};\n\nvar console = window.console;\n/**\n * allow user to initialize classes via [data-namespace] or .js-namespace class\n * htmlInit( Widget, 'widgetName' )\n * options are parsed from data-namespace-options\n */\nutils.htmlInit = function( WidgetClass, namespace ) {\n  utils.docReady( function() {\n    var dashedNamespace = utils.toDashed( namespace );\n    var dataAttr = 'data-' + dashedNamespace;\n    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );\n    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );\n    var elems = utils.makeArray( dataAttrElems )\n      .concat( utils.makeArray( jsDashElems ) );\n    var dataOptionsAttr = dataAttr + '-options';\n    var jQuery = window.jQuery;\n\n    elems.forEach( function( elem ) {\n      var attr = elem.getAttribute( dataAttr ) ||\n        elem.getAttribute( dataOptionsAttr );\n      var options;\n      try {\n        options = attr && JSON.parse( attr );\n      } catch ( error ) {\n        // log error, do not initialize\n        if ( console ) {\n          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +\n          ': ' + error );\n        }\n        return;\n      }\n      // initialize\n      var instance = new WidgetClass( elem, options );\n      // make available via $().data('namespace')\n      if ( jQuery ) {\n        jQuery.data( elem, namespace, instance );\n      }\n    });\n\n  });\n};\n\n// -----  ----- //\n\nreturn utils;\n\n}));\n\n/**\n * Outlayer Item\n */\n\n( function( window, factory ) {\n  // browser global\n  window.Outlayer = {};\n  window.Outlayer.Item = factory(\n    window.EvEmitter,\n    window.getSize\n  );\n}( window, function factory( EvEmitter, getSize ) {\n'use strict';\n\n// ----- helpers ----- //\n\nfunction isEmptyObj( obj ) {\n  for ( var prop in obj ) {\n    return false;\n  }\n  prop = null;\n  return true;\n}\n\n// -------------------------- CSS3 support -------------------------- //\n\n\nvar docElemStyle = document.documentElement.style;\n\nvar transitionProperty = typeof docElemStyle.transition == 'string' ?\n  'transition' : 'WebkitTransition';\nvar transformProperty = typeof docElemStyle.transform == 'string' ?\n  'transform' : 'WebkitTransform';\n\nvar transitionEndEvent = {\n  WebkitTransition: 'webkitTransitionEnd',\n  transition: 'transitionend'\n}[ transitionProperty ];\n\n// cache all vendor properties that could have vendor prefix\nvar vendorProperties = {\n  transform: transformProperty,\n  transition: transitionProperty,\n  transitionDuration: transitionProperty + 'Duration',\n  transitionProperty: transitionProperty + 'Property',\n  transitionDelay: transitionProperty + 'Delay'\n};\n\n// -------------------------- Item -------------------------- //\n\nfunction Item( element, layout ) {\n  if ( !element ) {\n    return;\n  }\n\n  this.element = element;\n  // parent layout class, i.e. Masonry, Isotope, or Packery\n  this.layout = layout;\n  this.position = {\n    x: 0,\n    y: 0\n  };\n\n  this._create();\n}\n\n// inherit EvEmitter\nvar proto = Item.prototype = Object.create( EvEmitter.prototype );\nproto.constructor = Item;\n\nproto._create = function() {\n  // transition objects\n  this._transn = {\n    ingProperties: {},\n    clean: {},\n    onEnd: {}\n  };\n\n  this.css({\n    position: 'absolute'\n  });\n};\n\n// trigger specified handler for event type\nproto.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * apply CSS styles to element\n * @param {Object} style\n */\nproto.css = function( style ) {\n  var elemStyle = this.element.style;\n\n  for ( var prop in style ) {\n    // use vendor property if available\n    var supportedProp = vendorProperties[ prop ] || prop;\n    elemStyle[ supportedProp ] = style[ prop ];\n  }\n};\n\n // measure position, and sets it\nproto.getPosition = function() {\n  var style = getComputedStyle( this.element );\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  var xValue = style[ isOriginLeft ? 'left' : 'right' ];\n  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];\n  // convert percent to pixels\n  var layoutSize = this.layout.size;\n  var x = xValue.indexOf('%') != -1 ?\n    ( parseFloat( xValue ) / 100 ) * layoutSize.width : parseInt( xValue, 10 );\n  var y = yValue.indexOf('%') != -1 ?\n    ( parseFloat( yValue ) / 100 ) * layoutSize.height : parseInt( yValue, 10 );\n\n  // clean up 'auto' or other non-integer values\n  x = isNaN( x ) ? 0 : x;\n  y = isNaN( y ) ? 0 : y;\n  // remove padding from measurement\n  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n\n  this.position.x = x;\n  this.position.y = y;\n};\n\n// set settled position, apply padding\nproto.layoutPosition = function() {\n  var layoutSize = this.layout.size;\n  var style = {};\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n\n  // x\n  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n  var xProperty = isOriginLeft ? 'left' : 'right';\n  var xResetProperty = isOriginLeft ? 'right' : 'left';\n\n  var x = this.position.x + layoutSize[ xPadding ];\n  // set in percentage or pixels\n  style[ xProperty ] = this.getXValue( x );\n  // reset other property\n  style[ xResetProperty ] = '';\n\n  // y\n  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n  var yProperty = isOriginTop ? 'top' : 'bottom';\n  var yResetProperty = isOriginTop ? 'bottom' : 'top';\n\n  var y = this.position.y + layoutSize[ yPadding ];\n  // set in percentage or pixels\n  style[ yProperty ] = this.getYValue( y );\n  // reset other property\n  style[ yResetProperty ] = '';\n\n  this.css( style );\n  this.emitEvent( 'layout', [ this ] );\n};\n\nproto.getXValue = function( x ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && !isHorizontal ?\n    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';\n};\n\nproto.getYValue = function( y ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && isHorizontal ?\n    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';\n};\n\nproto._transitionTo = function( x, y ) {\n  this.getPosition();\n  // get current x & y from top/left\n  var curX = this.position.x;\n  var curY = this.position.y;\n\n  var compareX = parseInt( x, 10 );\n  var compareY = parseInt( y, 10 );\n  var didNotMove = compareX === this.position.x && compareY === this.position.y;\n\n  // save end position\n  this.setPosition( x, y );\n\n  // if did not move and not transitioning, just go to layout\n  if ( didNotMove && !this.isTransitioning ) {\n    this.layoutPosition();\n    return;\n  }\n\n  var transX = x - curX;\n  var transY = y - curY;\n  var transitionStyle = {};\n  transitionStyle.transform = this.getTranslate( transX, transY );\n\n  this.transition({\n    to: transitionStyle,\n    onTransitionEnd: {\n      transform: this.layoutPosition\n    },\n    isCleaning: true\n  });\n};\n\nproto.getTranslate = function( x, y ) {\n  // flip cooridinates if origin on right or bottom\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  x = isOriginLeft ? x : -x;\n  y = isOriginTop ? y : -y;\n  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n};\n\n// non transition + transform support\nproto.goTo = function( x, y ) {\n  this.setPosition( x, y );\n  this.layoutPosition();\n};\n\nproto.moveTo = proto._transitionTo;\n\nproto.setPosition = function( x, y ) {\n  this.position.x = parseInt( x, 10 );\n  this.position.y = parseInt( y, 10 );\n};\n\n// ----- transition ----- //\n\n/**\n * @param {Object} style - CSS\n * @param {Function} onTransitionEnd\n */\n\n// non transition, just trigger callback\nproto._nonTransition = function( args ) {\n  this.css( args.to );\n  if ( args.isCleaning ) {\n    this._removeStyles( args.to );\n  }\n  for ( var prop in args.onTransitionEnd ) {\n    args.onTransitionEnd[ prop ].call( this );\n  }\n};\n\n/**\n * proper transition\n * @param {Object} args - arguments\n *   @param {Object} to - style to transition to\n *   @param {Object} from - style to start transition from\n *   @param {Boolean} isCleaning - removes transition styles after transition\n *   @param {Function} onTransitionEnd - callback\n */\nproto.transition = function( args ) {\n  // redirect to nonTransition if no transition duration\n  if ( !parseFloat( this.layout.options.transitionDuration ) ) {\n    this._nonTransition( args );\n    return;\n  }\n\n  var _transition = this._transn;\n  // keep track of onTransitionEnd callback by css property\n  for ( var prop in args.onTransitionEnd ) {\n    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];\n  }\n  // keep track of properties that are transitioning\n  for ( prop in args.to ) {\n    _transition.ingProperties[ prop ] = true;\n    // keep track of properties to clean up when transition is done\n    if ( args.isCleaning ) {\n      _transition.clean[ prop ] = true;\n    }\n  }\n\n  // set from styles\n  if ( args.from ) {\n    this.css( args.from );\n    // force redraw. http://blog.alexmaccaw.com/css-transitions\n    var h = this.element.offsetHeight;\n    // hack for JSHint to hush about unused var\n    h = null;\n  }\n  // enable transition\n  this.enableTransition( args.to );\n  // set styles that are transitioning\n  this.css( args.to );\n\n  this.isTransitioning = true;\n\n};\n\n// dash before all cap letters, including first for\n// WebkitTransform => -webkit-transform\nfunction toDashedAll( str ) {\n  return str.replace( /([A-Z])/g, function( $1 ) {\n    return '-' + $1.toLowerCase();\n  });\n}\n\nvar transitionProps = 'opacity,' + toDashedAll( transformProperty );\n\nproto.enableTransition = function(/* style */) {\n  // HACK changing transitionProperty during a transition\n  // will cause transition to jump\n  if ( this.isTransitioning ) {\n    return;\n  }\n\n  // make `transition: foo, bar, baz` from style object\n  // HACK un-comment this when enableTransition can work\n  // while a transition is happening\n  // var transitionValues = [];\n  // for ( var prop in style ) {\n  //   // dash-ify camelCased properties like WebkitTransition\n  //   prop = vendorProperties[ prop ] || prop;\n  //   transitionValues.push( toDashedAll( prop ) );\n  // }\n  // munge number to millisecond, to match stagger\n  var duration = this.layout.options.transitionDuration;\n  duration = typeof duration == 'number' ? duration + 'ms' : duration;\n  // enable transition styles\n  this.css({\n    transitionProperty: transitionProps,\n    transitionDuration: duration,\n    transitionDelay: this.staggerDelay || 0\n  });\n  // listen for transition end event\n  this.element.addEventListener( transitionEndEvent, this, false );\n};\n\n// ----- events ----- //\n\nproto.onwebkitTransitionEnd = function( event ) {\n  this.ontransitionend( event );\n};\n\nproto.onotransitionend = function( event ) {\n  this.ontransitionend( event );\n};\n\n// properties that I munge to make my life easier\nvar dashedVendorProperties = {\n  '-webkit-transform': 'transform'\n};\n\nproto.ontransitionend = function( event ) {\n  // disregard bubbled events from children\n  if ( event.target !== this.element ) {\n    return;\n  }\n  var _transition = this._transn;\n  // get property name of transitioned property, convert to prefix-free\n  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;\n\n  // remove property that has completed transitioning\n  delete _transition.ingProperties[ propertyName ];\n  // check if any properties are still transitioning\n  if ( isEmptyObj( _transition.ingProperties ) ) {\n    // all properties have completed transitioning\n    this.disableTransition();\n  }\n  // clean style\n  if ( propertyName in _transition.clean ) {\n    // clean up style\n    this.element.style[ event.propertyName ] = '';\n    delete _transition.clean[ propertyName ];\n  }\n  // trigger onTransitionEnd callback\n  if ( propertyName in _transition.onEnd ) {\n    var onTransitionEnd = _transition.onEnd[ propertyName ];\n    onTransitionEnd.call( this );\n    delete _transition.onEnd[ propertyName ];\n  }\n\n  this.emitEvent( 'transitionEnd', [ this ] );\n};\n\nproto.disableTransition = function() {\n  this.removeTransitionStyles();\n  this.element.removeEventListener( transitionEndEvent, this, false );\n  this.isTransitioning = false;\n};\n\n/**\n * removes style property from element\n * @param {Object} style\n**/\nproto._removeStyles = function( style ) {\n  // clean up transition styles\n  var cleanStyle = {};\n  for ( var prop in style ) {\n    cleanStyle[ prop ] = '';\n  }\n  this.css( cleanStyle );\n};\n\nvar cleanTransitionStyle = {\n  transitionProperty: '',\n  transitionDuration: '',\n  transitionDelay: ''\n};\n\nproto.removeTransitionStyles = function() {\n  // remove transition\n  this.css( cleanTransitionStyle );\n};\n\n// ----- stagger ----- //\n\nproto.stagger = function( delay ) {\n  delay = isNaN( delay ) ? 0 : delay;\n  this.staggerDelay = delay + 'ms';\n};\n\n// ----- show/hide/remove ----- //\n\n// remove element from DOM\nproto.removeElem = function() {\n  this.element.parentNode.removeChild( this.element );\n  // remove display: none\n  this.css({ display: '' });\n  this.emitEvent( 'remove', [ this ] );\n};\n\nproto.remove = function() {\n  // just remove element if no transition support or no transition\n  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {\n    this.removeElem();\n    return;\n  }\n\n  // start transition\n  this.once( 'transitionEnd', function() {\n    this.removeElem();\n  });\n  this.hide();\n};\n\nproto.reveal = function() {\n  delete this.isHidden;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;\n\n  this.transition({\n    from: options.hiddenStyle,\n    to: options.visibleStyle,\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onRevealTransitionEnd = function() {\n  // check if still visible\n  // during transition, item may have been hidden\n  if ( !this.isHidden ) {\n    this.emitEvent('reveal');\n  }\n};\n\n/**\n * get style property use for hide/reveal transition end\n * @param {String} styleProperty - hiddenStyle/visibleStyle\n * @returns {String}\n */\nproto.getHideRevealTransitionEndProperty = function( styleProperty ) {\n  var optionStyle = this.layout.options[ styleProperty ];\n  // use opacity\n  if ( optionStyle.opacity ) {\n    return 'opacity';\n  }\n  // get first property\n  for ( var prop in optionStyle ) {\n    return prop;\n  }\n};\n\nproto.hide = function() {\n  // set flag\n  this.isHidden = true;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;\n\n  this.transition({\n    from: options.visibleStyle,\n    to: options.hiddenStyle,\n    // keep hidden stuff hidden\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onHideTransitionEnd = function() {\n  // check if still hidden\n  // during transition, item may have been un-hidden\n  if ( this.isHidden ) {\n    this.css({ display: 'none' });\n    this.emitEvent('hide');\n  }\n};\n\nproto.destroy = function() {\n  this.css({\n    position: '',\n    left: '',\n    right: '',\n    top: '',\n    bottom: '',\n    transition: '',\n    transform: ''\n  });\n};\n\nreturn Item;\n\n}));\n\n/*!\n * Outlayer v2.1.0\n * the brains and guts of a layout library\n * MIT license\n */\n\n( function( window, factory ) {\n  // browser global\n  window.Outlayer = factory(\n    window,\n    window.EvEmitter,\n    window.getSize,\n    window.fizzyUIUtils,\n    window.Outlayer.Item\n  );\n}( window, function factory( window, EvEmitter, getSize, utils, Item ) {\n'use strict';\n\n// ----- vars ----- //\n\nvar console = window.console;\nvar jQuery = window.jQuery;\nvar noop = function() {};\n\n// -------------------------- Outlayer -------------------------- //\n\n// globally unique identifiers\nvar GUID = 0;\n// internal store of all Outlayer intances\nvar instances = {};\n\n\n/**\n * @param {Element, String} element\n * @param {Object} options\n * @constructor\n */\nfunction Outlayer( element, options ) {\n  var queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) {\n      console.error( 'Bad element for ' + this.constructor.namespace +\n        ': ' + ( queryElement || element ) );\n    }\n    return;\n  }\n  this.element = queryElement;\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n\n  // options\n  this.options = utils.extend( {}, this.constructor.defaults );\n  this.option( options );\n\n  // add id for Outlayer.getFromElement\n  var id = ++GUID;\n  this.element.outlayerGUID = id; // expando\n  instances[ id ] = this; // associate via id\n\n  // kick it off\n  this._create();\n\n  var isInitLayout = this._getOption('initLayout');\n  if ( isInitLayout ) {\n    this.layout();\n  }\n}\n\n// settings are for internal use only\nOutlayer.namespace = 'outlayer';\nOutlayer.Item = Item;\n\n// default options\nOutlayer.defaults = {\n  containerStyle: {\n    position: 'relative'\n  },\n  initLayout: true,\n  originLeft: true,\n  originTop: true,\n  resize: true,\n  resizeContainer: true,\n  // item options\n  transitionDuration: '0.4s',\n  hiddenStyle: {\n    opacity: 0,\n    transform: 'scale(0.001)'\n  },\n  visibleStyle: {\n    opacity: 1,\n    transform: 'scale(1)'\n  }\n};\n\nvar proto = Outlayer.prototype;\n// inherit EvEmitter\nutils.extend( proto, EvEmitter.prototype );\n\n/**\n * set options\n * @param {Object} opts\n */\nproto.option = function( opts ) {\n  utils.extend( this.options, opts );\n};\n\n/**\n * get backwards compatible option value, check old name\n */\nproto._getOption = function( option ) {\n  var oldOption = this.constructor.compatOptions[ option ];\n  return oldOption && this.options[ oldOption ] !== undefined ?\n    this.options[ oldOption ] : this.options[ option ];\n};\n\nOutlayer.compatOptions = {\n  // currentName: oldName\n  initLayout: 'isInitLayout',\n  horizontal: 'isHorizontal',\n  layoutInstant: 'isLayoutInstant',\n  originLeft: 'isOriginLeft',\n  originTop: 'isOriginTop',\n  resize: 'isResizeBound',\n  resizeContainer: 'isResizingContainer'\n};\n\nproto._create = function() {\n  // get items from children\n  this.reloadItems();\n  // elements that affect layout, but are not laid out\n  this.stamps = [];\n  this.stamp( this.options.stamp );\n  // set container style\n  utils.extend( this.element.style, this.options.containerStyle );\n\n  // bind resize method\n  var canBindResize = this._getOption('resize');\n  if ( canBindResize ) {\n    this.bindResize();\n  }\n};\n\n// goes through all children again and gets bricks in proper order\nproto.reloadItems = function() {\n  // collection of item elements\n  this.items = this._itemize( this.element.children );\n};\n\n\n/**\n * turn elements into Outlayer.Items to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - collection of new Outlayer Items\n */\nproto._itemize = function( elems ) {\n\n  var itemElems = this._filterFindItemElements( elems );\n  var Item = this.constructor.Item;\n\n  // create new Outlayer Items for collection\n  var items = [];\n  for ( var i=0; i < itemElems.length; i++ ) {\n    var elem = itemElems[i];\n    var item = new Item( elem, this );\n    items.push( item );\n  }\n\n  return items;\n};\n\n/**\n * get item elements to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - item elements\n */\nproto._filterFindItemElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.itemSelector );\n};\n\n/**\n * getter method for getting item elements\n * @returns {Array} elems - collection of item elements\n */\nproto.getItemElements = function() {\n  return this.items.map( function( item ) {\n    return item.element;\n  });\n};\n\n// ----- init & layout ----- //\n\n/**\n * lays out all items\n */\nproto.layout = function() {\n  this._resetLayout();\n  this._manageStamps();\n\n  // don't animate first layout\n  var layoutInstant = this._getOption('layoutInstant');\n  var isInstant = layoutInstant !== undefined ?\n    layoutInstant : !this._isLayoutInited;\n  this.layoutItems( this.items, isInstant );\n\n  // flag for initalized\n  this._isLayoutInited = true;\n};\n\n// _init is alias for layout\nproto._init = proto.layout;\n\n/**\n * logic before any new layout\n */\nproto._resetLayout = function() {\n  this.getSize();\n};\n\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * get measurement from option, for columnWidth, rowHeight, gutter\n * if option is String -> get element from selector string, & get size of element\n * if option is Element -> get size of element\n * else use option as a number\n *\n * @param {String} measurement\n * @param {String} size - width or height\n * @private\n */\nproto._getMeasurement = function( measurement, size ) {\n  var option = this.options[ measurement ];\n  var elem;\n  if ( !option ) {\n    // default to 0\n    this[ measurement ] = 0;\n  } else {\n    // use option as an element\n    if ( typeof option == 'string' ) {\n      elem = this.element.querySelector( option );\n    } else if ( option instanceof HTMLElement ) {\n      elem = option;\n    }\n    // use size of element, if element\n    this[ measurement ] = elem ? getSize( elem )[ size ] : option;\n  }\n};\n\n/**\n * layout a collection of item elements\n * @api public\n */\nproto.layoutItems = function( items, isInstant ) {\n  items = this._getItemsForLayout( items );\n\n  this._layoutItems( items, isInstant );\n\n  this._postLayout();\n};\n\n/**\n * get the items to be laid out\n * you may want to skip over some items\n * @param {Array} items\n * @returns {Array} items\n */\nproto._getItemsForLayout = function( items ) {\n  return items.filter( function( item ) {\n    return !item.isIgnored;\n  });\n};\n\n/**\n * layout items\n * @param {Array} items\n * @param {Boolean} isInstant\n */\nproto._layoutItems = function( items, isInstant ) {\n  this._emitCompleteOnItems( 'layout', items );\n\n  if ( !items || !items.length ) {\n    // no items, emit event with empty array\n    return;\n  }\n\n  var queue = [];\n\n  items.forEach( function( item ) {\n    // get x/y object from method\n    var position = this._getItemLayoutPosition( item );\n    // enqueue\n    position.item = item;\n    position.isInstant = isInstant || item.isLayoutInstant;\n    queue.push( position );\n  }, this );\n\n  this._processLayoutQueue( queue );\n};\n\n/**\n * get item layout position\n * @param {Outlayer.Item} item\n * @returns {Object} x and y position\n */\nproto._getItemLayoutPosition = function( /* item */ ) {\n  return {\n    x: 0,\n    y: 0\n  };\n};\n\n/**\n * iterate over array and position each item\n * Reason being - separating this logic prevents 'layout invalidation'\n * thx @paul_irish\n * @param {Array} queue\n */\nproto._processLayoutQueue = function( queue ) {\n  this.updateStagger();\n  queue.forEach( function( obj, i ) {\n    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );\n  }, this );\n};\n\n// set stagger from option in milliseconds number\nproto.updateStagger = function() {\n  var stagger = this.options.stagger;\n  if ( stagger === null || stagger === undefined ) {\n    this.stagger = 0;\n    return;\n  }\n  this.stagger = getMilliseconds( stagger );\n  return this.stagger;\n};\n\n/**\n * Sets position of item in DOM\n * @param {Outlayer.Item} item\n * @param {Number} x - horizontal position\n * @param {Number} y - vertical position\n * @param {Boolean} isInstant - disables transitions\n */\nproto._positionItem = function( item, x, y, isInstant, i ) {\n  if ( isInstant ) {\n    // if not transition, just set CSS\n    item.goTo( x, y );\n  } else {\n    item.stagger( i * this.stagger );\n    item.moveTo( x, y );\n  }\n};\n\n/**\n * Any logic you want to do after each layout,\n * i.e. size the container\n */\nproto._postLayout = function() {\n  this.resizeContainer();\n};\n\nproto.resizeContainer = function() {\n  var isResizingContainer = this._getOption('resizeContainer');\n  if ( !isResizingContainer ) {\n    return;\n  }\n  var size = this._getContainerSize();\n  if ( size ) {\n    this._setContainerMeasure( size.width, true );\n    this._setContainerMeasure( size.height, false );\n  }\n};\n\n/**\n * Sets width or height of container if returned\n * @returns {Object} size\n *   @param {Number} width\n *   @param {Number} height\n */\nproto._getContainerSize = noop;\n\n/**\n * @param {Number} measure - size of width or height\n * @param {Boolean} isWidth\n */\nproto._setContainerMeasure = function( measure, isWidth ) {\n  if ( measure === undefined ) {\n    return;\n  }\n\n  var elemSize = this.size;\n  // add padding and border width if border box\n  if ( elemSize.isBorderBox ) {\n    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +\n      elemSize.borderLeftWidth + elemSize.borderRightWidth :\n      elemSize.paddingBottom + elemSize.paddingTop +\n      elemSize.borderTopWidth + elemSize.borderBottomWidth;\n  }\n\n  measure = Math.max( measure, 0 );\n  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';\n};\n\n/**\n * emit eventComplete on a collection of items events\n * @param {String} eventName\n * @param {Array} items - Outlayer.Items\n */\nproto._emitCompleteOnItems = function( eventName, items ) {\n  var _this = this;\n  function onComplete() {\n    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );\n  }\n\n  var count = items.length;\n  if ( !items || !count ) {\n    onComplete();\n    return;\n  }\n\n  var doneCount = 0;\n  function tick() {\n    doneCount++;\n    if ( doneCount == count ) {\n      onComplete();\n    }\n  }\n\n  // bind callback\n  items.forEach( function( item ) {\n    item.once( eventName, tick );\n  });\n};\n\n/**\n * emits events via EvEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  // add original event to arguments\n  var emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery ) {\n    // set this.$element\n    this.$element = this.$element || jQuery( this.element );\n    if ( event ) {\n      // create jQuery event\n      var $event = jQuery.Event( event );\n      $event.type = type;\n      this.$element.trigger( $event, args );\n    } else {\n      // just trigger with type if no event available\n      this.$element.trigger( type, args );\n    }\n  }\n};\n\n// -------------------------- ignore & stamps -------------------------- //\n\n\n/**\n * keep item in collection, but do not lay it out\n * ignored items do not get skipped in layout\n * @param {Element} elem\n */\nproto.ignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    item.isIgnored = true;\n  }\n};\n\n/**\n * return item to layout collection\n * @param {Element} elem\n */\nproto.unignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    delete item.isIgnored;\n  }\n};\n\n/**\n * adds elements to stamps\n * @param {NodeList, Array, Element, or String} elems\n */\nproto.stamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ) {\n    return;\n  }\n\n  this.stamps = this.stamps.concat( elems );\n  // ignore\n  elems.forEach( this.ignore, this );\n};\n\n/**\n * removes elements to stamps\n * @param {NodeList, Array, or Element} elems\n */\nproto.unstamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ){\n    return;\n  }\n\n  elems.forEach( function( elem ) {\n    // filter out removed stamp elements\n    utils.removeFrom( this.stamps, elem );\n    this.unignore( elem );\n  }, this );\n};\n\n/**\n * finds child elements\n * @param {NodeList, Array, Element, or String} elems\n * @returns {Array} elems\n */\nproto._find = function( elems ) {\n  if ( !elems ) {\n    return;\n  }\n  // if string, use argument as selector string\n  if ( typeof elems == 'string' ) {\n    elems = this.element.querySelectorAll( elems );\n  }\n  elems = utils.makeArray( elems );\n  return elems;\n};\n\nproto._manageStamps = function() {\n  if ( !this.stamps || !this.stamps.length ) {\n    return;\n  }\n\n  this._getBoundingRect();\n\n  this.stamps.forEach( this._manageStamp, this );\n};\n\n// update boundingLeft / Top\nproto._getBoundingRect = function() {\n  // get bounding rect for container element\n  var boundingRect = this.element.getBoundingClientRect();\n  var size = this.size;\n  this._boundingRect = {\n    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n    top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),\n    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )\n  };\n};\n\n/**\n * @param {Element} stamp\n**/\nproto._manageStamp = noop;\n\n/**\n * get x/y position of element relative to container element\n * @param {Element} elem\n * @returns {Object} offset - has left, top, right, bottom\n */\nproto._getElementOffset = function( elem ) {\n  var boundingRect = elem.getBoundingClientRect();\n  var thisRect = this._boundingRect;\n  var size = getSize( elem );\n  var offset = {\n    left: boundingRect.left - thisRect.left - size.marginLeft,\n    top: boundingRect.top - thisRect.top - size.marginTop,\n    right: thisRect.right - boundingRect.right - size.marginRight,\n    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n  };\n  return offset;\n};\n\n// -------------------------- resize -------------------------- //\n\n// enable event handlers for listeners\n// i.e. resize -> onresize\nproto.handleEvent = utils.handleEvent;\n\n/**\n * Bind layout to window resizing\n */\nproto.bindResize = function() {\n  window.addEventListener( 'resize', this );\n  this.isResizeBound = true;\n};\n\n/**\n * Unbind layout to window resizing\n */\nproto.unbindResize = function() {\n  window.removeEventListener( 'resize', this );\n  this.isResizeBound = false;\n};\n\nproto.onresize = function() {\n  this.resize();\n};\n\nutils.debounceMethod( Outlayer, 'onresize', 100 );\n\nproto.resize = function() {\n  // don't trigger if size did not change\n  // or if resize was unbound. See #9\n  if ( !this.isResizeBound || !this.needsResizeLayout() ) {\n    return;\n  }\n\n  this.layout();\n};\n\n/**\n * check if layout is needed post layout\n * @returns Boolean\n */\nproto.needsResizeLayout = function() {\n  var size = getSize( this.element );\n  // check that this.size and size are there\n  // IE8 triggers resize on body size change, so they might not be\n  var hasSizes = this.size && size;\n  return hasSizes && size.innerWidth !== this.size.innerWidth;\n};\n\n// -------------------------- methods -------------------------- //\n\n/**\n * add items to Outlayer instance\n * @param {Array or NodeList or Element} elems\n * @returns {Array} items - Outlayer.Items\n**/\nproto.addItems = function( elems ) {\n  var items = this._itemize( elems );\n  // add items to collection\n  if ( items.length ) {\n    this.items = this.items.concat( items );\n  }\n  return items;\n};\n\n/**\n * Layout newly-appended item elements\n * @param {Array or NodeList or Element} elems\n */\nproto.appended = function( elems ) {\n  var items = this.addItems( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // layout and reveal just the new items\n  this.layoutItems( items, true );\n  this.reveal( items );\n};\n\n/**\n * Layout prepended elements\n * @param {Array or NodeList or Element} elems\n */\nproto.prepended = function( elems ) {\n  var items = this._itemize( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // add items to beginning of collection\n  var previousItems = this.items.slice(0);\n  this.items = items.concat( previousItems );\n  // start new layout\n  this._resetLayout();\n  this._manageStamps();\n  // layout new stuff without transition\n  this.layoutItems( items, true );\n  this.reveal( items );\n  // layout previous items\n  this.layoutItems( previousItems );\n};\n\n/**\n * reveal a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.reveal = function( items ) {\n  this._emitCompleteOnItems( 'reveal', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.reveal();\n  });\n};\n\n/**\n * hide a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.hide = function( items ) {\n  this._emitCompleteOnItems( 'hide', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.hide();\n  });\n};\n\n/**\n * reveal item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.revealItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.reveal( items );\n};\n\n/**\n * hide item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.hideItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.hide( items );\n};\n\n/**\n * get Outlayer.Item, given an Element\n * @param {Element} elem\n * @param {Function} callback\n * @returns {Outlayer.Item} item\n */\nproto.getItem = function( elem ) {\n  // loop through items to get the one that matches\n  for ( var i=0; i < this.items.length; i++ ) {\n    var item = this.items[i];\n    if ( item.element == elem ) {\n      // return item\n      return item;\n    }\n  }\n};\n\n/**\n * get collection of Outlayer.Items, given Elements\n * @param {Array} elems\n * @returns {Array} items - Outlayer.Items\n */\nproto.getItems = function( elems ) {\n  elems = utils.makeArray( elems );\n  var items = [];\n  elems.forEach( function( elem ) {\n    var item = this.getItem( elem );\n    if ( item ) {\n      items.push( item );\n    }\n  }, this );\n\n  return items;\n};\n\n/**\n * remove element(s) from instance and DOM\n * @param {Array or NodeList or Element} elems\n */\nproto.remove = function( elems ) {\n  var removeItems = this.getItems( elems );\n\n  this._emitCompleteOnItems( 'remove', removeItems );\n\n  // bail if no items to remove\n  if ( !removeItems || !removeItems.length ) {\n    return;\n  }\n\n  removeItems.forEach( function( item ) {\n    item.remove();\n    // remove item from collection\n    utils.removeFrom( this.items, item );\n  }, this );\n};\n\n// ----- destroy ----- //\n\n// remove and disable Outlayer instance\nproto.destroy = function() {\n  // clean up dynamic styles\n  var style = this.element.style;\n  style.height = '';\n  style.position = '';\n  style.width = '';\n  // destroy items\n  this.items.forEach( function( item ) {\n    item.destroy();\n  });\n\n  this.unbindResize();\n\n  var id = this.element.outlayerGUID;\n  delete instances[ id ]; // remove reference to instance by id\n  delete this.element.outlayerGUID;\n  // remove data for jQuery\n  if ( jQuery ) {\n    jQuery.removeData( this.element, this.constructor.namespace );\n  }\n\n};\n\n// -------------------------- data -------------------------- //\n\n/**\n * get Outlayer instance from element\n * @param {Element} elem\n * @returns {Outlayer}\n */\nOutlayer.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  var id = elem && elem.outlayerGUID;\n  return id && instances[ id ];\n};\n\n\n// -------------------------- create Outlayer class -------------------------- //\n\n/**\n * create a layout class\n * @param {String} namespace\n */\nOutlayer.create = function( namespace, options ) {\n  // sub-class Outlayer\n  var Layout = subclass( Outlayer );\n  // apply new options and compatOptions\n  Layout.defaults = utils.extend( {}, Outlayer.defaults );\n  utils.extend( Layout.defaults, options );\n  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );\n\n  Layout.namespace = namespace;\n\n  Layout.data = Outlayer.data;\n\n  // sub-class Item\n  Layout.Item = subclass( Item );\n\n  // -------------------------- declarative -------------------------- //\n\n  utils.htmlInit( Layout, namespace );\n\n  // -------------------------- jQuery bridge -------------------------- //\n\n  // make into jQuery plugin\n  if ( jQuery && jQuery.bridget ) {\n    jQuery.bridget( namespace, Layout );\n  }\n\n  return Layout;\n};\n\nfunction subclass( Parent ) {\n  function SubClass() {\n    Parent.apply( this, arguments );\n  }\n\n  SubClass.prototype = Object.create( Parent.prototype );\n  SubClass.prototype.constructor = SubClass;\n\n  return SubClass;\n}\n\n// ----- helpers ----- //\n\n// how many milliseconds are in each unit\nvar msUnits = {\n  ms: 1,\n  s: 1000\n};\n\n// munge time-like parameter into millisecond number\n// '0.4s' -> 40\nfunction getMilliseconds( time ) {\n  if ( typeof time == 'number' ) {\n    return time;\n  }\n  var matches = time.match( /(^\\d*\\.?\\d*)(\\w*)/ );\n  var num = matches && matches[1];\n  var unit = matches && matches[2];\n  if ( !num.length ) {\n    return 0;\n  }\n  num = parseFloat( num );\n  var mult = msUnits[ unit ] || 1;\n  return num * mult;\n}\n\n// ----- fin ----- //\n\n// back in global\nOutlayer.Item = Item;\n\nreturn Outlayer;\n\n}));\n\n/**\n * Isotope Item\n**/\n\n( function( window, factory ) {\n  // browser global\n  window.Isotope = window.Isotope || {};\n  window.Isotope.Item = factory(\n    window.Outlayer\n  );\n}( window, function factory( Outlayer ) {\n'use strict';\n\n// -------------------------- Item -------------------------- //\n\n// sub-class Outlayer Item\nfunction Item() {\n  Outlayer.Item.apply( this, arguments );\n}\n\nvar proto = Item.prototype = Object.create( Outlayer.Item.prototype );\n\nvar _create = proto._create;\nproto._create = function() {\n  // assign id, used for original-order sorting\n  this.id = this.layout.itemGUID++;\n  _create.call( this );\n  this.sortData = {};\n};\n\nproto.updateSortData = function() {\n  if ( this.isIgnored ) {\n    return;\n  }\n  // default sorters\n  this.sortData.id = this.id;\n  // for backward compatibility\n  this.sortData['original-order'] = this.id;\n  this.sortData.random = Math.random();\n  // go thru getSortData obj and apply the sorters\n  var getSortData = this.layout.options.getSortData;\n  var sorters = this.layout._sorters;\n  for ( var key in getSortData ) {\n    var sorter = sorters[ key ];\n    this.sortData[ key ] = sorter( this.element, this );\n  }\n};\n\nvar _destroy = proto.destroy;\nproto.destroy = function() {\n  // call super\n  _destroy.apply( this, arguments );\n  // reset display, #741\n  this.css({\n    display: ''\n  });\n};\n\nreturn Item;\n\n}));\n\n/**\n * Isotope LayoutMode\n */\n\n( function( window, factory ) {\n  window.Isotope = window.Isotope || {};\n  window.Isotope.LayoutMode = factory(\n    window.getSize,\n    window.Outlayer\n  );\n}( window, function factory( getSize, Outlayer ) {\n  'use strict';\n\n  // layout mode class\n  function LayoutMode( isotope ) {\n    this.isotope = isotope;\n    // link properties\n    if ( isotope ) {\n      this.options = isotope.options[ this.namespace ];\n      this.element = isotope.element;\n      this.items = isotope.filteredItems;\n      this.size = isotope.size;\n    }\n  }\n\n  var proto = LayoutMode.prototype;\n\n  /**\n   * some methods should just defer to default Outlayer method\n   * and reference the Isotope instance as `this`\n  **/\n  var facadeMethods = [\n    '_resetLayout',\n    '_getItemLayoutPosition',\n    '_manageStamp',\n    '_getContainerSize',\n    '_getElementOffset',\n    'needsResizeLayout',\n    '_getOption'\n  ];\n\n  facadeMethods.forEach( function( methodName ) {\n    proto[ methodName ] = function() {\n      return Outlayer.prototype[ methodName ].apply( this.isotope, arguments );\n    };\n  });\n\n  // -----  ----- //\n\n  // for horizontal layout modes, check vertical size\n  proto.needsVerticalResizeLayout = function() {\n    // don't trigger if size did not change\n    var size = getSize( this.isotope.element );\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var hasSizes = this.isotope.size && size;\n    return hasSizes && size.innerHeight != this.isotope.size.innerHeight;\n  };\n\n  // ----- measurements ----- //\n\n  proto._getMeasurement = function() {\n    this.isotope._getMeasurement.apply( this, arguments );\n  };\n\n  proto.getColumnWidth = function() {\n    this.getSegmentSize( 'column', 'Width' );\n  };\n\n  proto.getRowHeight = function() {\n    this.getSegmentSize( 'row', 'Height' );\n  };\n\n  /**\n   * get columnWidth or rowHeight\n   * segment: 'column' or 'row'\n   * size 'Width' or 'Height'\n  **/\n  proto.getSegmentSize = function( segment, size ) {\n    var segmentName = segment + size;\n    var outerSize = 'outer' + size;\n    // columnWidth / outerWidth // rowHeight / outerHeight\n    this._getMeasurement( segmentName, outerSize );\n    // got rowHeight or columnWidth, we can chill\n    if ( this[ segmentName ] ) {\n      return;\n    }\n    // fall back to item of first element\n    var firstItemSize = this.getFirstItemSize();\n    this[ segmentName ] = firstItemSize && firstItemSize[ outerSize ] ||\n      // or size of container\n      this.isotope.size[ 'inner' + size ];\n  };\n\n  proto.getFirstItemSize = function() {\n    var firstItem = this.isotope.filteredItems[0];\n    return firstItem && firstItem.element && getSize( firstItem.element );\n  };\n\n  // ----- methods that should reference isotope ----- //\n\n  proto.layout = function() {\n    this.isotope.layout.apply( this.isotope, arguments );\n  };\n\n  proto.getSize = function() {\n    this.isotope.getSize();\n    this.size = this.isotope.size;\n  };\n\n  // -------------------------- create -------------------------- //\n\n  LayoutMode.modes = {};\n\n  LayoutMode.create = function( namespace, options ) {\n\n    function Mode() {\n      LayoutMode.apply( this, arguments );\n    }\n\n    Mode.prototype = Object.create( proto );\n    Mode.prototype.constructor = Mode;\n\n    // default options\n    if ( options ) {\n      Mode.options = options;\n    }\n\n    Mode.prototype.namespace = namespace;\n    // register in Isotope\n    LayoutMode.modes[ namespace ] = Mode;\n\n    return Mode;\n  };\n\n  return LayoutMode;\n\n}));\n\n/*!\n * Masonry v4.2.0\n * Cascading grid layout library\n * http://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */\n\n( function( window, factory ) {\n  // browser global\n  window.Masonry = factory(\n    window.Outlayer,\n    window.getSize\n  );\n}( window, function factory( Outlayer, getSize ) {\n\n\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n  // isFitWidth -> fitWidth\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function() {\n    this.getSize();\n    this._getMeasurement( 'columnWidth', 'outerWidth' );\n    this._getMeasurement( 'gutter', 'outerWidth' );\n    this.measureColumns();\n\n    // reset column Y\n    this.colYs = [];\n    for ( var i=0; i < this.cols; i++ ) {\n      this.colYs.push( 0 );\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function() {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if ( !this.columnWidth ) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||\n        // if first elem has no width, default to size of container\n        this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[ mathMethod ]( cols );\n    this.cols = Math.max( cols, 1 );\n  };\n\n  proto.getContainerWidth = function() {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n    var container = isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize( container );\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function( item ) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );\n    colSpan = Math.min( colSpan, this.cols );\n    // use horizontal or top column position\n    var colPosMethod = this.options.horizontalOrder ?\n      '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[ colPosMethod ]( colSpan, item );\n    // position the brick\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    };\n    // apply setHeight to necessary columns\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n    for ( var i = colPosition.col; i < setMax; i++ ) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function( colSpan ) {\n    var colGroup = this._getTopColGroup( colSpan );\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply( Math, colGroup );\n\n    return {\n      col: colGroup.indexOf( minimumY ),\n      y: minimumY,\n    };\n  };\n\n  /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */\n  proto._getTopColGroup = function( colSpan ) {\n    if ( colSpan < 2 ) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for ( var i = 0; i < groupCount; i++ ) {\n      colGroup[i] = this._getColGroupY( i, colSpan );\n    }\n    return colGroup;\n  };\n\n  proto._getColGroupY = function( col, colSpan ) {\n    if ( colSpan < 2 ) {\n      return this.colYs[ col ];\n    }\n    // make an array of colY values for that one group\n    var groupColYs = this.colYs.slice( col, col + colSpan );\n    // and get the max value of the array\n    return Math.max.apply( Math, groupColYs );\n  };\n\n  // get column position based on horizontal index. #873\n  proto._getHorizontalColPosition = function( colSpan, item ) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols;\n    // shift to next row if item can't fit on current row\n    col = isOver ? 0 : col;\n    // don't let zero-size items take up space\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n\n    return {\n      col: col,\n      y: this._getColGroupY( col, colSpan ),\n    };\n  };\n\n  proto._manageStamp = function( stamp ) {\n    var stampSize = getSize( stamp );\n    var offset = this._getElementOffset( stamp );\n    // get the columns that this stamp affects\n    var isOriginLeft = this._getOption('originLeft');\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor( firstX / this.columnWidth );\n    firstCol = Math.max( 0, firstCol );\n    var lastCol = Math.floor( lastX / this.columnWidth );\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min( this.cols - 1, lastCol );\n    // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +\n      stampSize.outerHeight;\n    for ( var i = firstCol; i <= lastCol; i++ ) {\n      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );\n    }\n  };\n\n  proto._getContainerSize = function() {\n    this.maxY = Math.max.apply( Math, this.colYs );\n    var size = {\n      height: this.maxY\n    };\n\n    if ( this._getOption('fitWidth') ) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function() {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while ( --i ) {\n      if ( this.colYs[i] !== 0 ) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function() {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n\n}));\n\n/*!\n * Masonry layout mode\n * sub-classes Masonry\n * http://masonry.desandro.com\n */\n\n( function( window, factory ) {\n  // browser global\n  factory(\n    window.Isotope.LayoutMode,\n    window.Masonry\n  );\n}( window, function factory( LayoutMode, Masonry ) {\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var MasonryMode = LayoutMode.create('masonry');\n\n  var proto = MasonryMode.prototype;\n\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  };\n\n  // inherit Masonry prototype\n  for ( var method in Masonry.prototype ) {\n    // do not inherit mode methods\n    if ( !keepModeMethods[ method ] ) {\n      proto[ method ] = Masonry.prototype[ method ];\n    }\n  }\n\n  var measureColumns = proto.measureColumns;\n  proto.measureColumns = function() {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call( this );\n  };\n\n  // point to mode options for fitWidth\n  var _getOption = proto._getOption;\n  proto._getOption = function( option ) {\n    if ( option == 'fitWidth' ) {\n      return this.options.isFitWidth !== undefined ?\n        this.options.isFitWidth : this.options.fitWidth;\n    }\n    return _getOption.apply( this.isotope, arguments );\n  };\n\n  return MasonryMode;\n\n}));\n\n/**\n * fitRows layout mode\n */\n\n( function( window, factory ) {\n  factory(\n    window.Isotope.LayoutMode\n  );\n}( window, function factory( LayoutMode ) {\n'use strict';\n\nvar FitRows = LayoutMode.create('fitRows');\n\nvar proto = FitRows.prototype;\n\nproto._resetLayout = function() {\n  this.x = 0;\n  this.y = 0;\n  this.maxY = 0;\n  this._getMeasurement( 'gutter', 'outerWidth' );\n};\n\nproto._getItemLayoutPosition = function( item ) {\n  item.getSize();\n\n  var itemWidth = item.size.outerWidth + this.gutter;\n  // if this element cannot fit in the current row\n  var containerWidth = this.isotope.size.innerWidth + this.gutter;\n  if ( this.x !== 0 && itemWidth + this.x > containerWidth ) {\n    this.x = 0;\n    this.y = this.maxY;\n  }\n\n  var position = {\n    x: this.x,\n    y: this.y\n  };\n\n  this.maxY = Math.max( this.maxY, this.y + item.size.outerHeight );\n  this.x += itemWidth;\n\n  return position;\n};\n\nproto._getContainerSize = function() {\n  return { height: this.maxY };\n};\n\nreturn FitRows;\n\n}));\n\n/**\n * vertical layout mode\n */\n\n( function( window, factory ) {\n  factory(\n    window.Isotope.LayoutMode\n  );\n}( window, function factory( LayoutMode ) {\n'use strict';\n\nvar Vertical = LayoutMode.create( 'vertical', {\n  horizontalAlignment: 0\n});\n\nvar proto = Vertical.prototype;\n\nproto._resetLayout = function() {\n  this.y = 0;\n};\n\nproto._getItemLayoutPosition = function( item ) {\n  item.getSize();\n  var x = ( this.isotope.size.innerWidth - item.size.outerWidth ) *\n    this.options.horizontalAlignment;\n  var y = this.y;\n  this.y += item.size.outerHeight;\n  return { x: x, y: y };\n};\n\nproto._getContainerSize = function() {\n  return { height: this.y };\n};\n\nreturn Vertical;\n\n}));\n\n/*!\n * Isotope v3.0.4\n *\n * Licensed GPLv3 for open source use\n * or Isotope Commercial License for commercial use\n *\n * http://isotope.metafizzy.co\n * Copyright 2017 Metafizzy\n */\n\n( function( window, factory ) {\n  window.Isotope = factory(\n    window,\n    window.Outlayer,\n    window.getSize,\n    window.matchesSelector,\n    window.fizzyUIUtils,\n    window.Isotope.Item,\n    window.Isotope.LayoutMode\n  );\n}( window, function factory( window, Outlayer, getSize, matchesSelector, utils,\n  Item, LayoutMode ) {\n\n\n\n// -------------------------- vars -------------------------- //\n\nvar jQuery = window.jQuery;\n\n// -------------------------- helpers -------------------------- //\n\nvar trim = String.prototype.trim ?\n  function( str ) {\n    return str.trim();\n  } :\n  function( str ) {\n    return str.replace( /^\\s+|\\s+$/g, '' );\n  };\n\n// -------------------------- isotopeDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Isotope = Outlayer.create( 'isotope', {\n    layoutMode: 'masonry',\n    isJQueryFiltering: true,\n    sortAscending: true\n  });\n\n  Isotope.Item = Item;\n  Isotope.LayoutMode = LayoutMode;\n\n  var proto = Isotope.prototype;\n\n  proto._create = function() {\n    this.itemGUID = 0;\n    // functions that sort items\n    this._sorters = {};\n    this._getSorters();\n    // call super\n    Outlayer.prototype._create.call( this );\n\n    // create layout modes\n    this.modes = {};\n    // start filteredItems with all items\n    this.filteredItems = this.items;\n    // keep of track of sortBys\n    this.sortHistory = [ 'original-order' ];\n    // create from registered layout modes\n    for ( var name in LayoutMode.modes ) {\n      this._initLayoutMode( name );\n    }\n  };\n\n  proto.reloadItems = function() {\n    // reset item ID counter\n    this.itemGUID = 0;\n    // call super\n    Outlayer.prototype.reloadItems.call( this );\n  };\n\n  proto._itemize = function() {\n    var items = Outlayer.prototype._itemize.apply( this, arguments );\n    // assign ID for original-order\n    for ( var i=0; i < items.length; i++ ) {\n      var item = items[i];\n      item.id = this.itemGUID++;\n    }\n    this._updateItemsSortData( items );\n    return items;\n  };\n\n\n  // -------------------------- layout -------------------------- //\n\n  proto._initLayoutMode = function( name ) {\n    var Mode = LayoutMode.modes[ name ];\n    // set mode options\n    // HACK extend initial options, back-fill in default options\n    var initialOpts = this.options[ name ] || {};\n    this.options[ name ] = Mode.options ?\n      utils.extend( Mode.options, initialOpts ) : initialOpts;\n    // init layout mode instance\n    this.modes[ name ] = new Mode( this );\n  };\n\n\n  proto.layout = function() {\n    // if first time doing layout, do all magic\n    if ( !this._isLayoutInited && this._getOption('initLayout') ) {\n      this.arrange();\n      return;\n    }\n    this._layout();\n  };\n\n  // private method to be used in layout() & magic()\n  proto._layout = function() {\n    // don't animate first layout\n    var isInstant = this._getIsInstant();\n    // layout flow\n    this._resetLayout();\n    this._manageStamps();\n    this.layoutItems( this.filteredItems, isInstant );\n\n    // flag for initalized\n    this._isLayoutInited = true;\n  };\n\n  // filter + sort + layout\n  proto.arrange = function( opts ) {\n    // set any options pass\n    this.option( opts );\n    this._getIsInstant();\n    // filter, sort, and layout\n\n    // filter\n    var filtered = this._filter( this.items );\n    this.filteredItems = filtered.matches;\n\n    this._bindArrangeComplete();\n\n    if ( this._isInstant ) {\n      this._noTransition( this._hideReveal, [ filtered ] );\n    } else {\n      this._hideReveal( filtered );\n    }\n\n    this._sort();\n    this._layout();\n  };\n  // alias to _init for main plugin method\n  proto._init = proto.arrange;\n\n  proto._hideReveal = function( filtered ) {\n    this.reveal( filtered.needReveal );\n    this.hide( filtered.needHide );\n  };\n\n  // HACK\n  // Don't animate/transition first layout\n  // Or don't animate/transition other layouts\n  proto._getIsInstant = function() {\n    var isLayoutInstant = this._getOption('layoutInstant');\n    var isInstant = isLayoutInstant !== undefined ? isLayoutInstant :\n      !this._isLayoutInited;\n    this._isInstant = isInstant;\n    return isInstant;\n  };\n\n  // listen for layoutComplete, hideComplete and revealComplete\n  // to trigger arrangeComplete\n  proto._bindArrangeComplete = function() {\n    // listen for 3 events to trigger arrangeComplete\n    var isLayoutComplete, isHideComplete, isRevealComplete;\n    var _this = this;\n    function arrangeParallelCallback() {\n      if ( isLayoutComplete && isHideComplete && isRevealComplete ) {\n        _this.dispatchEvent( 'arrangeComplete', null, [ _this.filteredItems ] );\n      }\n    }\n    this.once( 'layoutComplete', function() {\n      isLayoutComplete = true;\n      arrangeParallelCallback();\n    });\n    this.once( 'hideComplete', function() {\n      isHideComplete = true;\n      arrangeParallelCallback();\n    });\n    this.once( 'revealComplete', function() {\n      isRevealComplete = true;\n      arrangeParallelCallback();\n    });\n  };\n\n  // -------------------------- filter -------------------------- //\n\n  proto._filter = function( items ) {\n    var filter = this.options.filter;\n    filter = filter || '*';\n    var matches = [];\n    var hiddenMatched = [];\n    var visibleUnmatched = [];\n\n    var test = this._getFilterTest( filter );\n\n    // test each item\n    for ( var i=0; i < items.length; i++ ) {\n      var item = items[i];\n      if ( item.isIgnored ) {\n        continue;\n      }\n      // add item to either matched or unmatched group\n      var isMatched = test( item );\n      // item.isFilterMatched = isMatched;\n      // add to matches if its a match\n      if ( isMatched ) {\n        matches.push( item );\n      }\n      // add to additional group if item needs to be hidden or revealed\n      if ( isMatched && item.isHidden ) {\n        hiddenMatched.push( item );\n      } else if ( !isMatched && !item.isHidden ) {\n        visibleUnmatched.push( item );\n      }\n    }\n\n    // return collections of items to be manipulated\n    return {\n      matches: matches,\n      needReveal: hiddenMatched,\n      needHide: visibleUnmatched\n    };\n  };\n\n  // get a jQuery, function, or a matchesSelector test given the filter\n  proto._getFilterTest = function( filter ) {\n    if ( jQuery && this.options.isJQueryFiltering ) {\n      // use jQuery\n      return function( item ) {\n        return jQuery( item.element ).is( filter );\n      };\n    }\n    if ( typeof filter == 'function' ) {\n      // use filter as function\n      return function( item ) {\n        return filter( item.element );\n      };\n    }\n    // default, use filter as selector string\n    return function( item ) {\n      return matchesSelector( item.element, filter );\n    };\n  };\n\n  // -------------------------- sorting -------------------------- //\n\n  /**\n   * @params {Array} elems\n   * @public\n   */\n  proto.updateSortData = function( elems ) {\n    // get items\n    var items;\n    if ( elems ) {\n      elems = utils.makeArray( elems );\n      items = this.getItems( elems );\n    } else {\n      // update all items if no elems provided\n      items = this.items;\n    }\n\n    this._getSorters();\n    this._updateItemsSortData( items );\n  };\n\n  proto._getSorters = function() {\n    var getSortData = this.options.getSortData;\n    for ( var key in getSortData ) {\n      var sorter = getSortData[ key ];\n      this._sorters[ key ] = mungeSorter( sorter );\n    }\n  };\n\n  /**\n   * @params {Array} items - of Isotope.Items\n   * @private\n   */\n  proto._updateItemsSortData = function( items ) {\n    // do not update if no items\n    var len = items && items.length;\n\n    for ( var i=0; len && i < len; i++ ) {\n      var item = items[i];\n      item.updateSortData();\n    }\n  };\n\n  // ----- munge sorter ----- //\n\n  // encapsulate this, as we just need mungeSorter\n  // other functions in here are just for munging\n  var mungeSorter = ( function() {\n    // add a magic layer to sorters for convienent shorthands\n    // `.foo-bar` will use the text of .foo-bar querySelector\n    // `[foo-bar]` will use attribute\n    // you can also add parser\n    // `.foo-bar parseInt` will parse that as a number\n    function mungeSorter( sorter ) {\n      // if not a string, return function or whatever it is\n      if ( typeof sorter != 'string' ) {\n        return sorter;\n      }\n      // parse the sorter string\n      var args = trim( sorter ).split(' ');\n      var query = args[0];\n      // check if query looks like [an-attribute]\n      var attrMatch = query.match( /^\\[(.+)\\]$/ );\n      var attr = attrMatch && attrMatch[1];\n      var getValue = getValueGetter( attr, query );\n      // use second argument as a parser\n      var parser = Isotope.sortDataParsers[ args[1] ];\n      // parse the value, if there was a parser\n      sorter = parser ? function( elem ) {\n        return elem && parser( getValue( elem ) );\n      } :\n      // otherwise just return value\n      function( elem ) {\n        return elem && getValue( elem );\n      };\n\n      return sorter;\n    }\n\n    // get an attribute getter, or get text of the querySelector\n    function getValueGetter( attr, query ) {\n      // if query looks like [foo-bar], get attribute\n      if ( attr ) {\n        return function getAttribute( elem ) {\n          return elem.getAttribute( attr );\n        };\n      }\n\n      // otherwise, assume its a querySelector, and get its text\n      return function getChildText( elem ) {\n        var child = elem.querySelector( query );\n        return child && child.textContent;\n      };\n    }\n\n    return mungeSorter;\n  })();\n\n  // parsers used in getSortData shortcut strings\n  Isotope.sortDataParsers = {\n    'parseInt': function( val ) {\n      return parseInt( val, 10 );\n    },\n    'parseFloat': function( val ) {\n      return parseFloat( val );\n    }\n  };\n\n  // ----- sort method ----- //\n\n  // sort filteredItem order\n  proto._sort = function() {\n    if ( !this.options.sortBy ) {\n      return;\n    }\n    // keep track of sortBy History\n    var sortBys = utils.makeArray( this.options.sortBy );\n    if ( !this._getIsSameSortBy( sortBys ) ) {\n      // concat all sortBy and sortHistory, add to front, oldest goes in last\n      this.sortHistory = sortBys.concat( this.sortHistory );\n    }\n    // sort magic\n    var itemSorter = getItemSorter( this.sortHistory, this.options.sortAscending );\n    this.filteredItems.sort( itemSorter );\n  };\n\n  // check if sortBys is same as start of sortHistory\n  proto._getIsSameSortBy = function( sortBys ) {\n    for ( var i=0; i < sortBys.length; i++ ) {\n      if ( sortBys[i] != this.sortHistory[i] ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // returns a function used for sorting\n  function getItemSorter( sortBys, sortAsc ) {\n    return function sorter( itemA, itemB ) {\n      // cycle through all sortKeys\n      for ( var i = 0; i < sortBys.length; i++ ) {\n        var sortBy = sortBys[i];\n        var a = itemA.sortData[ sortBy ];\n        var b = itemB.sortData[ sortBy ];\n        if ( a > b || a < b ) {\n          // if sortAsc is an object, use the value given the sortBy key\n          var isAscending = sortAsc[ sortBy ] !== undefined ? sortAsc[ sortBy ] : sortAsc;\n          var direction = isAscending ? 1 : -1;\n          return ( a > b ? 1 : -1 ) * direction;\n        }\n      }\n      return 0;\n    };\n  }\n\n  // -------------------------- methods -------------------------- //\n\n  // get layout mode\n  proto._mode = function() {\n    var layoutMode = this.options.layoutMode;\n    var mode = this.modes[ layoutMode ];\n    if ( !mode ) {\n      // TODO console.error\n      throw new Error( 'No layout mode: ' + layoutMode );\n    }\n    // HACK sync mode's options\n    // any options set after init for layout mode need to be synced\n    mode.options = this.options[ layoutMode ];\n    return mode;\n  };\n\n  proto._resetLayout = function() {\n    // trigger original reset layout\n    Outlayer.prototype._resetLayout.call( this );\n    this._mode()._resetLayout();\n  };\n\n  proto._getItemLayoutPosition = function( item  ) {\n    return this._mode()._getItemLayoutPosition( item );\n  };\n\n  proto._manageStamp = function( stamp ) {\n    this._mode()._manageStamp( stamp );\n  };\n\n  proto._getContainerSize = function() {\n    return this._mode()._getContainerSize();\n  };\n\n  proto.needsResizeLayout = function() {\n    return this._mode().needsResizeLayout();\n  };\n\n  // -------------------------- adding & removing -------------------------- //\n\n  // HEADS UP overwrites default Outlayer appended\n  proto.appended = function( elems ) {\n    var items = this.addItems( elems );\n    if ( !items.length ) {\n      return;\n    }\n    // filter, layout, reveal new items\n    var filteredItems = this._filterRevealAdded( items );\n    // add to filteredItems\n    this.filteredItems = this.filteredItems.concat( filteredItems );\n  };\n\n  // HEADS UP overwrites default Outlayer prepended\n  proto.prepended = function( elems ) {\n    var items = this._itemize( elems );\n    if ( !items.length ) {\n      return;\n    }\n    // start new layout\n    this._resetLayout();\n    this._manageStamps();\n    // filter, layout, reveal new items\n    var filteredItems = this._filterRevealAdded( items );\n    // layout previous items\n    this.layoutItems( this.filteredItems );\n    // add to items and filteredItems\n    this.filteredItems = filteredItems.concat( this.filteredItems );\n    this.items = items.concat( this.items );\n  };\n\n  proto._filterRevealAdded = function( items ) {\n    var filtered = this._filter( items );\n    this.hide( filtered.needHide );\n    // reveal all new items\n    this.reveal( filtered.matches );\n    // layout new items, no transition\n    this.layoutItems( filtered.matches, true );\n    return filtered.matches;\n  };\n\n  /**\n   * Filter, sort, and layout newly-appended item elements\n   * @param {Array or NodeList or Element} elems\n   */\n  proto.insert = function( elems ) {\n    var items = this.addItems( elems );\n    if ( !items.length ) {\n      return;\n    }\n    // append item elements\n    var i, item;\n    var len = items.length;\n    for ( i=0; i < len; i++ ) {\n      item = items[i];\n      this.element.appendChild( item.element );\n    }\n    // filter new stuff\n    var filteredInsertItems = this._filter( items ).matches;\n    // set flag\n    for ( i=0; i < len; i++ ) {\n      items[i].isLayoutInstant = true;\n    }\n    this.arrange();\n    // reset flag\n    for ( i=0; i < len; i++ ) {\n      delete items[i].isLayoutInstant;\n    }\n    this.reveal( filteredInsertItems );\n  };\n\n  var _remove = proto.remove;\n  proto.remove = function( elems ) {\n    elems = utils.makeArray( elems );\n    var removeItems = this.getItems( elems );\n    // do regular thing\n    _remove.call( this, elems );\n    // bail if no items to remove\n    var len = removeItems && removeItems.length;\n    // remove elems from filteredItems\n    for ( var i=0; len && i < len; i++ ) {\n      var item = removeItems[i];\n      // remove item from collection\n      utils.removeFrom( this.filteredItems, item );\n    }\n  };\n\n  proto.shuffle = function() {\n    // update random sortData\n    for ( var i=0; i < this.items.length; i++ ) {\n      var item = this.items[i];\n      item.sortData.random = Math.random();\n    }\n    this.options.sortBy = 'random';\n    this._sort();\n    this._layout();\n  };\n\n  /**\n   * trigger fn without transition\n   * kind of hacky to have this in the first place\n   * @param {Function} fn\n   * @param {Array} args\n   * @returns ret\n   * @private\n   */\n  proto._noTransition = function( fn, args ) {\n    // save transitionDuration before disabling\n    var transitionDuration = this.options.transitionDuration;\n    // disable transition\n    this.options.transitionDuration = 0;\n    // do it\n    var returnValue = fn.apply( this, args );\n    // re-enable transition for reveal\n    this.options.transitionDuration = transitionDuration;\n    return returnValue;\n  };\n\n  // ----- helper methods ----- //\n\n  /**\n   * getter method for getting filtered item elements\n   * @returns {Array} elems - collection of item elements\n   */\n  proto.getFilteredItemElements = function() {\n    return this.filteredItems.map( function( item ) {\n      return item.element;\n    });\n  };\n\n  // -----  ----- //\n\n  return Isotope;\n\n}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}