{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/vendors/sparkline/build/vendors/sparkline/sparkline.js"],"names":[],"mappings":"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","file":"sparkline.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n*\r\n* jquery.sparkline.js\r\n*\r\n* v2.1.2\r\n* (c) Splunk, Inc\r\n* Contact: Gareth Watts (gareth@splunk.com)\r\n* http://omnipotent.net/jquery.sparkline/\r\n*\r\n* Generates inline sparkline charts from data supplied either to the method\r\n* or inline in HTML\r\n*\r\n* Compatible with Internet Explorer 6.0+ and modern browsers equipped with the canvas tag\r\n* (Firefox 2.0+, Safari, Opera, etc)\r\n*\r\n* License: New BSD License\r\n*\r\n* Copyright (c) 2012, Splunk Inc.\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification,\r\n* are permitted provided that the following conditions are met:\r\n*\r\n*     * Redistributions of source code must retain the above copyright notice,\r\n*       this list of conditions and the following disclaimer.\r\n*     * Redistributions in binary form must reproduce the above copyright notice,\r\n*       this list of conditions and the following disclaimer in the documentation\r\n*       and/or other materials provided with the distribution.\r\n*     * Neither the name of Splunk Inc nor the names of its contributors may\r\n*       be used to endorse or promote products derived from this software without\r\n*       specific prior written permission.\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\r\n* SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\r\n* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n*\r\n* Usage:\r\n*  $(selector).sparkline(values, options)\r\n*\r\n* If values is undefined or set to 'html' then the data values are read from the specified tag:\r\n*   <p>Sparkline: <span class=\"sparkline\">1,4,6,6,8,5,3,5</span></p>\r\n*   $('.sparkline').sparkline();\r\n* There must be no spaces in the enclosed data set\r\n*\r\n* Otherwise values must be an array of numbers or null values\r\n*    <p>Sparkline: <span id=\"sparkline1\">This text replaced if the browser is compatible</span></p>\r\n*    $('#sparkline1').sparkline([1,4,6,6,8,5,3,5])\r\n*    $('#sparkline2').sparkline([1,4,6,null,null,5,3,5])\r\n*\r\n* Values can also be specified in an HTML comment, or as a values attribute:\r\n*    <p>Sparkline: <span class=\"sparkline\"><!--1,4,6,6,8,5,3,5 --></span></p>\r\n*    <p>Sparkline: <span class=\"sparkline\" values=\"1,4,6,6,8,5,3,5\"></span></p>\r\n*    $('.sparkline').sparkline();\r\n*\r\n* For line charts, x values can also be specified:\r\n*   <p>Sparkline: <span class=\"sparkline\">1:1,2.7:4,3.4:6,5:6,6:8,8.7:5,9:3,10:5</span></p>\r\n*    $('#sparkline1').sparkline([ [1,1], [2.7,4], [3.4,6], [5,6], [6,8], [8.7,5], [9,3], [10,5] ])\r\n*\r\n* By default, options should be passed in as teh second argument to the sparkline function:\r\n*   $('.sparkline').sparkline([1,2,3,4], {type: 'bar'})\r\n*\r\n* Options can also be set by passing them on the tag itself.  This feature is disabled by default though\r\n* as there's a slight performance overhead:\r\n*   $('.sparkline').sparkline([1,2,3,4], {enableTagOptions: true})\r\n*   <p>Sparkline: <span class=\"sparkline\" sparkType=\"bar\" sparkBarColor=\"red\">loading</span></p>\r\n* Prefix all options supplied as tag attribute with \"spark\" (configurable by setting tagOptionPrefix)\r\n*\r\n* Supported options:\r\n*   lineColor - Color of the line used for the chart\r\n*   fillColor - Color used to fill in the chart - Set to '' or false for a transparent chart\r\n*   width - Width of the chart - Defaults to 3 times the number of values in pixels\r\n*   height - Height of the chart - Defaults to the height of the containing element\r\n*   chartRangeMin - Specify the minimum value to use for the Y range of the chart - Defaults to the minimum value supplied\r\n*   chartRangeMax - Specify the maximum value to use for the Y range of the chart - Defaults to the maximum value supplied\r\n*   chartRangeClip - Clip out of range values to the max/min specified by chartRangeMin and chartRangeMax\r\n*   chartRangeMinX - Specify the minimum value to use for the X range of the chart - Defaults to the minimum value supplied\r\n*   chartRangeMaxX - Specify the maximum value to use for the X range of the chart - Defaults to the maximum value supplied\r\n*   composite - If true then don't erase any existing chart attached to the tag, but draw\r\n*           another chart over the top - Note that width and height are ignored if an\r\n*           existing chart is detected.\r\n*   tagValuesAttribute - Name of tag attribute to check for data values - Defaults to 'values'\r\n*   enableTagOptions - Whether to check tags for sparkline options\r\n*   tagOptionPrefix - Prefix used for options supplied as tag attributes - Defaults to 'spark'\r\n*   disableHiddenCheck - If set to true, then the plugin will assume that charts will never be drawn into a\r\n*           hidden dom element, avoding a browser reflow\r\n*   disableInteraction - If set to true then all mouseover/click interaction behaviour will be disabled,\r\n*       making the plugin perform much like it did in 1.x\r\n*   disableTooltips - If set to true then tooltips will be disabled - Defaults to false (tooltips enabled)\r\n*   disableHighlight - If set to true then highlighting of selected chart elements on mouseover will be disabled\r\n*       defaults to false (highlights enabled)\r\n*   highlightLighten - Factor to lighten/darken highlighted chart values by - Defaults to 1.4 for a 40% increase\r\n*   tooltipContainer - Specify which DOM element the tooltip should be rendered into - defaults to document.body\r\n*   tooltipClassname - Optional CSS classname to apply to tooltips - If not specified then a default style will be applied\r\n*   tooltipOffsetX - How many pixels away from the mouse pointer to render the tooltip on the X axis\r\n*   tooltipOffsetY - How many pixels away from the mouse pointer to render the tooltip on the r axis\r\n*   tooltipFormatter  - Optional callback that allows you to override the HTML displayed in the tooltip\r\n*       callback is given arguments of (sparkline, options, fields)\r\n*   tooltipChartTitle - If specified then the tooltip uses the string specified by this setting as a title\r\n*   tooltipFormat - A format string or SPFormat object  (or an array thereof for multiple entries)\r\n*       to control the format of the tooltip\r\n*   tooltipPrefix - A string to prepend to each field displayed in a tooltip\r\n*   tooltipSuffix - A string to append to each field displayed in a tooltip\r\n*   tooltipSkipNull - If true then null values will not have a tooltip displayed (defaults to true)\r\n*   tooltipValueLookups - An object or range map to map field values to tooltip strings\r\n*       (eg. to map -1 to \"Lost\", 0 to \"Draw\", and 1 to \"Win\")\r\n*   numberFormatter - Optional callback for formatting numbers in tooltips\r\n*   numberDigitGroupSep - Character to use for group separator in numbers \"1,234\" - Defaults to \",\"\r\n*   numberDecimalMark - Character to use for the decimal point when formatting numbers - Defaults to \".\"\r\n*   numberDigitGroupCount - Number of digits between group separator - Defaults to 3\r\n*\r\n* There are 7 types of sparkline, selected by supplying a \"type\" option of 'line' (default),\r\n* 'bar', 'tristate', 'bullet', 'discrete', 'pie' or 'box'\r\n*    line - Line chart.  Options:\r\n*       spotColor - Set to '' to not end each line in a circular spot\r\n*       minSpotColor - If set, color of spot at minimum value\r\n*       maxSpotColor - If set, color of spot at maximum value\r\n*       spotRadius - Radius in pixels\r\n*       lineWidth - Width of line in pixels\r\n*       normalRangeMin\r\n*       normalRangeMax - If set draws a filled horizontal bar between these two values marking the \"normal\"\r\n*                      or expected range of values\r\n*       normalRangeColor - Color to use for the above bar\r\n*       drawNormalOnTop - Draw the normal range above the chart fill color if true\r\n*       defaultPixelsPerValue - Defaults to 3 pixels of width for each value in the chart\r\n*       highlightSpotColor - The color to use for drawing a highlight spot on mouseover - Set to null to disable\r\n*       highlightLineColor - The color to use for drawing a highlight line on mouseover - Set to null to disable\r\n*       valueSpots - Specify which points to draw spots on, and in which color.  Accepts a range map\r\n*\r\n*   bar - Bar chart.  Options:\r\n*       barColor - Color of bars for postive values\r\n*       negBarColor - Color of bars for negative values\r\n*       zeroColor - Color of bars with zero values\r\n*       nullColor - Color of bars with null values - Defaults to omitting the bar entirely\r\n*       barWidth - Width of bars in pixels\r\n*       colorMap - Optional mappnig of values to colors to override the *BarColor values above\r\n*                  can be an Array of values to control the color of individual bars or a range map\r\n*                  to specify colors for individual ranges of values\r\n*       barSpacing - Gap between bars in pixels\r\n*       zeroAxis - Centers the y-axis around zero if true\r\n*\r\n*   tristate - Charts values of win (>0), lose (<0) or draw (=0)\r\n*       posBarColor - Color of win values\r\n*       negBarColor - Color of lose values\r\n*       zeroBarColor - Color of draw values\r\n*       barWidth - Width of bars in pixels\r\n*       barSpacing - Gap between bars in pixels\r\n*       colorMap - Optional mappnig of values to colors to override the *BarColor values above\r\n*                  can be an Array of values to control the color of individual bars or a range map\r\n*                  to specify colors for individual ranges of values\r\n*\r\n*   discrete - Options:\r\n*       lineHeight - Height of each line in pixels - Defaults to 30% of the graph height\r\n*       thesholdValue - Values less than this value will be drawn using thresholdColor instead of lineColor\r\n*       thresholdColor\r\n*\r\n*   bullet - Values for bullet graphs msut be in the order: target, performance, range1, range2, range3, ...\r\n*       options:\r\n*       targetColor - The color of the vertical target marker\r\n*       targetWidth - The width of the target marker in pixels\r\n*       performanceColor - The color of the performance measure horizontal bar\r\n*       rangeColors - Colors to use for each qualitative range background color\r\n*\r\n*   pie - Pie chart. Options:\r\n*       sliceColors - An array of colors to use for pie slices\r\n*       offset - Angle in degrees to offset the first slice - Try -90 or +90\r\n*       borderWidth - Width of border to draw around the pie chart, in pixels - Defaults to 0 (no border)\r\n*       borderColor - Color to use for the pie chart border - Defaults to #000\r\n*\r\n*   box - Box plot. Options:\r\n*       raw - Set to true to supply pre-computed plot points as values\r\n*             values should be: low_outlier, low_whisker, q1, median, q3, high_whisker, high_outlier\r\n*             When set to false you can supply any number of values and the box plot will\r\n*             be computed for you.  Default is false.\r\n*       showOutliers - Set to true (default) to display outliers as circles\r\n*       outlierIQR - Interquartile range used to determine outliers.  Default 1.5\r\n*       boxLineColor - Outline color of the box\r\n*       boxFillColor - Fill color for the box\r\n*       whiskerColor - Line color used for whiskers\r\n*       outlierLineColor - Outline color of outlier circles\r\n*       outlierFillColor - Fill color of the outlier circles\r\n*       spotRadius - Radius of outlier circles\r\n*       medianColor - Line color of the median line\r\n*       target - Draw a target cross hair at the supplied value (default undefined)\r\n*\r\n*\r\n*\r\n*   Examples:\r\n*   $('#sparkline1').sparkline(myvalues, { lineColor: '#f00', fillColor: false });\r\n*   $('.barsparks').sparkline('html', { type:'bar', height:'40px', barWidth:5 });\r\n*   $('#tristate').sparkline([1,1,-1,1,0,0,-1], { type:'tristate' }):\r\n*   $('#discrete').sparkline([1,3,4,5,5,3,4,5], { type:'discrete' });\r\n*   $('#bullet').sparkline([10,12,12,9,7], { type:'bullet' });\r\n*   $('#pie').sparkline([1,1,2], { type:'pie' });\r\n*/\r\n\r\n/*jslint regexp: true, browser: true, jquery: true, white: true, nomen: false, plusplus: false, maxerr: 500, indent: 4 */\r\n\r\n(function(document, Math, undefined) { // performance/minified-size optimization\r\n(function(factory) {\r\n    if(typeof define === 'function' && define.amd) {\r\n        define(['jquery'], factory);\r\n    } else if (jQuery && !jQuery.fn.sparkline) {\r\n        factory(jQuery);\r\n    }\r\n}\r\n(function($) {\r\n    'use strict';\r\n\r\n    var UNSET_OPTION = {},\r\n        getDefaults, createClass, SPFormat, clipval, quartile, normalizeValue, normalizeValues,\r\n        remove, isNumber, all, sum, addCSS, ensureArray, formatNumber, RangeMap,\r\n        MouseHandler, Tooltip, barHighlightMixin,\r\n        line, bar, tristate, discrete, bullet, pie, box, defaultStyles, initStyles,\r\n        VShape, VCanvas_base, VCanvas_canvas, VCanvas_vml, pending, shapeCount = 0;\r\n\r\n    /**\r\n     * Default configuration settings\r\n     */\r\n    getDefaults = function () {\r\n        return {\r\n            // Settings common to most/all chart types\r\n            common: {\r\n                type: 'line',\r\n                lineColor: '#00f',\r\n                fillColor: '#cdf',\r\n                defaultPixelsPerValue: 3,\r\n                width: 'auto',\r\n                height: 'auto',\r\n                composite: false,\r\n                tagValuesAttribute: 'values',\r\n                tagOptionsPrefix: 'spark',\r\n                enableTagOptions: false,\r\n                enableHighlight: true,\r\n                highlightLighten: 1.4,\r\n                tooltipSkipNull: true,\r\n                tooltipPrefix: '',\r\n                tooltipSuffix: '',\r\n                disableHiddenCheck: false,\r\n                numberFormatter: false,\r\n                numberDigitGroupCount: 3,\r\n                numberDigitGroupSep: ',',\r\n                numberDecimalMark: '.',\r\n                disableTooltips: false,\r\n                disableInteraction: false\r\n            },\r\n            // Defaults for line charts\r\n            line: {\r\n                spotColor: '#f80',\r\n                highlightSpotColor: '#5f5',\r\n                highlightLineColor: '#f22',\r\n                spotRadius: 1.5,\r\n                minSpotColor: '#f80',\r\n                maxSpotColor: '#f80',\r\n                lineWidth: 1,\r\n                normalRangeMin: undefined,\r\n                normalRangeMax: undefined,\r\n                normalRangeColor: '#ccc',\r\n                drawNormalOnTop: false,\r\n                chartRangeMin: undefined,\r\n                chartRangeMax: undefined,\r\n                chartRangeMinX: undefined,\r\n                chartRangeMaxX: undefined,\r\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{prefix}}{{y}}{{suffix}}')\r\n            },\r\n            // Defaults for bar charts\r\n            bar: {\r\n                barColor: '#3366cc',\r\n                negBarColor: '#f44',\r\n                stackedBarColor: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00',\r\n                    '#dd4477', '#0099c6', '#990099'],\r\n                zeroColor: undefined,\r\n                nullColor: undefined,\r\n                zeroAxis: true,\r\n                barWidth: 4,\r\n                barSpacing: 1,\r\n                chartRangeMax: undefined,\r\n                chartRangeMin: undefined,\r\n                chartRangeClip: false,\r\n                colorMap: undefined,\r\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{prefix}}{{value}}{{suffix}}')\r\n            },\r\n            // Defaults for tristate charts\r\n            tristate: {\r\n                barWidth: 4,\r\n                barSpacing: 1,\r\n                posBarColor: '#6f6',\r\n                negBarColor: '#f44',\r\n                zeroBarColor: '#999',\r\n                colorMap: {},\r\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{value:map}}'),\r\n                tooltipValueLookups: { map: { '-1': 'Loss', '0': 'Draw', '1': 'Win' } }\r\n            },\r\n            // Defaults for discrete charts\r\n            discrete: {\r\n                lineHeight: 'auto',\r\n                thresholdColor: undefined,\r\n                thresholdValue: 0,\r\n                chartRangeMax: undefined,\r\n                chartRangeMin: undefined,\r\n                chartRangeClip: false,\r\n                tooltipFormat: new SPFormat('{{prefix}}{{value}}{{suffix}}')\r\n            },\r\n            // Defaults for bullet charts\r\n            bullet: {\r\n                targetColor: '#f33',\r\n                targetWidth: 3, // width of the target bar in pixels\r\n                performanceColor: '#33f',\r\n                rangeColors: ['#d3dafe', '#a8b6ff', '#7f94ff'],\r\n                base: undefined, // set this to a number to change the base start number\r\n                tooltipFormat: new SPFormat('{{fieldkey:fields}} - {{value}}'),\r\n                tooltipValueLookups: { fields: {r: 'Range', p: 'Performance', t: 'Target'} }\r\n            },\r\n            // Defaults for pie charts\r\n            pie: {\r\n                offset: 0,\r\n                sliceColors: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00',\r\n                    '#dd4477', '#0099c6', '#990099'],\r\n                borderWidth: 0,\r\n                borderColor: '#000',\r\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{value}} ({{percent.1}}%)')\r\n            },\r\n            // Defaults for box plots\r\n            box: {\r\n                raw: false,\r\n                boxLineColor: '#000',\r\n                boxFillColor: '#cdf',\r\n                whiskerColor: '#000',\r\n                outlierLineColor: '#333',\r\n                outlierFillColor: '#fff',\r\n                medianColor: '#f00',\r\n                showOutliers: true,\r\n                outlierIQR: 1.5,\r\n                spotRadius: 1.5,\r\n                target: undefined,\r\n                targetColor: '#4a2',\r\n                chartRangeMax: undefined,\r\n                chartRangeMin: undefined,\r\n                tooltipFormat: new SPFormat('{{field:fields}}: {{value}}'),\r\n                tooltipFormatFieldlistKey: 'field',\r\n                tooltipValueLookups: { fields: { lq: 'Lower Quartile', med: 'Median',\r\n                    uq: 'Upper Quartile', lo: 'Left Outlier', ro: 'Right Outlier',\r\n                    lw: 'Left Whisker', rw: 'Right Whisker'} }\r\n            }\r\n        };\r\n    };\r\n\r\n    // You can have tooltips use a css class other than jqstooltip by specifying tooltipClassname\r\n    defaultStyles = '.jqstooltip { ' +\r\n            'position: absolute;' +\r\n            'left: 0px;' +\r\n            'top: 0px;' +\r\n            'visibility: hidden;' +\r\n            'background: rgb(0, 0, 0) transparent;' +\r\n            'background-color: rgba(0,0,0,0.6);' +\r\n            'filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);' +\r\n            '-ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)\";' +\r\n            'color: white;' +\r\n            'font: 10px arial, san serif;' +\r\n            'text-align: left;' +\r\n            'white-space: nowrap;' +\r\n            'padding: 5px;' +\r\n            'border: 1px solid white;' +\r\n            'z-index: 10000;' +\r\n            '}' +\r\n            '.jqsfield { ' +\r\n            'color: white;' +\r\n            'font: 10px arial, san serif;' +\r\n            'text-align: left;' +\r\n            '}';\r\n\r\n    /**\r\n     * Utilities\r\n     */\r\n\r\n    createClass = function (/* [baseclass, [mixin, ...]], definition */) {\r\n        var Class, args;\r\n        Class = function () {\r\n            this.init.apply(this, arguments);\r\n        };\r\n        if (arguments.length > 1) {\r\n            if (arguments[0]) {\r\n                Class.prototype = $.extend(new arguments[0](), arguments[arguments.length - 1]);\r\n                Class._super = arguments[0].prototype;\r\n            } else {\r\n                Class.prototype = arguments[arguments.length - 1];\r\n            }\r\n            if (arguments.length > 2) {\r\n                args = Array.prototype.slice.call(arguments, 1, -1);\r\n                args.unshift(Class.prototype);\r\n                $.extend.apply($, args);\r\n            }\r\n        } else {\r\n            Class.prototype = arguments[0];\r\n        }\r\n        Class.prototype.cls = Class;\r\n        return Class;\r\n    };\r\n\r\n    /**\r\n     * Wraps a format string for tooltips\r\n     * {{x}}\r\n     * {{x.2}\r\n     * {{x:months}}\r\n     */\r\n    $.SPFormatClass = SPFormat = createClass({\r\n        fre: /\\{\\{([\\w.]+?)(:(.+?))?\\}\\}/g,\r\n        precre: /(\\w+)\\.(\\d+)/,\r\n\r\n        init: function (format, fclass) {\r\n            this.format = format;\r\n            this.fclass = fclass;\r\n        },\r\n\r\n        render: function (fieldset, lookups, options) {\r\n            var self = this,\r\n                fields = fieldset,\r\n                match, token, lookupkey, fieldvalue, prec;\r\n            return this.format.replace(this.fre, function () {\r\n                var lookup;\r\n                token = arguments[1];\r\n                lookupkey = arguments[3];\r\n                match = self.precre.exec(token);\r\n                if (match) {\r\n                    prec = match[2];\r\n                    token = match[1];\r\n                } else {\r\n                    prec = false;\r\n                }\r\n                fieldvalue = fields[token];\r\n                if (fieldvalue === undefined) {\r\n                    return '';\r\n                }\r\n                if (lookupkey && lookups && lookups[lookupkey]) {\r\n                    lookup = lookups[lookupkey];\r\n                    if (lookup.get) { // RangeMap\r\n                        return lookups[lookupkey].get(fieldvalue) || fieldvalue;\r\n                    } else {\r\n                        return lookups[lookupkey][fieldvalue] || fieldvalue;\r\n                    }\r\n                }\r\n                if (isNumber(fieldvalue)) {\r\n                    if (options.get('numberFormatter')) {\r\n                        fieldvalue = options.get('numberFormatter')(fieldvalue);\r\n                    } else {\r\n                        fieldvalue = formatNumber(fieldvalue, prec,\r\n                            options.get('numberDigitGroupCount'),\r\n                            options.get('numberDigitGroupSep'),\r\n                            options.get('numberDecimalMark'));\r\n                    }\r\n                }\r\n                return fieldvalue;\r\n            });\r\n        }\r\n    });\r\n\r\n    // convience method to avoid needing the new operator\r\n    $.spformat = function(format, fclass) {\r\n        return new SPFormat(format, fclass);\r\n    };\r\n\r\n    clipval = function (val, min, max) {\r\n        if (val < min) {\r\n            return min;\r\n        }\r\n        if (val > max) {\r\n            return max;\r\n        }\r\n        return val;\r\n    };\r\n\r\n    quartile = function (values, q) {\r\n        var vl;\r\n        if (q === 2) {\r\n            vl = Math.floor(values.length / 2);\r\n            return values.length % 2 ? values[vl] : (values[vl-1] + values[vl]) / 2;\r\n        } else {\r\n            if (values.length % 2 ) { // odd\r\n                vl = (values.length * q + q) / 4;\r\n                return vl % 1 ? (values[Math.floor(vl)] + values[Math.floor(vl) - 1]) / 2 : values[vl-1];\r\n            } else { //even\r\n                vl = (values.length * q + 2) / 4;\r\n                return vl % 1 ? (values[Math.floor(vl)] + values[Math.floor(vl) - 1]) / 2 :  values[vl-1];\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    normalizeValue = function (val) {\r\n        var nf;\r\n        switch (val) {\r\n            case 'undefined':\r\n                val = undefined;\r\n                break;\r\n            case 'null':\r\n                val = null;\r\n                break;\r\n            case 'true':\r\n                val = true;\r\n                break;\r\n            case 'false':\r\n                val = false;\r\n                break;\r\n            default:\r\n                nf = parseFloat(val);\r\n                if (val == nf) {\r\n                    val = nf;\r\n                }\r\n        }\r\n        return val;\r\n    };\r\n\r\n    normalizeValues = function (vals) {\r\n        var i, result = [];\r\n        for (i = vals.length; i--;) {\r\n            result[i] = normalizeValue(vals[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    remove = function (vals, filter) {\r\n        var i, vl, result = [];\r\n        for (i = 0, vl = vals.length; i < vl; i++) {\r\n            if (vals[i] !== filter) {\r\n                result.push(vals[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    isNumber = function (num) {\r\n        return !isNaN(parseFloat(num)) && isFinite(num);\r\n    };\r\n\r\n    formatNumber = function (num, prec, groupsize, groupsep, decsep) {\r\n        var p, i;\r\n        num = (prec === false ? parseFloat(num).toString() : num.toFixed(prec)).split('');\r\n        p = (p = $.inArray('.', num)) < 0 ? num.length : p;\r\n        if (p < num.length) {\r\n            num[p] = decsep;\r\n        }\r\n        for (i = p - groupsize; i > 0; i -= groupsize) {\r\n            num.splice(i, 0, groupsep);\r\n        }\r\n        return num.join('');\r\n    };\r\n\r\n    // determine if all values of an array match a value\r\n    // returns true if the array is empty\r\n    all = function (val, arr, ignoreNull) {\r\n        var i;\r\n        for (i = arr.length; i--; ) {\r\n            if (ignoreNull && arr[i] === null) continue;\r\n            if (arr[i] !== val) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    // sums the numeric values in an array, ignoring other values\r\n    sum = function (vals) {\r\n        var total = 0, i;\r\n        for (i = vals.length; i--;) {\r\n            total += typeof vals[i] === 'number' ? vals[i] : 0;\r\n        }\r\n        return total;\r\n    };\r\n\r\n    ensureArray = function (val) {\r\n        return $.isArray(val) ? val : [val];\r\n    };\r\n\r\n    // http://paulirish.com/2008/bookmarklet-inject-new-css-rules/\r\n    addCSS = function(css) {\r\n        var tag;\r\n        //if ('\\v' == 'v') /* ie only */ {\r\n        if (document.createStyleSheet) {\r\n            document.createStyleSheet().cssText = css;\r\n        } else {\r\n            tag = document.createElement('style');\r\n            tag.type = 'text/css';\r\n            document.getElementsByTagName('head')[0].appendChild(tag);\r\n            tag[(typeof document.body.style.WebkitAppearance == 'string') /* webkit only */ ? 'innerText' : 'innerHTML'] = css;\r\n        }\r\n    };\r\n\r\n    // Provide a cross-browser interface to a few simple drawing primitives\r\n    $.fn.simpledraw = function (width, height, useExisting, interact) {\r\n        var target, mhandler;\r\n        if (useExisting && (target = this.data('_jqs_vcanvas'))) {\r\n            return target;\r\n        }\r\n\r\n        if ($.fn.sparkline.canvas === false) {\r\n            // We've already determined that neither Canvas nor VML are available\r\n            return false;\r\n\r\n        } else if ($.fn.sparkline.canvas === undefined) {\r\n            // No function defined yet -- need to see if we support Canvas or VML\r\n            var el = document.createElement('canvas');\r\n            if (!!(el.getContext && el.getContext('2d'))) {\r\n                // Canvas is available\r\n                $.fn.sparkline.canvas = function(width, height, target, interact) {\r\n                    return new VCanvas_canvas(width, height, target, interact);\r\n                };\r\n            } else if (document.namespaces && !document.namespaces.v) {\r\n                // VML is available\r\n                document.namespaces.add('v', 'urn:schemas-microsoft-com:vml', '#default#VML');\r\n                $.fn.sparkline.canvas = function(width, height, target, interact) {\r\n                    return new VCanvas_vml(width, height, target);\r\n                };\r\n            } else {\r\n                // Neither Canvas nor VML are available\r\n                $.fn.sparkline.canvas = false;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (width === undefined) {\r\n            width = $(this).innerWidth();\r\n        }\r\n        if (height === undefined) {\r\n            height = $(this).innerHeight();\r\n        }\r\n\r\n        target = $.fn.sparkline.canvas(width, height, this, interact);\r\n\r\n        mhandler = $(this).data('_jqs_mhandler');\r\n        if (mhandler) {\r\n            mhandler.registerCanvas(target);\r\n        }\r\n        return target;\r\n    };\r\n\r\n    $.fn.cleardraw = function () {\r\n        var target = this.data('_jqs_vcanvas');\r\n        if (target) {\r\n            target.reset();\r\n        }\r\n    };\r\n\r\n    $.RangeMapClass = RangeMap = createClass({\r\n        init: function (map) {\r\n            var key, range, rangelist = [];\r\n            for (key in map) {\r\n                if (map.hasOwnProperty(key) && typeof key === 'string' && key.indexOf(':') > -1) {\r\n                    range = key.split(':');\r\n                    range[0] = range[0].length === 0 ? -Infinity : parseFloat(range[0]);\r\n                    range[1] = range[1].length === 0 ? Infinity : parseFloat(range[1]);\r\n                    range[2] = map[key];\r\n                    rangelist.push(range);\r\n                }\r\n            }\r\n            this.map = map;\r\n            this.rangelist = rangelist || false;\r\n        },\r\n\r\n        get: function (value) {\r\n            var rangelist = this.rangelist,\r\n                i, range, result;\r\n            if ((result = this.map[value]) !== undefined) {\r\n                return result;\r\n            }\r\n            if (rangelist) {\r\n                for (i = rangelist.length; i--;) {\r\n                    range = rangelist[i];\r\n                    if (range[0] <= value && range[1] >= value) {\r\n                        return range[2];\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n    });\r\n\r\n    // Convenience function\r\n    $.range_map = function(map) {\r\n        return new RangeMap(map);\r\n    };\r\n\r\n    MouseHandler = createClass({\r\n        init: function (el, options) {\r\n            var $el = $(el);\r\n            this.$el = $el;\r\n            this.options = options;\r\n            this.currentPageX = 0;\r\n            this.currentPageY = 0;\r\n            this.el = el;\r\n            this.splist = [];\r\n            this.tooltip = null;\r\n            this.over = false;\r\n            this.displayTooltips = !options.get('disableTooltips');\r\n            this.highlightEnabled = !options.get('disableHighlight');\r\n        },\r\n\r\n        registerSparkline: function (sp) {\r\n            this.splist.push(sp);\r\n            if (this.over) {\r\n                this.updateDisplay();\r\n            }\r\n        },\r\n\r\n        registerCanvas: function (canvas) {\r\n            var $canvas = $(canvas.canvas);\r\n            this.canvas = canvas;\r\n            this.$canvas = $canvas;\r\n            $canvas.mouseenter($.proxy(this.mouseenter, this));\r\n            $canvas.mouseleave($.proxy(this.mouseleave, this));\r\n            $canvas.click($.proxy(this.mouseclick, this));\r\n        },\r\n\r\n        reset: function (removeTooltip) {\r\n            this.splist = [];\r\n            if (this.tooltip && removeTooltip) {\r\n                this.tooltip.remove();\r\n                this.tooltip = undefined;\r\n            }\r\n        },\r\n\r\n        mouseclick: function (e) {\r\n            var clickEvent = $.Event('sparklineClick');\r\n            clickEvent.originalEvent = e;\r\n            clickEvent.sparklines = this.splist;\r\n            this.$el.trigger(clickEvent);\r\n        },\r\n\r\n        mouseenter: function (e) {\r\n            $(document.body).unbind('mousemove.jqs');\r\n            $(document.body).bind('mousemove.jqs', $.proxy(this.mousemove, this));\r\n            this.over = true;\r\n            this.currentPageX = e.pageX;\r\n            this.currentPageY = e.pageY;\r\n            this.currentEl = e.target;\r\n            if (!this.tooltip && this.displayTooltips) {\r\n                this.tooltip = new Tooltip(this.options);\r\n                this.tooltip.updatePosition(e.pageX, e.pageY);\r\n            }\r\n            this.updateDisplay();\r\n        },\r\n\r\n        mouseleave: function () {\r\n            $(document.body).unbind('mousemove.jqs');\r\n            var splist = this.splist,\r\n                 spcount = splist.length,\r\n                 needsRefresh = false,\r\n                 sp, i;\r\n            this.over = false;\r\n            this.currentEl = null;\r\n\r\n            if (this.tooltip) {\r\n                this.tooltip.remove();\r\n                this.tooltip = null;\r\n            }\r\n\r\n            for (i = 0; i < spcount; i++) {\r\n                sp = splist[i];\r\n                if (sp.clearRegionHighlight()) {\r\n                    needsRefresh = true;\r\n                }\r\n            }\r\n\r\n            if (needsRefresh) {\r\n                this.canvas.render();\r\n            }\r\n        },\r\n\r\n        mousemove: function (e) {\r\n            this.currentPageX = e.pageX;\r\n            this.currentPageY = e.pageY;\r\n            this.currentEl = e.target;\r\n            if (this.tooltip) {\r\n                this.tooltip.updatePosition(e.pageX, e.pageY);\r\n            }\r\n            this.updateDisplay();\r\n        },\r\n\r\n        updateDisplay: function () {\r\n            var splist = this.splist,\r\n                 spcount = splist.length,\r\n                 needsRefresh = false,\r\n                 offset = this.$canvas.offset(),\r\n                 localX = this.currentPageX - offset.left,\r\n                 localY = this.currentPageY - offset.top,\r\n                 tooltiphtml, sp, i, result, changeEvent;\r\n            if (!this.over) {\r\n                return;\r\n            }\r\n            for (i = 0; i < spcount; i++) {\r\n                sp = splist[i];\r\n                result = sp.setRegionHighlight(this.currentEl, localX, localY);\r\n                if (result) {\r\n                    needsRefresh = true;\r\n                }\r\n            }\r\n            if (needsRefresh) {\r\n                changeEvent = $.Event('sparklineRegionChange');\r\n                changeEvent.sparklines = this.splist;\r\n                this.$el.trigger(changeEvent);\r\n                if (this.tooltip) {\r\n                    tooltiphtml = '';\r\n                    for (i = 0; i < spcount; i++) {\r\n                        sp = splist[i];\r\n                        tooltiphtml += sp.getCurrentRegionTooltip();\r\n                    }\r\n                    this.tooltip.setContent(tooltiphtml);\r\n                }\r\n                if (!this.disableHighlight) {\r\n                    this.canvas.render();\r\n                }\r\n            }\r\n            if (result === null) {\r\n                this.mouseleave();\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    Tooltip = createClass({\r\n        sizeStyle: 'position: static !important;' +\r\n            'display: block !important;' +\r\n            'visibility: hidden !important;' +\r\n            'float: left !important;',\r\n\r\n        init: function (options) {\r\n            var tooltipClassname = options.get('tooltipClassname', 'jqstooltip'),\r\n                sizetipStyle = this.sizeStyle,\r\n                offset;\r\n            this.container = options.get('tooltipContainer') || document.body;\r\n            this.tooltipOffsetX = options.get('tooltipOffsetX', 10);\r\n            this.tooltipOffsetY = options.get('tooltipOffsetY', 12);\r\n            // remove any previous lingering tooltip\r\n            $('#jqssizetip').remove();\r\n            $('#jqstooltip').remove();\r\n            this.sizetip = $('<div/>', {\r\n                id: 'jqssizetip',\r\n                style: sizetipStyle,\r\n                'class': tooltipClassname\r\n            });\r\n            this.tooltip = $('<div/>', {\r\n                id: 'jqstooltip',\r\n                'class': tooltipClassname\r\n            }).appendTo(this.container);\r\n            // account for the container's location\r\n            offset = this.tooltip.offset();\r\n            this.offsetLeft = offset.left;\r\n            this.offsetTop = offset.top;\r\n            this.hidden = true;\r\n            $(window).unbind('resize.jqs scroll.jqs');\r\n            $(window).bind('resize.jqs scroll.jqs', $.proxy(this.updateWindowDims, this));\r\n            this.updateWindowDims();\r\n        },\r\n\r\n        updateWindowDims: function () {\r\n            this.scrollTop = $(window).scrollTop();\r\n            this.scrollLeft = $(window).scrollLeft();\r\n            this.scrollRight = this.scrollLeft + $(window).width();\r\n            this.updatePosition();\r\n        },\r\n\r\n        getSize: function (content) {\r\n            this.sizetip.html(content).appendTo(this.container);\r\n            this.width = this.sizetip.width() + 1;\r\n            this.height = this.sizetip.height();\r\n            this.sizetip.remove();\r\n        },\r\n\r\n        setContent: function (content) {\r\n            if (!content) {\r\n                this.tooltip.css('visibility', 'hidden');\r\n                this.hidden = true;\r\n                return;\r\n            }\r\n            this.getSize(content);\r\n            this.tooltip.html(content)\r\n                .css({\r\n                    'width': this.width,\r\n                    'height': this.height,\r\n                    'visibility': 'visible'\r\n                });\r\n            if (this.hidden) {\r\n                this.hidden = false;\r\n                this.updatePosition();\r\n            }\r\n        },\r\n\r\n        updatePosition: function (x, y) {\r\n            if (x === undefined) {\r\n                if (this.mousex === undefined) {\r\n                    return;\r\n                }\r\n                x = this.mousex - this.offsetLeft;\r\n                y = this.mousey - this.offsetTop;\r\n\r\n            } else {\r\n                this.mousex = x = x - this.offsetLeft;\r\n                this.mousey = y = y - this.offsetTop;\r\n            }\r\n            if (!this.height || !this.width || this.hidden) {\r\n                return;\r\n            }\r\n\r\n            y -= this.height + this.tooltipOffsetY;\r\n            x += this.tooltipOffsetX;\r\n\r\n            if (y < this.scrollTop) {\r\n                y = this.scrollTop;\r\n            }\r\n            if (x < this.scrollLeft) {\r\n                x = this.scrollLeft;\r\n            } else if (x + this.width > this.scrollRight) {\r\n                x = this.scrollRight - this.width;\r\n            }\r\n\r\n            this.tooltip.css({\r\n                'left': x,\r\n                'top': y\r\n            });\r\n        },\r\n\r\n        remove: function () {\r\n            this.tooltip.remove();\r\n            this.sizetip.remove();\r\n            this.sizetip = this.tooltip = undefined;\r\n            $(window).unbind('resize.jqs scroll.jqs');\r\n        }\r\n    });\r\n\r\n    initStyles = function() {\r\n        addCSS(defaultStyles);\r\n    };\r\n\r\n    $(initStyles);\r\n\r\n    pending = [];\r\n    $.fn.sparkline = function (userValues, userOptions) {\r\n        return this.each(function () {\r\n            var options = new $.fn.sparkline.options(this, userOptions),\r\n                 $this = $(this),\r\n                 render, i;\r\n            render = function () {\r\n                var values, width, height, tmp, mhandler, sp, vals;\r\n                if (userValues === 'html' || userValues === undefined) {\r\n                    vals = this.getAttribute(options.get('tagValuesAttribute'));\r\n                    if (vals === undefined || vals === null) {\r\n                        vals = $this.html();\r\n                    }\r\n                    values = vals.replace(/(^\\s*<!--)|(-->\\s*$)|\\s+/g, '').split(',');\r\n                } else {\r\n                    values = userValues;\r\n                }\r\n\r\n                width = options.get('width') === 'auto' ? values.length * options.get('defaultPixelsPerValue') : options.get('width');\r\n                if (options.get('height') === 'auto') {\r\n                    if (!options.get('composite') || !$.data(this, '_jqs_vcanvas')) {\r\n                        // must be a better way to get the line height\r\n                        tmp = document.createElement('span');\r\n                        tmp.innerHTML = 'a';\r\n                        $this.html(tmp);\r\n                        height = $(tmp).innerHeight() || $(tmp).height();\r\n                        $(tmp).remove();\r\n                        tmp = null;\r\n                    }\r\n                } else {\r\n                    height = options.get('height');\r\n                }\r\n\r\n                if (!options.get('disableInteraction')) {\r\n                    mhandler = $.data(this, '_jqs_mhandler');\r\n                    if (!mhandler) {\r\n                        mhandler = new MouseHandler(this, options);\r\n                        $.data(this, '_jqs_mhandler', mhandler);\r\n                    } else if (!options.get('composite')) {\r\n                        mhandler.reset();\r\n                    }\r\n                } else {\r\n                    mhandler = false;\r\n                }\r\n\r\n                if (options.get('composite') && !$.data(this, '_jqs_vcanvas')) {\r\n                    if (!$.data(this, '_jqs_errnotify')) {\r\n                        alert('Attempted to attach a composite sparkline to an element with no existing sparkline');\r\n                        $.data(this, '_jqs_errnotify', true);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                sp = new $.fn.sparkline[options.get('type')](this, values, options, width, height);\r\n\r\n                sp.render();\r\n\r\n                if (mhandler) {\r\n                    mhandler.registerSparkline(sp);\r\n                }\r\n            };\r\n            if (($(this).html() && !options.get('disableHiddenCheck') && $(this).is(':hidden')) || !$(this).parents('body').length) {\r\n                if (!options.get('composite') && $.data(this, '_jqs_pending')) {\r\n                    // remove any existing references to the element\r\n                    for (i = pending.length; i; i--) {\r\n                        if (pending[i - 1][0] == this) {\r\n                            pending.splice(i - 1, 1);\r\n                        }\r\n                    }\r\n                }\r\n                pending.push([this, render]);\r\n                $.data(this, '_jqs_pending', true);\r\n            } else {\r\n                render.call(this);\r\n            }\r\n        });\r\n    };\r\n\r\n    $.fn.sparkline.defaults = getDefaults();\r\n\r\n\r\n    $.sparkline_display_visible = function () {\r\n        var el, i, pl;\r\n        var done = [];\r\n        for (i = 0, pl = pending.length; i < pl; i++) {\r\n            el = pending[i][0];\r\n            if ($(el).is(':visible') && !$(el).parents().is(':hidden')) {\r\n                pending[i][1].call(el);\r\n                $.data(pending[i][0], '_jqs_pending', false);\r\n                done.push(i);\r\n            } else if (!$(el).closest('html').length && !$.data(el, '_jqs_pending')) {\r\n                // element has been inserted and removed from the DOM\r\n                // If it was not yet inserted into the dom then the .data request\r\n                // will return true.\r\n                // removing from the dom causes the data to be removed.\r\n                $.data(pending[i][0], '_jqs_pending', false);\r\n                done.push(i);\r\n            }\r\n        }\r\n        for (i = done.length; i; i--) {\r\n            pending.splice(done[i - 1], 1);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * User option handler\r\n     */\r\n    $.fn.sparkline.options = createClass({\r\n        init: function (tag, userOptions) {\r\n            var extendedOptions, defaults, base, tagOptionType;\r\n            this.userOptions = userOptions = userOptions || {};\r\n            this.tag = tag;\r\n            this.tagValCache = {};\r\n            defaults = $.fn.sparkline.defaults;\r\n            base = defaults.common;\r\n            this.tagOptionsPrefix = userOptions.enableTagOptions && (userOptions.tagOptionsPrefix || base.tagOptionsPrefix);\r\n\r\n            tagOptionType = this.getTagSetting('type');\r\n            if (tagOptionType === UNSET_OPTION) {\r\n                extendedOptions = defaults[userOptions.type || base.type];\r\n            } else {\r\n                extendedOptions = defaults[tagOptionType];\r\n            }\r\n            this.mergedOptions = $.extend({}, base, extendedOptions, userOptions);\r\n        },\r\n\r\n\r\n        getTagSetting: function (key) {\r\n            var prefix = this.tagOptionsPrefix,\r\n                val, i, pairs, keyval;\r\n            if (prefix === false || prefix === undefined) {\r\n                return UNSET_OPTION;\r\n            }\r\n            if (this.tagValCache.hasOwnProperty(key)) {\r\n                val = this.tagValCache.key;\r\n            } else {\r\n                val = this.tag.getAttribute(prefix + key);\r\n                if (val === undefined || val === null) {\r\n                    val = UNSET_OPTION;\r\n                } else if (val.substr(0, 1) === '[') {\r\n                    val = val.substr(1, val.length - 2).split(',');\r\n                    for (i = val.length; i--;) {\r\n                        val[i] = normalizeValue(val[i].replace(/(^\\s*)|(\\s*$)/g, ''));\r\n                    }\r\n                } else if (val.substr(0, 1) === '{') {\r\n                    pairs = val.substr(1, val.length - 2).split(',');\r\n                    val = {};\r\n                    for (i = pairs.length; i--;) {\r\n                        keyval = pairs[i].split(':', 2);\r\n                        val[keyval[0].replace(/(^\\s*)|(\\s*$)/g, '')] = normalizeValue(keyval[1].replace(/(^\\s*)|(\\s*$)/g, ''));\r\n                    }\r\n                } else {\r\n                    val = normalizeValue(val);\r\n                }\r\n                this.tagValCache.key = val;\r\n            }\r\n            return val;\r\n        },\r\n\r\n        get: function (key, defaultval) {\r\n            var tagOption = this.getTagSetting(key),\r\n                result;\r\n            if (tagOption !== UNSET_OPTION) {\r\n                return tagOption;\r\n            }\r\n            return (result = this.mergedOptions[key]) === undefined ? defaultval : result;\r\n        }\r\n    });\r\n\r\n\r\n    $.fn.sparkline._base = createClass({\r\n        disabled: false,\r\n\r\n        init: function (el, values, options, width, height) {\r\n            this.el = el;\r\n            this.$el = $(el);\r\n            this.values = values;\r\n            this.options = options;\r\n            this.width = width;\r\n            this.height = height;\r\n            this.currentRegion = undefined;\r\n        },\r\n\r\n        /**\r\n         * Setup the canvas\r\n         */\r\n        initTarget: function () {\r\n            var interactive = !this.options.get('disableInteraction');\r\n            if (!(this.target = this.$el.simpledraw(this.width, this.height, this.options.get('composite'), interactive))) {\r\n                this.disabled = true;\r\n            } else {\r\n                this.canvasWidth = this.target.pixelWidth;\r\n                this.canvasHeight = this.target.pixelHeight;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Actually render the chart to the canvas\r\n         */\r\n        render: function () {\r\n            if (this.disabled) {\r\n                this.el.innerHTML = '';\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Return a region id for a given x/y co-ordinate\r\n         */\r\n        getRegion: function (x, y) {\r\n        },\r\n\r\n        /**\r\n         * Highlight an item based on the moused-over x,y co-ordinate\r\n         */\r\n        setRegionHighlight: function (el, x, y) {\r\n            var currentRegion = this.currentRegion,\r\n                highlightEnabled = !this.options.get('disableHighlight'),\r\n                newRegion;\r\n            if (x > this.canvasWidth || y > this.canvasHeight || x < 0 || y < 0) {\r\n                return null;\r\n            }\r\n            newRegion = this.getRegion(el, x, y);\r\n            if (currentRegion !== newRegion) {\r\n                if (currentRegion !== undefined && highlightEnabled) {\r\n                    this.removeHighlight();\r\n                }\r\n                this.currentRegion = newRegion;\r\n                if (newRegion !== undefined && highlightEnabled) {\r\n                    this.renderHighlight();\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Reset any currently highlighted item\r\n         */\r\n        clearRegionHighlight: function () {\r\n            if (this.currentRegion !== undefined) {\r\n                this.removeHighlight();\r\n                this.currentRegion = undefined;\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        renderHighlight: function () {\r\n            this.changeHighlight(true);\r\n        },\r\n\r\n        removeHighlight: function () {\r\n            this.changeHighlight(false);\r\n        },\r\n\r\n        changeHighlight: function (highlight)  {},\r\n\r\n        /**\r\n         * Fetch the HTML to display as a tooltip\r\n         */\r\n        getCurrentRegionTooltip: function () {\r\n            var options = this.options,\r\n                header = '',\r\n                entries = [],\r\n                fields, formats, formatlen, fclass, text, i,\r\n                showFields, showFieldsKey, newFields, fv,\r\n                formatter, format, fieldlen, j;\r\n            if (this.currentRegion === undefined) {\r\n                return '';\r\n            }\r\n            fields = this.getCurrentRegionFields();\r\n            formatter = options.get('tooltipFormatter');\r\n            if (formatter) {\r\n                return formatter(this, options, fields);\r\n            }\r\n            if (options.get('tooltipChartTitle')) {\r\n                header += '<div class=\"jqs jqstitle\">' + options.get('tooltipChartTitle') + '</div>\\n';\r\n            }\r\n            formats = this.options.get('tooltipFormat');\r\n            if (!formats) {\r\n                return '';\r\n            }\r\n            if (!$.isArray(formats)) {\r\n                formats = [formats];\r\n            }\r\n            if (!$.isArray(fields)) {\r\n                fields = [fields];\r\n            }\r\n            showFields = this.options.get('tooltipFormatFieldlist');\r\n            showFieldsKey = this.options.get('tooltipFormatFieldlistKey');\r\n            if (showFields && showFieldsKey) {\r\n                // user-selected ordering of fields\r\n                newFields = [];\r\n                for (i = fields.length; i--;) {\r\n                    fv = fields[i][showFieldsKey];\r\n                    if ((j = $.inArray(fv, showFields)) != -1) {\r\n                        newFields[j] = fields[i];\r\n                    }\r\n                }\r\n                fields = newFields;\r\n            }\r\n            formatlen = formats.length;\r\n            fieldlen = fields.length;\r\n            for (i = 0; i < formatlen; i++) {\r\n                format = formats[i];\r\n                if (typeof format === 'string') {\r\n                    format = new SPFormat(format);\r\n                }\r\n                fclass = format.fclass || 'jqsfield';\r\n                for (j = 0; j < fieldlen; j++) {\r\n                    if (!fields[j].isNull || !options.get('tooltipSkipNull')) {\r\n                        $.extend(fields[j], {\r\n                            prefix: options.get('tooltipPrefix'),\r\n                            suffix: options.get('tooltipSuffix')\r\n                        });\r\n                        text = format.render(fields[j], options.get('tooltipValueLookups'), options);\r\n                        entries.push('<div class=\"' + fclass + '\">' + text + '</div>');\r\n                    }\r\n                }\r\n            }\r\n            if (entries.length) {\r\n                return header + entries.join('\\n');\r\n            }\r\n            return '';\r\n        },\r\n\r\n        getCurrentRegionFields: function () {},\r\n\r\n        calcHighlightColor: function (color, options) {\r\n            var highlightColor = options.get('highlightColor'),\r\n                lighten = options.get('highlightLighten'),\r\n                parse, mult, rgbnew, i;\r\n            if (highlightColor) {\r\n                return highlightColor;\r\n            }\r\n            if (lighten) {\r\n                // extract RGB values\r\n                parse = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(color) || /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color);\r\n                if (parse) {\r\n                    rgbnew = [];\r\n                    mult = color.length === 4 ? 16 : 1;\r\n                    for (i = 0; i < 3; i++) {\r\n                        rgbnew[i] = clipval(Math.round(parseInt(parse[i + 1], 16) * mult * lighten), 0, 255);\r\n                    }\r\n                    return 'rgb(' + rgbnew.join(',') + ')';\r\n                }\r\n\r\n            }\r\n            return color;\r\n        }\r\n\r\n    });\r\n\r\n    barHighlightMixin = {\r\n        changeHighlight: function (highlight) {\r\n            var currentRegion = this.currentRegion,\r\n                target = this.target,\r\n                shapeids = this.regionShapes[currentRegion],\r\n                newShapes;\r\n            // will be null if the region value was null\r\n            if (shapeids) {\r\n                newShapes = this.renderRegion(currentRegion, highlight);\r\n                if ($.isArray(newShapes) || $.isArray(shapeids)) {\r\n                    target.replaceWithShapes(shapeids, newShapes);\r\n                    this.regionShapes[currentRegion] = $.map(newShapes, function (newShape) {\r\n                        return newShape.id;\r\n                    });\r\n                } else {\r\n                    target.replaceWithShape(shapeids, newShapes);\r\n                    this.regionShapes[currentRegion] = newShapes.id;\r\n                }\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            var values = this.values,\r\n                target = this.target,\r\n                regionShapes = this.regionShapes,\r\n                shapes, ids, i, j;\r\n\r\n            if (!this.cls._super.render.call(this)) {\r\n                return;\r\n            }\r\n            for (i = values.length; i--;) {\r\n                shapes = this.renderRegion(i);\r\n                if (shapes) {\r\n                    if ($.isArray(shapes)) {\r\n                        ids = [];\r\n                        for (j = shapes.length; j--;) {\r\n                            shapes[j].append();\r\n                            ids.push(shapes[j].id);\r\n                        }\r\n                        regionShapes[i] = ids;\r\n                    } else {\r\n                        shapes.append();\r\n                        regionShapes[i] = shapes.id; // store just the shapeid\r\n                    }\r\n                } else {\r\n                    // null value\r\n                    regionShapes[i] = null;\r\n                }\r\n            }\r\n            target.render();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Line charts\r\n     */\r\n    $.fn.sparkline.line = line = createClass($.fn.sparkline._base, {\r\n        type: 'line',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            line._super.init.call(this, el, values, options, width, height);\r\n            this.vertices = [];\r\n            this.regionMap = [];\r\n            this.xvalues = [];\r\n            this.yvalues = [];\r\n            this.yminmax = [];\r\n            this.hightlightSpotId = null;\r\n            this.lastShapeId = null;\r\n            this.initTarget();\r\n        },\r\n\r\n        getRegion: function (el, x, y) {\r\n            var i,\r\n                regionMap = this.regionMap; // maps regions to value positions\r\n            for (i = regionMap.length; i--;) {\r\n                if (regionMap[i] !== null && x >= regionMap[i][0] && x <= regionMap[i][1]) {\r\n                    return regionMap[i][2];\r\n                }\r\n            }\r\n            return undefined;\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var currentRegion = this.currentRegion;\r\n            return {\r\n                isNull: this.yvalues[currentRegion] === null,\r\n                x: this.xvalues[currentRegion],\r\n                y: this.yvalues[currentRegion],\r\n                color: this.options.get('lineColor'),\r\n                fillColor: this.options.get('fillColor'),\r\n                offset: currentRegion\r\n            };\r\n        },\r\n\r\n        renderHighlight: function () {\r\n            var currentRegion = this.currentRegion,\r\n                target = this.target,\r\n                vertex = this.vertices[currentRegion],\r\n                options = this.options,\r\n                spotRadius = options.get('spotRadius'),\r\n                highlightSpotColor = options.get('highlightSpotColor'),\r\n                highlightLineColor = options.get('highlightLineColor'),\r\n                highlightSpot, highlightLine;\r\n\r\n            if (!vertex) {\r\n                return;\r\n            }\r\n            if (spotRadius && highlightSpotColor) {\r\n                highlightSpot = target.drawCircle(vertex[0], vertex[1],\r\n                    spotRadius, undefined, highlightSpotColor);\r\n                this.highlightSpotId = highlightSpot.id;\r\n                target.insertAfterShape(this.lastShapeId, highlightSpot);\r\n            }\r\n            if (highlightLineColor) {\r\n                highlightLine = target.drawLine(vertex[0], this.canvasTop, vertex[0],\r\n                    this.canvasTop + this.canvasHeight, highlightLineColor);\r\n                this.highlightLineId = highlightLine.id;\r\n                target.insertAfterShape(this.lastShapeId, highlightLine);\r\n            }\r\n        },\r\n\r\n        removeHighlight: function () {\r\n            var target = this.target;\r\n            if (this.highlightSpotId) {\r\n                target.removeShapeId(this.highlightSpotId);\r\n                this.highlightSpotId = null;\r\n            }\r\n            if (this.highlightLineId) {\r\n                target.removeShapeId(this.highlightLineId);\r\n                this.highlightLineId = null;\r\n            }\r\n        },\r\n\r\n        scanValues: function () {\r\n            var values = this.values,\r\n                valcount = values.length,\r\n                xvalues = this.xvalues,\r\n                yvalues = this.yvalues,\r\n                yminmax = this.yminmax,\r\n                i, val, isStr, isArray, sp;\r\n            for (i = 0; i < valcount; i++) {\r\n                val = values[i];\r\n                isStr = typeof(values[i]) === 'string';\r\n                isArray = typeof(values[i]) === 'object' && values[i] instanceof Array;\r\n                sp = isStr && values[i].split(':');\r\n                if (isStr && sp.length === 2) { // x:y\r\n                    xvalues.push(Number(sp[0]));\r\n                    yvalues.push(Number(sp[1]));\r\n                    yminmax.push(Number(sp[1]));\r\n                } else if (isArray) {\r\n                    xvalues.push(val[0]);\r\n                    yvalues.push(val[1]);\r\n                    yminmax.push(val[1]);\r\n                } else {\r\n                    xvalues.push(i);\r\n                    if (values[i] === null || values[i] === 'null') {\r\n                        yvalues.push(null);\r\n                    } else {\r\n                        yvalues.push(Number(val));\r\n                        yminmax.push(Number(val));\r\n                    }\r\n                }\r\n            }\r\n            if (this.options.get('xvalues')) {\r\n                xvalues = this.options.get('xvalues');\r\n            }\r\n\r\n            this.maxy = this.maxyorg = Math.max.apply(Math, yminmax);\r\n            this.miny = this.minyorg = Math.min.apply(Math, yminmax);\r\n\r\n            this.maxx = Math.max.apply(Math, xvalues);\r\n            this.minx = Math.min.apply(Math, xvalues);\r\n\r\n            this.xvalues = xvalues;\r\n            this.yvalues = yvalues;\r\n            this.yminmax = yminmax;\r\n\r\n        },\r\n\r\n        processRangeOptions: function () {\r\n            var options = this.options,\r\n                normalRangeMin = options.get('normalRangeMin'),\r\n                normalRangeMax = options.get('normalRangeMax');\r\n\r\n            if (normalRangeMin !== undefined) {\r\n                if (normalRangeMin < this.miny) {\r\n                    this.miny = normalRangeMin;\r\n                }\r\n                if (normalRangeMax > this.maxy) {\r\n                    this.maxy = normalRangeMax;\r\n                }\r\n            }\r\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < this.miny)) {\r\n                this.miny = options.get('chartRangeMin');\r\n            }\r\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > this.maxy)) {\r\n                this.maxy = options.get('chartRangeMax');\r\n            }\r\n            if (options.get('chartRangeMinX') !== undefined && (options.get('chartRangeClipX') || options.get('chartRangeMinX') < this.minx)) {\r\n                this.minx = options.get('chartRangeMinX');\r\n            }\r\n            if (options.get('chartRangeMaxX') !== undefined && (options.get('chartRangeClipX') || options.get('chartRangeMaxX') > this.maxx)) {\r\n                this.maxx = options.get('chartRangeMaxX');\r\n            }\r\n\r\n        },\r\n\r\n        drawNormalRange: function (canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey) {\r\n            var normalRangeMin = this.options.get('normalRangeMin'),\r\n                normalRangeMax = this.options.get('normalRangeMax'),\r\n                ytop = canvasTop + Math.round(canvasHeight - (canvasHeight * ((normalRangeMax - this.miny) / rangey))),\r\n                height = Math.round((canvasHeight * (normalRangeMax - normalRangeMin)) / rangey);\r\n            this.target.drawRect(canvasLeft, ytop, canvasWidth, height, undefined, this.options.get('normalRangeColor')).append();\r\n        },\r\n\r\n        render: function () {\r\n            var options = this.options,\r\n                target = this.target,\r\n                canvasWidth = this.canvasWidth,\r\n                canvasHeight = this.canvasHeight,\r\n                vertices = this.vertices,\r\n                spotRadius = options.get('spotRadius'),\r\n                regionMap = this.regionMap,\r\n                rangex, rangey, yvallast,\r\n                canvasTop, canvasLeft,\r\n                vertex, path, paths, x, y, xnext, xpos, xposnext,\r\n                last, next, yvalcount, lineShapes, fillShapes, plen,\r\n                valueSpots, hlSpotsEnabled, color, xvalues, yvalues, i;\r\n\r\n            if (!line._super.render.call(this)) {\r\n                return;\r\n            }\r\n\r\n            this.scanValues();\r\n            this.processRangeOptions();\r\n\r\n            xvalues = this.xvalues;\r\n            yvalues = this.yvalues;\r\n\r\n            if (!this.yminmax.length || this.yvalues.length < 2) {\r\n                // empty or all null valuess\r\n                return;\r\n            }\r\n\r\n            canvasTop = canvasLeft = 0;\r\n\r\n            rangex = this.maxx - this.minx === 0 ? 1 : this.maxx - this.minx;\r\n            rangey = this.maxy - this.miny === 0 ? 1 : this.maxy - this.miny;\r\n            yvallast = this.yvalues.length - 1;\r\n\r\n            if (spotRadius && (canvasWidth < (spotRadius * 4) || canvasHeight < (spotRadius * 4))) {\r\n                spotRadius = 0;\r\n            }\r\n            if (spotRadius) {\r\n                // adjust the canvas size as required so that spots will fit\r\n                hlSpotsEnabled = options.get('highlightSpotColor') &&  !options.get('disableInteraction');\r\n                if (hlSpotsEnabled || options.get('minSpotColor') || (options.get('spotColor') && yvalues[yvallast] === this.miny)) {\r\n                    canvasHeight -= Math.ceil(spotRadius);\r\n                }\r\n                if (hlSpotsEnabled || options.get('maxSpotColor') || (options.get('spotColor') && yvalues[yvallast] === this.maxy)) {\r\n                    canvasHeight -= Math.ceil(spotRadius);\r\n                    canvasTop += Math.ceil(spotRadius);\r\n                }\r\n                if (hlSpotsEnabled ||\r\n                     ((options.get('minSpotColor') || options.get('maxSpotColor')) && (yvalues[0] === this.miny || yvalues[0] === this.maxy))) {\r\n                    canvasLeft += Math.ceil(spotRadius);\r\n                    canvasWidth -= Math.ceil(spotRadius);\r\n                }\r\n                if (hlSpotsEnabled || options.get('spotColor') ||\r\n                    (options.get('minSpotColor') || options.get('maxSpotColor') &&\r\n                        (yvalues[yvallast] === this.miny || yvalues[yvallast] === this.maxy))) {\r\n                    canvasWidth -= Math.ceil(spotRadius);\r\n                }\r\n            }\r\n\r\n\r\n            canvasHeight--;\r\n\r\n            if (options.get('normalRangeMin') !== undefined && !options.get('drawNormalOnTop')) {\r\n                this.drawNormalRange(canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey);\r\n            }\r\n\r\n            path = [];\r\n            paths = [path];\r\n            last = next = null;\r\n            yvalcount = yvalues.length;\r\n            for (i = 0; i < yvalcount; i++) {\r\n                x = xvalues[i];\r\n                xnext = xvalues[i + 1];\r\n                y = yvalues[i];\r\n                xpos = canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex));\r\n                xposnext = i < yvalcount - 1 ? canvasLeft + Math.round((xnext - this.minx) * (canvasWidth / rangex)) : canvasWidth;\r\n                next = xpos + ((xposnext - xpos) / 2);\r\n                regionMap[i] = [last || 0, next, i];\r\n                last = next;\r\n                if (y === null) {\r\n                    if (i) {\r\n                        if (yvalues[i - 1] !== null) {\r\n                            path = [];\r\n                            paths.push(path);\r\n                        }\r\n                        vertices.push(null);\r\n                    }\r\n                } else {\r\n                    if (y < this.miny) {\r\n                        y = this.miny;\r\n                    }\r\n                    if (y > this.maxy) {\r\n                        y = this.maxy;\r\n                    }\r\n                    if (!path.length) {\r\n                        // previous value was null\r\n                        path.push([xpos, canvasTop + canvasHeight]);\r\n                    }\r\n                    vertex = [xpos, canvasTop + Math.round(canvasHeight - (canvasHeight * ((y - this.miny) / rangey)))];\r\n                    path.push(vertex);\r\n                    vertices.push(vertex);\r\n                }\r\n            }\r\n\r\n            lineShapes = [];\r\n            fillShapes = [];\r\n            plen = paths.length;\r\n            for (i = 0; i < plen; i++) {\r\n                path = paths[i];\r\n                if (path.length) {\r\n                    if (options.get('fillColor')) {\r\n                        path.push([path[path.length - 1][0], (canvasTop + canvasHeight)]);\r\n                        fillShapes.push(path.slice(0));\r\n                        path.pop();\r\n                    }\r\n                    // if there's only a single point in this path, then we want to display it\r\n                    // as a vertical line which means we keep path[0]  as is\r\n                    if (path.length > 2) {\r\n                        // else we want the first value\r\n                        path[0] = [path[0][0], path[1][1]];\r\n                    }\r\n                    lineShapes.push(path);\r\n                }\r\n            }\r\n\r\n            // draw the fill first, then optionally the normal range, then the line on top of that\r\n            plen = fillShapes.length;\r\n            for (i = 0; i < plen; i++) {\r\n                target.drawShape(fillShapes[i],\r\n                    options.get('fillColor'), options.get('fillColor')).append();\r\n            }\r\n\r\n            if (options.get('normalRangeMin') !== undefined && options.get('drawNormalOnTop')) {\r\n                this.drawNormalRange(canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey);\r\n            }\r\n\r\n            plen = lineShapes.length;\r\n            for (i = 0; i < plen; i++) {\r\n                target.drawShape(lineShapes[i], options.get('lineColor'), undefined,\r\n                    options.get('lineWidth')).append();\r\n            }\r\n\r\n            if (spotRadius && options.get('valueSpots')) {\r\n                valueSpots = options.get('valueSpots');\r\n                if (valueSpots.get === undefined) {\r\n                    valueSpots = new RangeMap(valueSpots);\r\n                }\r\n                for (i = 0; i < yvalcount; i++) {\r\n                    color = valueSpots.get(yvalues[i]);\r\n                    if (color) {\r\n                        target.drawCircle(canvasLeft + Math.round((xvalues[i] - this.minx) * (canvasWidth / rangex)),\r\n                            canvasTop + Math.round(canvasHeight - (canvasHeight * ((yvalues[i] - this.miny) / rangey))),\r\n                            spotRadius, undefined,\r\n                            color).append();\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (spotRadius && options.get('spotColor') && yvalues[yvallast] !== null) {\r\n                target.drawCircle(canvasLeft + Math.round((xvalues[xvalues.length - 1] - this.minx) * (canvasWidth / rangex)),\r\n                    canvasTop + Math.round(canvasHeight - (canvasHeight * ((yvalues[yvallast] - this.miny) / rangey))),\r\n                    spotRadius, undefined,\r\n                    options.get('spotColor')).append();\r\n            }\r\n            if (this.maxy !== this.minyorg) {\r\n                if (spotRadius && options.get('minSpotColor')) {\r\n                    x = xvalues[$.inArray(this.minyorg, yvalues)];\r\n                    target.drawCircle(canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex)),\r\n                        canvasTop + Math.round(canvasHeight - (canvasHeight * ((this.minyorg - this.miny) / rangey))),\r\n                        spotRadius, undefined,\r\n                        options.get('minSpotColor')).append();\r\n                }\r\n                if (spotRadius && options.get('maxSpotColor')) {\r\n                    x = xvalues[$.inArray(this.maxyorg, yvalues)];\r\n                    target.drawCircle(canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex)),\r\n                        canvasTop + Math.round(canvasHeight - (canvasHeight * ((this.maxyorg - this.miny) / rangey))),\r\n                        spotRadius, undefined,\r\n                        options.get('maxSpotColor')).append();\r\n                }\r\n            }\r\n\r\n            this.lastShapeId = target.getLastShapeId();\r\n            this.canvasTop = canvasTop;\r\n            target.render();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Bar charts\r\n     */\r\n    $.fn.sparkline.bar = bar = createClass($.fn.sparkline._base, barHighlightMixin, {\r\n        type: 'bar',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            var barWidth = parseInt(options.get('barWidth'), 10),\r\n                barSpacing = parseInt(options.get('barSpacing'), 10),\r\n                chartRangeMin = options.get('chartRangeMin'),\r\n                chartRangeMax = options.get('chartRangeMax'),\r\n                chartRangeClip = options.get('chartRangeClip'),\r\n                stackMin = Infinity,\r\n                stackMax = -Infinity,\r\n                isStackString, groupMin, groupMax, stackRanges,\r\n                numValues, i, vlen, range, zeroAxis, xaxisOffset, min, max, clipMin, clipMax,\r\n                stacked, vlist, j, slen, svals, val, yoffset, yMaxCalc, canvasHeightEf;\r\n            bar._super.init.call(this, el, values, options, width, height);\r\n\r\n            // scan values to determine whether to stack bars\r\n            for (i = 0, vlen = values.length; i < vlen; i++) {\r\n                val = values[i];\r\n                isStackString = typeof(val) === 'string' && val.indexOf(':') > -1;\r\n                if (isStackString || $.isArray(val)) {\r\n                    stacked = true;\r\n                    if (isStackString) {\r\n                        val = values[i] = normalizeValues(val.split(':'));\r\n                    }\r\n                    val = remove(val, null); // min/max will treat null as zero\r\n                    groupMin = Math.min.apply(Math, val);\r\n                    groupMax = Math.max.apply(Math, val);\r\n                    if (groupMin < stackMin) {\r\n                        stackMin = groupMin;\r\n                    }\r\n                    if (groupMax > stackMax) {\r\n                        stackMax = groupMax;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.stacked = stacked;\r\n            this.regionShapes = {};\r\n            this.barWidth = barWidth;\r\n            this.barSpacing = barSpacing;\r\n            this.totalBarWidth = barWidth + barSpacing;\r\n            this.width = width = (values.length * barWidth) + ((values.length - 1) * barSpacing);\r\n\r\n            this.initTarget();\r\n\r\n            if (chartRangeClip) {\r\n                clipMin = chartRangeMin === undefined ? -Infinity : chartRangeMin;\r\n                clipMax = chartRangeMax === undefined ? Infinity : chartRangeMax;\r\n            }\r\n\r\n            numValues = [];\r\n            stackRanges = stacked ? [] : numValues;\r\n            var stackTotals = [];\r\n            var stackRangesNeg = [];\r\n            for (i = 0, vlen = values.length; i < vlen; i++) {\r\n                if (stacked) {\r\n                    vlist = values[i];\r\n                    values[i] = svals = [];\r\n                    stackTotals[i] = 0;\r\n                    stackRanges[i] = stackRangesNeg[i] = 0;\r\n                    for (j = 0, slen = vlist.length; j < slen; j++) {\r\n                        val = svals[j] = chartRangeClip ? clipval(vlist[j], clipMin, clipMax) : vlist[j];\r\n                        if (val !== null) {\r\n                            if (val > 0) {\r\n                                stackTotals[i] += val;\r\n                            }\r\n                            if (stackMin < 0 && stackMax > 0) {\r\n                                if (val < 0) {\r\n                                    stackRangesNeg[i] += Math.abs(val);\r\n                                } else {\r\n                                    stackRanges[i] += val;\r\n                                }\r\n                            } else {\r\n                                stackRanges[i] += Math.abs(val - (val < 0 ? stackMax : stackMin));\r\n                            }\r\n                            numValues.push(val);\r\n                        }\r\n                    }\r\n                } else {\r\n                    val = chartRangeClip ? clipval(values[i], clipMin, clipMax) : values[i];\r\n                    val = values[i] = normalizeValue(val);\r\n                    if (val !== null) {\r\n                        numValues.push(val);\r\n                    }\r\n                }\r\n            }\r\n            this.max = max = Math.max.apply(Math, numValues);\r\n            this.min = min = Math.min.apply(Math, numValues);\r\n            this.stackMax = stackMax = stacked ? Math.max.apply(Math, stackTotals) : max;\r\n            this.stackMin = stackMin = stacked ? Math.min.apply(Math, numValues) : min;\r\n\r\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < min)) {\r\n                min = options.get('chartRangeMin');\r\n            }\r\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > max)) {\r\n                max = options.get('chartRangeMax');\r\n            }\r\n\r\n            this.zeroAxis = zeroAxis = options.get('zeroAxis', true);\r\n            if (min <= 0 && max >= 0 && zeroAxis) {\r\n                xaxisOffset = 0;\r\n            } else if (zeroAxis == false) {\r\n                xaxisOffset = min;\r\n            } else if (min > 0) {\r\n                xaxisOffset = min;\r\n            } else {\r\n                xaxisOffset = max;\r\n            }\r\n            this.xaxisOffset = xaxisOffset;\r\n\r\n            range = stacked ? (Math.max.apply(Math, stackRanges) + Math.max.apply(Math, stackRangesNeg)) : max - min;\r\n\r\n            // as we plot zero/min values a single pixel line, we add a pixel to all other\r\n            // values - Reduce the effective canvas size to suit\r\n            this.canvasHeightEf = (zeroAxis && min < 0) ? this.canvasHeight - 2 : this.canvasHeight - 1;\r\n\r\n            if (min < xaxisOffset) {\r\n                yMaxCalc = (stacked && max >= 0) ? stackMax : max;\r\n                yoffset = (yMaxCalc - xaxisOffset) / range * this.canvasHeight;\r\n                if (yoffset !== Math.ceil(yoffset)) {\r\n                    this.canvasHeightEf -= 2;\r\n                    yoffset = Math.ceil(yoffset);\r\n                }\r\n            } else {\r\n                yoffset = this.canvasHeight;\r\n            }\r\n            this.yoffset = yoffset;\r\n\r\n            if ($.isArray(options.get('colorMap'))) {\r\n                this.colorMapByIndex = options.get('colorMap');\r\n                this.colorMapByValue = null;\r\n            } else {\r\n                this.colorMapByIndex = null;\r\n                this.colorMapByValue = options.get('colorMap');\r\n                if (this.colorMapByValue && this.colorMapByValue.get === undefined) {\r\n                    this.colorMapByValue = new RangeMap(this.colorMapByValue);\r\n                }\r\n            }\r\n\r\n            this.range = range;\r\n        },\r\n\r\n        getRegion: function (el, x, y) {\r\n            var result = Math.floor(x / this.totalBarWidth);\r\n            return (result < 0 || result >= this.values.length) ? undefined : result;\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var currentRegion = this.currentRegion,\r\n                values = ensureArray(this.values[currentRegion]),\r\n                result = [],\r\n                value, i;\r\n            for (i = values.length; i--;) {\r\n                value = values[i];\r\n                result.push({\r\n                    isNull: value === null,\r\n                    value: value,\r\n                    color: this.calcColor(i, value, currentRegion),\r\n                    offset: currentRegion\r\n                });\r\n            }\r\n            return result;\r\n        },\r\n\r\n        calcColor: function (stacknum, value, valuenum) {\r\n            var colorMapByIndex = this.colorMapByIndex,\r\n                colorMapByValue = this.colorMapByValue,\r\n                options = this.options,\r\n                color, newColor;\r\n            if (this.stacked) {\r\n                color = options.get('stackedBarColor');\r\n            } else {\r\n                color = (value < 0) ? options.get('negBarColor') : options.get('barColor');\r\n            }\r\n            if (value === 0 && options.get('zeroColor') !== undefined) {\r\n                color = options.get('zeroColor');\r\n            }\r\n            if (colorMapByValue && (newColor = colorMapByValue.get(value))) {\r\n                color = newColor;\r\n            } else if (colorMapByIndex && colorMapByIndex.length > valuenum) {\r\n                color = colorMapByIndex[valuenum];\r\n            }\r\n            return $.isArray(color) ? color[stacknum % color.length] : color;\r\n        },\r\n\r\n        /**\r\n         * Render bar(s) for a region\r\n         */\r\n        renderRegion: function (valuenum, highlight) {\r\n            var vals = this.values[valuenum],\r\n                options = this.options,\r\n                xaxisOffset = this.xaxisOffset,\r\n                result = [],\r\n                range = this.range,\r\n                stacked = this.stacked,\r\n                target = this.target,\r\n                x = valuenum * this.totalBarWidth,\r\n                canvasHeightEf = this.canvasHeightEf,\r\n                yoffset = this.yoffset,\r\n                y, height, color, isNull, yoffsetNeg, i, valcount, val, minPlotted, allMin;\r\n\r\n            vals = $.isArray(vals) ? vals : [vals];\r\n            valcount = vals.length;\r\n            val = vals[0];\r\n            isNull = all(null, vals);\r\n            allMin = all(xaxisOffset, vals, true);\r\n\r\n            if (isNull) {\r\n                if (options.get('nullColor')) {\r\n                    color = highlight ? options.get('nullColor') : this.calcHighlightColor(options.get('nullColor'), options);\r\n                    y = (yoffset > 0) ? yoffset - 1 : yoffset;\r\n                    return target.drawRect(x, y, this.barWidth - 1, 0, color, color);\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            }\r\n            yoffsetNeg = yoffset;\r\n            for (i = 0; i < valcount; i++) {\r\n                val = vals[i];\r\n\r\n                if (stacked && val === xaxisOffset) {\r\n                    if (!allMin || minPlotted) {\r\n                        continue;\r\n                    }\r\n                    minPlotted = true;\r\n                }\r\n\r\n                if (range > 0) {\r\n                    height = Math.floor(canvasHeightEf * ((Math.abs(val - xaxisOffset) / range))) + 1;\r\n                } else {\r\n                    height = 1;\r\n                }\r\n                if (val < xaxisOffset || (val === xaxisOffset && yoffset === 0)) {\r\n                    y = yoffsetNeg;\r\n                    yoffsetNeg += height;\r\n                } else {\r\n                    y = yoffset - height;\r\n                    yoffset -= height;\r\n                }\r\n                color = this.calcColor(i, val, valuenum);\r\n                if (highlight) {\r\n                    color = this.calcHighlightColor(color, options);\r\n                }\r\n                result.push(target.drawRect(x, y, this.barWidth - 1, height - 1, color, color));\r\n            }\r\n            if (result.length === 1) {\r\n                return result[0];\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Tristate charts\r\n     */\r\n    $.fn.sparkline.tristate = tristate = createClass($.fn.sparkline._base, barHighlightMixin, {\r\n        type: 'tristate',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            var barWidth = parseInt(options.get('barWidth'), 10),\r\n                barSpacing = parseInt(options.get('barSpacing'), 10);\r\n            tristate._super.init.call(this, el, values, options, width, height);\r\n\r\n            this.regionShapes = {};\r\n            this.barWidth = barWidth;\r\n            this.barSpacing = barSpacing;\r\n            this.totalBarWidth = barWidth + barSpacing;\r\n            this.values = $.map(values, Number);\r\n            this.width = width = (values.length * barWidth) + ((values.length - 1) * barSpacing);\r\n\r\n            if ($.isArray(options.get('colorMap'))) {\r\n                this.colorMapByIndex = options.get('colorMap');\r\n                this.colorMapByValue = null;\r\n            } else {\r\n                this.colorMapByIndex = null;\r\n                this.colorMapByValue = options.get('colorMap');\r\n                if (this.colorMapByValue && this.colorMapByValue.get === undefined) {\r\n                    this.colorMapByValue = new RangeMap(this.colorMapByValue);\r\n                }\r\n            }\r\n            this.initTarget();\r\n        },\r\n\r\n        getRegion: function (el, x, y) {\r\n            return Math.floor(x / this.totalBarWidth);\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var currentRegion = this.currentRegion;\r\n            return {\r\n                isNull: this.values[currentRegion] === undefined,\r\n                value: this.values[currentRegion],\r\n                color: this.calcColor(this.values[currentRegion], currentRegion),\r\n                offset: currentRegion\r\n            };\r\n        },\r\n\r\n        calcColor: function (value, valuenum) {\r\n            var values = this.values,\r\n                options = this.options,\r\n                colorMapByIndex = this.colorMapByIndex,\r\n                colorMapByValue = this.colorMapByValue,\r\n                color, newColor;\r\n\r\n            if (colorMapByValue && (newColor = colorMapByValue.get(value))) {\r\n                color = newColor;\r\n            } else if (colorMapByIndex && colorMapByIndex.length > valuenum) {\r\n                color = colorMapByIndex[valuenum];\r\n            } else if (values[valuenum] < 0) {\r\n                color = options.get('negBarColor');\r\n            } else if (values[valuenum] > 0) {\r\n                color = options.get('posBarColor');\r\n            } else {\r\n                color = options.get('zeroBarColor');\r\n            }\r\n            return color;\r\n        },\r\n\r\n        renderRegion: function (valuenum, highlight) {\r\n            var values = this.values,\r\n                options = this.options,\r\n                target = this.target,\r\n                canvasHeight, height, halfHeight,\r\n                x, y, color;\r\n\r\n            canvasHeight = target.pixelHeight;\r\n            halfHeight = Math.round(canvasHeight / 2);\r\n\r\n            x = valuenum * this.totalBarWidth;\r\n            if (values[valuenum] < 0) {\r\n                y = halfHeight;\r\n                height = halfHeight - 1;\r\n            } else if (values[valuenum] > 0) {\r\n                y = 0;\r\n                height = halfHeight - 1;\r\n            } else {\r\n                y = halfHeight - 1;\r\n                height = 2;\r\n            }\r\n            color = this.calcColor(values[valuenum], valuenum);\r\n            if (color === null) {\r\n                return;\r\n            }\r\n            if (highlight) {\r\n                color = this.calcHighlightColor(color, options);\r\n            }\r\n            return target.drawRect(x, y, this.barWidth - 1, height - 1, color, color);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Discrete charts\r\n     */\r\n    $.fn.sparkline.discrete = discrete = createClass($.fn.sparkline._base, barHighlightMixin, {\r\n        type: 'discrete',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            discrete._super.init.call(this, el, values, options, width, height);\r\n\r\n            this.regionShapes = {};\r\n            this.values = values = $.map(values, Number);\r\n            this.min = Math.min.apply(Math, values);\r\n            this.max = Math.max.apply(Math, values);\r\n            this.range = this.max - this.min;\r\n            this.width = width = options.get('width') === 'auto' ? values.length * 2 : this.width;\r\n            this.interval = Math.floor(width / values.length);\r\n            this.itemWidth = width / values.length;\r\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < this.min)) {\r\n                this.min = options.get('chartRangeMin');\r\n            }\r\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > this.max)) {\r\n                this.max = options.get('chartRangeMax');\r\n            }\r\n            this.initTarget();\r\n            if (this.target) {\r\n                this.lineHeight = options.get('lineHeight') === 'auto' ? Math.round(this.canvasHeight * 0.3) : options.get('lineHeight');\r\n            }\r\n        },\r\n\r\n        getRegion: function (el, x, y) {\r\n            return Math.floor(x / this.itemWidth);\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var currentRegion = this.currentRegion;\r\n            return {\r\n                isNull: this.values[currentRegion] === undefined,\r\n                value: this.values[currentRegion],\r\n                offset: currentRegion\r\n            };\r\n        },\r\n\r\n        renderRegion: function (valuenum, highlight) {\r\n            var values = this.values,\r\n                options = this.options,\r\n                min = this.min,\r\n                max = this.max,\r\n                range = this.range,\r\n                interval = this.interval,\r\n                target = this.target,\r\n                canvasHeight = this.canvasHeight,\r\n                lineHeight = this.lineHeight,\r\n                pheight = canvasHeight - lineHeight,\r\n                ytop, val, color, x;\r\n\r\n            val = clipval(values[valuenum], min, max);\r\n            x = valuenum * interval;\r\n            ytop = Math.round(pheight - pheight * ((val - min) / range));\r\n            color = (options.get('thresholdColor') && val < options.get('thresholdValue')) ? options.get('thresholdColor') : options.get('lineColor');\r\n            if (highlight) {\r\n                color = this.calcHighlightColor(color, options);\r\n            }\r\n            return target.drawLine(x, ytop, x, ytop + lineHeight, color);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Bullet charts\r\n     */\r\n    $.fn.sparkline.bullet = bullet = createClass($.fn.sparkline._base, {\r\n        type: 'bullet',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            var min, max, vals;\r\n            bullet._super.init.call(this, el, values, options, width, height);\r\n\r\n            // values: target, performance, range1, range2, range3\r\n            this.values = values = normalizeValues(values);\r\n            // target or performance could be null\r\n            vals = values.slice();\r\n            vals[0] = vals[0] === null ? vals[2] : vals[0];\r\n            vals[1] = values[1] === null ? vals[2] : vals[1];\r\n            min = Math.min.apply(Math, values);\r\n            max = Math.max.apply(Math, values);\r\n            if (options.get('base') === undefined) {\r\n                min = min < 0 ? min : 0;\r\n            } else {\r\n                min = options.get('base');\r\n            }\r\n            this.min = min;\r\n            this.max = max;\r\n            this.range = max - min;\r\n            this.shapes = {};\r\n            this.valueShapes = {};\r\n            this.regiondata = {};\r\n            this.width = width = options.get('width') === 'auto' ? '4.0em' : width;\r\n            this.target = this.$el.simpledraw(width, height, options.get('composite'));\r\n            if (!values.length) {\r\n                this.disabled = true;\r\n            }\r\n            this.initTarget();\r\n        },\r\n\r\n        getRegion: function (el, x, y) {\r\n            var shapeid = this.target.getShapeAt(el, x, y);\r\n            return (shapeid !== undefined && this.shapes[shapeid] !== undefined) ? this.shapes[shapeid] : undefined;\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var currentRegion = this.currentRegion;\r\n            return {\r\n                fieldkey: currentRegion.substr(0, 1),\r\n                value: this.values[currentRegion.substr(1)],\r\n                region: currentRegion\r\n            };\r\n        },\r\n\r\n        changeHighlight: function (highlight) {\r\n            var currentRegion = this.currentRegion,\r\n                shapeid = this.valueShapes[currentRegion],\r\n                shape;\r\n            delete this.shapes[shapeid];\r\n            switch (currentRegion.substr(0, 1)) {\r\n                case 'r':\r\n                    shape = this.renderRange(currentRegion.substr(1), highlight);\r\n                    break;\r\n                case 'p':\r\n                    shape = this.renderPerformance(highlight);\r\n                    break;\r\n                case 't':\r\n                    shape = this.renderTarget(highlight);\r\n                    break;\r\n            }\r\n            this.valueShapes[currentRegion] = shape.id;\r\n            this.shapes[shape.id] = currentRegion;\r\n            this.target.replaceWithShape(shapeid, shape);\r\n        },\r\n\r\n        renderRange: function (rn, highlight) {\r\n            var rangeval = this.values[rn],\r\n                rangewidth = Math.round(this.canvasWidth * ((rangeval - this.min) / this.range)),\r\n                color = this.options.get('rangeColors')[rn - 2];\r\n            if (highlight) {\r\n                color = this.calcHighlightColor(color, this.options);\r\n            }\r\n            return this.target.drawRect(0, 0, rangewidth - 1, this.canvasHeight - 1, color, color);\r\n        },\r\n\r\n        renderPerformance: function (highlight) {\r\n            var perfval = this.values[1],\r\n                perfwidth = Math.round(this.canvasWidth * ((perfval - this.min) / this.range)),\r\n                color = this.options.get('performanceColor');\r\n            if (highlight) {\r\n                color = this.calcHighlightColor(color, this.options);\r\n            }\r\n            return this.target.drawRect(0, Math.round(this.canvasHeight * 0.3), perfwidth - 1,\r\n                Math.round(this.canvasHeight * 0.4) - 1, color, color);\r\n        },\r\n\r\n        renderTarget: function (highlight) {\r\n            var targetval = this.values[0],\r\n                x = Math.round(this.canvasWidth * ((targetval - this.min) / this.range) - (this.options.get('targetWidth') / 2)),\r\n                targettop = Math.round(this.canvasHeight * 0.10),\r\n                targetheight = this.canvasHeight - (targettop * 2),\r\n                color = this.options.get('targetColor');\r\n            if (highlight) {\r\n                color = this.calcHighlightColor(color, this.options);\r\n            }\r\n            return this.target.drawRect(x, targettop, this.options.get('targetWidth') - 1, targetheight - 1, color, color);\r\n        },\r\n\r\n        render: function () {\r\n            var vlen = this.values.length,\r\n                target = this.target,\r\n                i, shape;\r\n            if (!bullet._super.render.call(this)) {\r\n                return;\r\n            }\r\n            for (i = 2; i < vlen; i++) {\r\n                shape = this.renderRange(i).append();\r\n                this.shapes[shape.id] = 'r' + i;\r\n                this.valueShapes['r' + i] = shape.id;\r\n            }\r\n            if (this.values[1] !== null) {\r\n                shape = this.renderPerformance().append();\r\n                this.shapes[shape.id] = 'p1';\r\n                this.valueShapes.p1 = shape.id;\r\n            }\r\n            if (this.values[0] !== null) {\r\n                shape = this.renderTarget().append();\r\n                this.shapes[shape.id] = 't0';\r\n                this.valueShapes.t0 = shape.id;\r\n            }\r\n            target.render();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Pie charts\r\n     */\r\n    $.fn.sparkline.pie = pie = createClass($.fn.sparkline._base, {\r\n        type: 'pie',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            var total = 0, i;\r\n\r\n            pie._super.init.call(this, el, values, options, width, height);\r\n\r\n            this.shapes = {}; // map shape ids to value offsets\r\n            this.valueShapes = {}; // maps value offsets to shape ids\r\n            this.values = values = $.map(values, Number);\r\n\r\n            if (options.get('width') === 'auto') {\r\n                this.width = this.height;\r\n            }\r\n\r\n            if (values.length > 0) {\r\n                for (i = values.length; i--;) {\r\n                    total += values[i];\r\n                }\r\n            }\r\n            this.total = total;\r\n            this.initTarget();\r\n            this.radius = Math.floor(Math.min(this.canvasWidth, this.canvasHeight) / 2);\r\n        },\r\n\r\n        getRegion: function (el, x, y) {\r\n            var shapeid = this.target.getShapeAt(el, x, y);\r\n            return (shapeid !== undefined && this.shapes[shapeid] !== undefined) ? this.shapes[shapeid] : undefined;\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var currentRegion = this.currentRegion;\r\n            return {\r\n                isNull: this.values[currentRegion] === undefined,\r\n                value: this.values[currentRegion],\r\n                percent: this.values[currentRegion] / this.total * 100,\r\n                color: this.options.get('sliceColors')[currentRegion % this.options.get('sliceColors').length],\r\n                offset: currentRegion\r\n            };\r\n        },\r\n\r\n        changeHighlight: function (highlight) {\r\n            var currentRegion = this.currentRegion,\r\n                 newslice = this.renderSlice(currentRegion, highlight),\r\n                 shapeid = this.valueShapes[currentRegion];\r\n            delete this.shapes[shapeid];\r\n            this.target.replaceWithShape(shapeid, newslice);\r\n            this.valueShapes[currentRegion] = newslice.id;\r\n            this.shapes[newslice.id] = currentRegion;\r\n        },\r\n\r\n        renderSlice: function (valuenum, highlight) {\r\n            var target = this.target,\r\n                options = this.options,\r\n                radius = this.radius,\r\n                borderWidth = options.get('borderWidth'),\r\n                offset = options.get('offset'),\r\n                circle = 2 * Math.PI,\r\n                values = this.values,\r\n                total = this.total,\r\n                next = offset ? (2*Math.PI)*(offset/360) : 0,\r\n                start, end, i, vlen, color;\r\n\r\n            vlen = values.length;\r\n            for (i = 0; i < vlen; i++) {\r\n                start = next;\r\n                end = next;\r\n                if (total > 0) {  // avoid divide by zero\r\n                    end = next + (circle * (values[i] / total));\r\n                }\r\n                if (valuenum === i) {\r\n                    color = options.get('sliceColors')[i % options.get('sliceColors').length];\r\n                    if (highlight) {\r\n                        color = this.calcHighlightColor(color, options);\r\n                    }\r\n\r\n                    return target.drawPieSlice(radius, radius, radius - borderWidth, start, end, undefined, color);\r\n                }\r\n                next = end;\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            var target = this.target,\r\n                values = this.values,\r\n                options = this.options,\r\n                radius = this.radius,\r\n                borderWidth = options.get('borderWidth'),\r\n                shape, i;\r\n\r\n            if (!pie._super.render.call(this)) {\r\n                return;\r\n            }\r\n            if (borderWidth) {\r\n                target.drawCircle(radius, radius, Math.floor(radius - (borderWidth / 2)),\r\n                    options.get('borderColor'), undefined, borderWidth).append();\r\n            }\r\n            for (i = values.length; i--;) {\r\n                if (values[i]) { // don't render zero values\r\n                    shape = this.renderSlice(i).append();\r\n                    this.valueShapes[i] = shape.id; // store just the shapeid\r\n                    this.shapes[shape.id] = i;\r\n                }\r\n            }\r\n            target.render();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Box plots\r\n     */\r\n    $.fn.sparkline.box = box = createClass($.fn.sparkline._base, {\r\n        type: 'box',\r\n\r\n        init: function (el, values, options, width, height) {\r\n            box._super.init.call(this, el, values, options, width, height);\r\n            this.values = $.map(values, Number);\r\n            this.width = options.get('width') === 'auto' ? '4.0em' : width;\r\n            this.initTarget();\r\n            if (!this.values.length) {\r\n                this.disabled = 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Simulate a single region\r\n         */\r\n        getRegion: function () {\r\n            return 1;\r\n        },\r\n\r\n        getCurrentRegionFields: function () {\r\n            var result = [\r\n                { field: 'lq', value: this.quartiles[0] },\r\n                { field: 'med', value: this.quartiles[1] },\r\n                { field: 'uq', value: this.quartiles[2] }\r\n            ];\r\n            if (this.loutlier !== undefined) {\r\n                result.push({ field: 'lo', value: this.loutlier});\r\n            }\r\n            if (this.routlier !== undefined) {\r\n                result.push({ field: 'ro', value: this.routlier});\r\n            }\r\n            if (this.lwhisker !== undefined) {\r\n                result.push({ field: 'lw', value: this.lwhisker});\r\n            }\r\n            if (this.rwhisker !== undefined) {\r\n                result.push({ field: 'rw', value: this.rwhisker});\r\n            }\r\n            return result;\r\n        },\r\n\r\n        render: function () {\r\n            var target = this.target,\r\n                values = this.values,\r\n                vlen = values.length,\r\n                options = this.options,\r\n                canvasWidth = this.canvasWidth,\r\n                canvasHeight = this.canvasHeight,\r\n                minValue = options.get('chartRangeMin') === undefined ? Math.min.apply(Math, values) : options.get('chartRangeMin'),\r\n                maxValue = options.get('chartRangeMax') === undefined ? Math.max.apply(Math, values) : options.get('chartRangeMax'),\r\n                canvasLeft = 0,\r\n                lwhisker, loutlier, iqr, q1, q2, q3, rwhisker, routlier, i,\r\n                size, unitSize;\r\n\r\n            if (!box._super.render.call(this)) {\r\n                return;\r\n            }\r\n\r\n            if (options.get('raw')) {\r\n                if (options.get('showOutliers') && values.length > 5) {\r\n                    loutlier = values[0];\r\n                    lwhisker = values[1];\r\n                    q1 = values[2];\r\n                    q2 = values[3];\r\n                    q3 = values[4];\r\n                    rwhisker = values[5];\r\n                    routlier = values[6];\r\n                } else {\r\n                    lwhisker = values[0];\r\n                    q1 = values[1];\r\n                    q2 = values[2];\r\n                    q3 = values[3];\r\n                    rwhisker = values[4];\r\n                }\r\n            } else {\r\n                values.sort(function (a, b) { return a - b; });\r\n                q1 = quartile(values, 1);\r\n                q2 = quartile(values, 2);\r\n                q3 = quartile(values, 3);\r\n                iqr = q3 - q1;\r\n                if (options.get('showOutliers')) {\r\n                    lwhisker = rwhisker = undefined;\r\n                    for (i = 0; i < vlen; i++) {\r\n                        if (lwhisker === undefined && values[i] > q1 - (iqr * options.get('outlierIQR'))) {\r\n                            lwhisker = values[i];\r\n                        }\r\n                        if (values[i] < q3 + (iqr * options.get('outlierIQR'))) {\r\n                            rwhisker = values[i];\r\n                        }\r\n                    }\r\n                    loutlier = values[0];\r\n                    routlier = values[vlen - 1];\r\n                } else {\r\n                    lwhisker = values[0];\r\n                    rwhisker = values[vlen - 1];\r\n                }\r\n            }\r\n            this.quartiles = [q1, q2, q3];\r\n            this.lwhisker = lwhisker;\r\n            this.rwhisker = rwhisker;\r\n            this.loutlier = loutlier;\r\n            this.routlier = routlier;\r\n\r\n            unitSize = canvasWidth / (maxValue - minValue + 1);\r\n            if (options.get('showOutliers')) {\r\n                canvasLeft = Math.ceil(options.get('spotRadius'));\r\n                canvasWidth -= 2 * Math.ceil(options.get('spotRadius'));\r\n                unitSize = canvasWidth / (maxValue - minValue + 1);\r\n                if (loutlier < lwhisker) {\r\n                    target.drawCircle((loutlier - minValue) * unitSize + canvasLeft,\r\n                        canvasHeight / 2,\r\n                        options.get('spotRadius'),\r\n                        options.get('outlierLineColor'),\r\n                        options.get('outlierFillColor')).append();\r\n                }\r\n                if (routlier > rwhisker) {\r\n                    target.drawCircle((routlier - minValue) * unitSize + canvasLeft,\r\n                        canvasHeight / 2,\r\n                        options.get('spotRadius'),\r\n                        options.get('outlierLineColor'),\r\n                        options.get('outlierFillColor')).append();\r\n                }\r\n            }\r\n\r\n            // box\r\n            target.drawRect(\r\n                Math.round((q1 - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight * 0.1),\r\n                Math.round((q3 - q1) * unitSize),\r\n                Math.round(canvasHeight * 0.8),\r\n                options.get('boxLineColor'),\r\n                options.get('boxFillColor')).append();\r\n            // left whisker\r\n            target.drawLine(\r\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight / 2),\r\n                Math.round((q1 - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight / 2),\r\n                options.get('lineColor')).append();\r\n            target.drawLine(\r\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight / 4),\r\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight - canvasHeight / 4),\r\n                options.get('whiskerColor')).append();\r\n            // right whisker\r\n            target.drawLine(Math.round((rwhisker - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight / 2),\r\n                Math.round((q3 - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight / 2),\r\n                options.get('lineColor')).append();\r\n            target.drawLine(\r\n                Math.round((rwhisker - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight / 4),\r\n                Math.round((rwhisker - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight - canvasHeight / 4),\r\n                options.get('whiskerColor')).append();\r\n            // median line\r\n            target.drawLine(\r\n                Math.round((q2 - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight * 0.1),\r\n                Math.round((q2 - minValue) * unitSize + canvasLeft),\r\n                Math.round(canvasHeight * 0.9),\r\n                options.get('medianColor')).append();\r\n            if (options.get('target')) {\r\n                size = Math.ceil(options.get('spotRadius'));\r\n                target.drawLine(\r\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft),\r\n                    Math.round((canvasHeight / 2) - size),\r\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft),\r\n                    Math.round((canvasHeight / 2) + size),\r\n                    options.get('targetColor')).append();\r\n                target.drawLine(\r\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft - size),\r\n                    Math.round(canvasHeight / 2),\r\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft + size),\r\n                    Math.round(canvasHeight / 2),\r\n                    options.get('targetColor')).append();\r\n            }\r\n            target.render();\r\n        }\r\n    });\r\n\r\n    // Setup a very simple \"virtual canvas\" to make drawing the few shapes we need easier\r\n    // This is accessible as $(foo).simpledraw()\r\n\r\n    VShape = createClass({\r\n        init: function (target, id, type, args) {\r\n            this.target = target;\r\n            this.id = id;\r\n            this.type = type;\r\n            this.args = args;\r\n        },\r\n        append: function () {\r\n            this.target.appendShape(this);\r\n            return this;\r\n        }\r\n    });\r\n\r\n    VCanvas_base = createClass({\r\n        _pxregex: /(\\d+)(px)?\\s*$/i,\r\n\r\n        init: function (width, height, target) {\r\n            if (!width) {\r\n                return;\r\n            }\r\n            this.width = width;\r\n            this.height = height;\r\n            this.target = target;\r\n            this.lastShapeId = null;\r\n            if (target[0]) {\r\n                target = target[0];\r\n            }\r\n            $.data(target, '_jqs_vcanvas', this);\r\n        },\r\n\r\n        drawLine: function (x1, y1, x2, y2, lineColor, lineWidth) {\r\n            return this.drawShape([[x1, y1], [x2, y2]], lineColor, lineWidth);\r\n        },\r\n\r\n        drawShape: function (path, lineColor, fillColor, lineWidth) {\r\n            return this._genShape('Shape', [path, lineColor, fillColor, lineWidth]);\r\n        },\r\n\r\n        drawCircle: function (x, y, radius, lineColor, fillColor, lineWidth) {\r\n            return this._genShape('Circle', [x, y, radius, lineColor, fillColor, lineWidth]);\r\n        },\r\n\r\n        drawPieSlice: function (x, y, radius, startAngle, endAngle, lineColor, fillColor) {\r\n            return this._genShape('PieSlice', [x, y, radius, startAngle, endAngle, lineColor, fillColor]);\r\n        },\r\n\r\n        drawRect: function (x, y, width, height, lineColor, fillColor) {\r\n            return this._genShape('Rect', [x, y, width, height, lineColor, fillColor]);\r\n        },\r\n\r\n        getElement: function () {\r\n            return this.canvas;\r\n        },\r\n\r\n        /**\r\n         * Return the most recently inserted shape id\r\n         */\r\n        getLastShapeId: function () {\r\n            return this.lastShapeId;\r\n        },\r\n\r\n        /**\r\n         * Clear and reset the canvas\r\n         */\r\n        reset: function () {\r\n            alert('reset not implemented');\r\n        },\r\n\r\n        _insert: function (el, target) {\r\n            $(target).html(el);\r\n        },\r\n\r\n        /**\r\n         * Calculate the pixel dimensions of the canvas\r\n         */\r\n        _calculatePixelDims: function (width, height, canvas) {\r\n            // XXX This should probably be a configurable option\r\n            var match;\r\n            match = this._pxregex.exec(height);\r\n            if (match) {\r\n                this.pixelHeight = match[1];\r\n            } else {\r\n                this.pixelHeight = $(canvas).height();\r\n            }\r\n            match = this._pxregex.exec(width);\r\n            if (match) {\r\n                this.pixelWidth = match[1];\r\n            } else {\r\n                this.pixelWidth = $(canvas).width();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generate a shape object and id for later rendering\r\n         */\r\n        _genShape: function (shapetype, shapeargs) {\r\n            var id = shapeCount++;\r\n            shapeargs.unshift(id);\r\n            return new VShape(this, id, shapetype, shapeargs);\r\n        },\r\n\r\n        /**\r\n         * Add a shape to the end of the render queue\r\n         */\r\n        appendShape: function (shape) {\r\n            alert('appendShape not implemented');\r\n        },\r\n\r\n        /**\r\n         * Replace one shape with another\r\n         */\r\n        replaceWithShape: function (shapeid, shape) {\r\n            alert('replaceWithShape not implemented');\r\n        },\r\n\r\n        /**\r\n         * Insert one shape after another in the render queue\r\n         */\r\n        insertAfterShape: function (shapeid, shape) {\r\n            alert('insertAfterShape not implemented');\r\n        },\r\n\r\n        /**\r\n         * Remove a shape from the queue\r\n         */\r\n        removeShapeId: function (shapeid) {\r\n            alert('removeShapeId not implemented');\r\n        },\r\n\r\n        /**\r\n         * Find a shape at the specified x/y co-ordinates\r\n         */\r\n        getShapeAt: function (el, x, y) {\r\n            alert('getShapeAt not implemented');\r\n        },\r\n\r\n        /**\r\n         * Render all queued shapes onto the canvas\r\n         */\r\n        render: function () {\r\n            alert('render not implemented');\r\n        }\r\n    });\r\n\r\n    VCanvas_canvas = createClass(VCanvas_base, {\r\n        init: function (width, height, target, interact) {\r\n            VCanvas_canvas._super.init.call(this, width, height, target);\r\n            this.canvas = document.createElement('canvas');\r\n            if (target[0]) {\r\n                target = target[0];\r\n            }\r\n            $.data(target, '_jqs_vcanvas', this);\r\n            $(this.canvas).css({ display: 'inline-block', width: width, height: height, verticalAlign: 'top' });\r\n            this._insert(this.canvas, target);\r\n            this._calculatePixelDims(width, height, this.canvas);\r\n            this.canvas.width = this.pixelWidth;\r\n            this.canvas.height = this.pixelHeight;\r\n            this.interact = interact;\r\n            this.shapes = {};\r\n            this.shapeseq = [];\r\n            this.currentTargetShapeId = undefined;\r\n            $(this.canvas).css({width: this.pixelWidth, height: this.pixelHeight});\r\n        },\r\n\r\n        _getContext: function (lineColor, fillColor, lineWidth) {\r\n            var context = this.canvas.getContext('2d');\r\n            if (lineColor !== undefined) {\r\n                context.strokeStyle = lineColor;\r\n            }\r\n            context.lineWidth = lineWidth === undefined ? 1 : lineWidth;\r\n            if (fillColor !== undefined) {\r\n                context.fillStyle = fillColor;\r\n            }\r\n            return context;\r\n        },\r\n\r\n        reset: function () {\r\n            var context = this._getContext();\r\n            context.clearRect(0, 0, this.pixelWidth, this.pixelHeight);\r\n            this.shapes = {};\r\n            this.shapeseq = [];\r\n            this.currentTargetShapeId = undefined;\r\n        },\r\n\r\n        _drawShape: function (shapeid, path, lineColor, fillColor, lineWidth) {\r\n            var context = this._getContext(lineColor, fillColor, lineWidth),\r\n                i, plen;\r\n            context.beginPath();\r\n            context.moveTo(path[0][0] + 0.5, path[0][1] + 0.5);\r\n            for (i = 1, plen = path.length; i < plen; i++) {\r\n                context.lineTo(path[i][0] + 0.5, path[i][1] + 0.5); // the 0.5 offset gives us crisp pixel-width lines\r\n            }\r\n            if (lineColor !== undefined) {\r\n                context.stroke();\r\n            }\r\n            if (fillColor !== undefined) {\r\n                context.fill();\r\n            }\r\n            if (this.targetX !== undefined && this.targetY !== undefined &&\r\n                context.isPointInPath(this.targetX, this.targetY)) {\r\n                this.currentTargetShapeId = shapeid;\r\n            }\r\n        },\r\n\r\n        _drawCircle: function (shapeid, x, y, radius, lineColor, fillColor, lineWidth) {\r\n            var context = this._getContext(lineColor, fillColor, lineWidth);\r\n            context.beginPath();\r\n            context.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n            if (this.targetX !== undefined && this.targetY !== undefined &&\r\n                context.isPointInPath(this.targetX, this.targetY)) {\r\n                this.currentTargetShapeId = shapeid;\r\n            }\r\n            if (lineColor !== undefined) {\r\n                context.stroke();\r\n            }\r\n            if (fillColor !== undefined) {\r\n                context.fill();\r\n            }\r\n        },\r\n\r\n        _drawPieSlice: function (shapeid, x, y, radius, startAngle, endAngle, lineColor, fillColor) {\r\n            var context = this._getContext(lineColor, fillColor);\r\n            context.beginPath();\r\n            context.moveTo(x, y);\r\n            context.arc(x, y, radius, startAngle, endAngle, false);\r\n            context.lineTo(x, y);\r\n            context.closePath();\r\n            if (lineColor !== undefined) {\r\n                context.stroke();\r\n            }\r\n            if (fillColor) {\r\n                context.fill();\r\n            }\r\n            if (this.targetX !== undefined && this.targetY !== undefined &&\r\n                context.isPointInPath(this.targetX, this.targetY)) {\r\n                this.currentTargetShapeId = shapeid;\r\n            }\r\n        },\r\n\r\n        _drawRect: function (shapeid, x, y, width, height, lineColor, fillColor) {\r\n            return this._drawShape(shapeid, [[x, y], [x + width, y], [x + width, y + height], [x, y + height], [x, y]], lineColor, fillColor);\r\n        },\r\n\r\n        appendShape: function (shape) {\r\n            this.shapes[shape.id] = shape;\r\n            this.shapeseq.push(shape.id);\r\n            this.lastShapeId = shape.id;\r\n            return shape.id;\r\n        },\r\n\r\n        replaceWithShape: function (shapeid, shape) {\r\n            var shapeseq = this.shapeseq,\r\n                i;\r\n            this.shapes[shape.id] = shape;\r\n            for (i = shapeseq.length; i--;) {\r\n                if (shapeseq[i] == shapeid) {\r\n                    shapeseq[i] = shape.id;\r\n                }\r\n            }\r\n            delete this.shapes[shapeid];\r\n        },\r\n\r\n        replaceWithShapes: function (shapeids, shapes) {\r\n            var shapeseq = this.shapeseq,\r\n                shapemap = {},\r\n                sid, i, first;\r\n\r\n            for (i = shapeids.length; i--;) {\r\n                shapemap[shapeids[i]] = true;\r\n            }\r\n            for (i = shapeseq.length; i--;) {\r\n                sid = shapeseq[i];\r\n                if (shapemap[sid]) {\r\n                    shapeseq.splice(i, 1);\r\n                    delete this.shapes[sid];\r\n                    first = i;\r\n                }\r\n            }\r\n            for (i = shapes.length; i--;) {\r\n                shapeseq.splice(first, 0, shapes[i].id);\r\n                this.shapes[shapes[i].id] = shapes[i];\r\n            }\r\n\r\n        },\r\n\r\n        insertAfterShape: function (shapeid, shape) {\r\n            var shapeseq = this.shapeseq,\r\n                i;\r\n            for (i = shapeseq.length; i--;) {\r\n                if (shapeseq[i] === shapeid) {\r\n                    shapeseq.splice(i + 1, 0, shape.id);\r\n                    this.shapes[shape.id] = shape;\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n\r\n        removeShapeId: function (shapeid) {\r\n            var shapeseq = this.shapeseq,\r\n                i;\r\n            for (i = shapeseq.length; i--;) {\r\n                if (shapeseq[i] === shapeid) {\r\n                    shapeseq.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            delete this.shapes[shapeid];\r\n        },\r\n\r\n        getShapeAt: function (el, x, y) {\r\n            this.targetX = x;\r\n            this.targetY = y;\r\n            this.render();\r\n            return this.currentTargetShapeId;\r\n        },\r\n\r\n        render: function () {\r\n            var shapeseq = this.shapeseq,\r\n                shapes = this.shapes,\r\n                shapeCount = shapeseq.length,\r\n                context = this._getContext(),\r\n                shapeid, shape, i;\r\n            context.clearRect(0, 0, this.pixelWidth, this.pixelHeight);\r\n            for (i = 0; i < shapeCount; i++) {\r\n                shapeid = shapeseq[i];\r\n                shape = shapes[shapeid];\r\n                this['_draw' + shape.type].apply(this, shape.args);\r\n            }\r\n            if (!this.interact) {\r\n                // not interactive so no need to keep the shapes array\r\n                this.shapes = {};\r\n                this.shapeseq = [];\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    VCanvas_vml = createClass(VCanvas_base, {\r\n        init: function (width, height, target) {\r\n            var groupel;\r\n            VCanvas_vml._super.init.call(this, width, height, target);\r\n            if (target[0]) {\r\n                target = target[0];\r\n            }\r\n            $.data(target, '_jqs_vcanvas', this);\r\n            this.canvas = document.createElement('span');\r\n            $(this.canvas).css({ display: 'inline-block', position: 'relative', overflow: 'hidden', width: width, height: height, margin: '0px', padding: '0px', verticalAlign: 'top'});\r\n            this._insert(this.canvas, target);\r\n            this._calculatePixelDims(width, height, this.canvas);\r\n            this.canvas.width = this.pixelWidth;\r\n            this.canvas.height = this.pixelHeight;\r\n            groupel = '<v:group coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\"' +\r\n                    ' style=\"position:absolute;top:0;left:0;width:' + this.pixelWidth + 'px;height=' + this.pixelHeight + 'px;\"></v:group>';\r\n            this.canvas.insertAdjacentHTML('beforeEnd', groupel);\r\n            this.group = $(this.canvas).children()[0];\r\n            this.rendered = false;\r\n            this.prerender = '';\r\n        },\r\n\r\n        _drawShape: function (shapeid, path, lineColor, fillColor, lineWidth) {\r\n            var vpath = [],\r\n                initial, stroke, fill, closed, vel, plen, i;\r\n            for (i = 0, plen = path.length; i < plen; i++) {\r\n                vpath[i] = '' + (path[i][0]) + ',' + (path[i][1]);\r\n            }\r\n            initial = vpath.splice(0, 1);\r\n            lineWidth = lineWidth === undefined ? 1 : lineWidth;\r\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"' + lineWidth + 'px\" strokeColor=\"' + lineColor + '\" ';\r\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\r\n            closed = vpath[0] === vpath[vpath.length - 1] ? 'x ' : '';\r\n            vel = '<v:shape coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\" ' +\r\n                 ' id=\"jqsshape' + shapeid + '\" ' +\r\n                 stroke +\r\n                 fill +\r\n                ' style=\"position:absolute;left:0px;top:0px;height:' + this.pixelHeight + 'px;width:' + this.pixelWidth + 'px;padding:0px;margin:0px;\" ' +\r\n                ' path=\"m ' + initial + ' l ' + vpath.join(', ') + ' ' + closed + 'e\">' +\r\n                ' </v:shape>';\r\n            return vel;\r\n        },\r\n\r\n        _drawCircle: function (shapeid, x, y, radius, lineColor, fillColor, lineWidth) {\r\n            var stroke, fill, vel;\r\n            x -= radius;\r\n            y -= radius;\r\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"' + lineWidth + 'px\" strokeColor=\"' + lineColor + '\" ';\r\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\r\n            vel = '<v:oval ' +\r\n                 ' id=\"jqsshape' + shapeid + '\" ' +\r\n                stroke +\r\n                fill +\r\n                ' style=\"position:absolute;top:' + y + 'px; left:' + x + 'px; width:' + (radius * 2) + 'px; height:' + (radius * 2) + 'px\"></v:oval>';\r\n            return vel;\r\n\r\n        },\r\n\r\n        _drawPieSlice: function (shapeid, x, y, radius, startAngle, endAngle, lineColor, fillColor) {\r\n            var vpath, startx, starty, endx, endy, stroke, fill, vel;\r\n            if (startAngle === endAngle) {\r\n                return '';  // VML seems to have problem when start angle equals end angle.\r\n            }\r\n            if ((endAngle - startAngle) === (2 * Math.PI)) {\r\n                startAngle = 0.0;  // VML seems to have a problem when drawing a full circle that doesn't start 0\r\n                endAngle = (2 * Math.PI);\r\n            }\r\n\r\n            startx = x + Math.round(Math.cos(startAngle) * radius);\r\n            starty = y + Math.round(Math.sin(startAngle) * radius);\r\n            endx = x + Math.round(Math.cos(endAngle) * radius);\r\n            endy = y + Math.round(Math.sin(endAngle) * radius);\r\n\r\n            if (startx === endx && starty === endy) {\r\n                if ((endAngle - startAngle) < Math.PI) {\r\n                    // Prevent very small slices from being mistaken as a whole pie\r\n                    return '';\r\n                }\r\n                // essentially going to be the entire circle, so ignore startAngle\r\n                startx = endx = x + radius;\r\n                starty = endy = y;\r\n            }\r\n\r\n            if (startx === endx && starty === endy && (endAngle - startAngle) < Math.PI) {\r\n                return '';\r\n            }\r\n\r\n            vpath = [x - radius, y - radius, x + radius, y + radius, startx, starty, endx, endy];\r\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"1px\" strokeColor=\"' + lineColor + '\" ';\r\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\r\n            vel = '<v:shape coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\" ' +\r\n                 ' id=\"jqsshape' + shapeid + '\" ' +\r\n                 stroke +\r\n                 fill +\r\n                ' style=\"position:absolute;left:0px;top:0px;height:' + this.pixelHeight + 'px;width:' + this.pixelWidth + 'px;padding:0px;margin:0px;\" ' +\r\n                ' path=\"m ' + x + ',' + y + ' wa ' + vpath.join(', ') + ' x e\">' +\r\n                ' </v:shape>';\r\n            return vel;\r\n        },\r\n\r\n        _drawRect: function (shapeid, x, y, width, height, lineColor, fillColor) {\r\n            return this._drawShape(shapeid, [[x, y], [x, y + height], [x + width, y + height], [x + width, y], [x, y]], lineColor, fillColor);\r\n        },\r\n\r\n        reset: function () {\r\n            this.group.innerHTML = '';\r\n        },\r\n\r\n        appendShape: function (shape) {\r\n            var vel = this['_draw' + shape.type].apply(this, shape.args);\r\n            if (this.rendered) {\r\n                this.group.insertAdjacentHTML('beforeEnd', vel);\r\n            } else {\r\n                this.prerender += vel;\r\n            }\r\n            this.lastShapeId = shape.id;\r\n            return shape.id;\r\n        },\r\n\r\n        replaceWithShape: function (shapeid, shape) {\r\n            var existing = $('#jqsshape' + shapeid),\r\n                vel = this['_draw' + shape.type].apply(this, shape.args);\r\n            existing[0].outerHTML = vel;\r\n        },\r\n\r\n        replaceWithShapes: function (shapeids, shapes) {\r\n            // replace the first shapeid with all the new shapes then toast the remaining old shapes\r\n            var existing = $('#jqsshape' + shapeids[0]),\r\n                replace = '',\r\n                slen = shapes.length,\r\n                i;\r\n            for (i = 0; i < slen; i++) {\r\n                replace += this['_draw' + shapes[i].type].apply(this, shapes[i].args);\r\n            }\r\n            existing[0].outerHTML = replace;\r\n            for (i = 1; i < shapeids.length; i++) {\r\n                $('#jqsshape' + shapeids[i]).remove();\r\n            }\r\n        },\r\n\r\n        insertAfterShape: function (shapeid, shape) {\r\n            var existing = $('#jqsshape' + shapeid),\r\n                 vel = this['_draw' + shape.type].apply(this, shape.args);\r\n            existing[0].insertAdjacentHTML('afterEnd', vel);\r\n        },\r\n\r\n        removeShapeId: function (shapeid) {\r\n            var existing = $('#jqsshape' + shapeid);\r\n            this.group.removeChild(existing[0]);\r\n        },\r\n\r\n        getShapeAt: function (el, x, y) {\r\n            var shapeid = el.id.substr(8);\r\n            return shapeid;\r\n        },\r\n\r\n        render: function () {\r\n            if (!this.rendered) {\r\n                // batch the intial render into a single repaint\r\n                this.group.innerHTML = this.prerender;\r\n                this.rendered = true;\r\n            }\r\n        }\r\n    });\r\n\r\n}))}(document, Math));\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}